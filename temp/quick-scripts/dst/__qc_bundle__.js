
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/scripts/BaseCmdLogic');
require('./assets/scripts/LoginScene');
require('./assets/scripts/Photon-Javascript_SDK');
require('./assets/scripts/Photon_Interface');
require('./assets/scripts/PublicSetUp');
require('./assets/scripts/autoPlayButton');
require('./assets/scripts/buildSymbols');
require('./assets/scripts/co.cc');
require('./assets/scripts/connectToServer');
require('./assets/scripts/decBetButton');
require('./assets/scripts/freeSpinAnim');
require('./assets/scripts/getSymbolAnchor');
require('./assets/scripts/getSymbolSprite');
require('./assets/scripts/handleGameCommand');
require('./assets/scripts/historyButton');
require('./assets/scripts/homeButton');
require('./assets/scripts/incBetButton');
require('./assets/scripts/lineFrames');
require('./assets/scripts/login');
require('./assets/scripts/mainController');
require('./assets/scripts/maxBetButton');
require('./assets/scripts/menuButton');
require('./assets/scripts/menuController');
require('./assets/scripts/observable.cc');
require('./assets/scripts/pauseButton');
require('./assets/scripts/performanceController');
require('./assets/scripts/playAll');
require('./assets/scripts/playEffect');
require('./assets/scripts/playLine');
require('./assets/scripts/playSymbolCol');
require('./assets/scripts/playVideo');
require('./assets/scripts/readMeButton');
require('./assets/scripts/requestGameResult');
require('./assets/scripts/requestTableInfo');
require('./assets/scripts/shuffle');
require('./assets/scripts/soundOffButton');
require('./assets/scripts/soundOnButton');
require('./assets/scripts/symbolGridIndexMapping');
require('./assets/scripts/value-types.cc');
require('./assets/scripts/videoReady');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Photon_Interface.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1d3092UE5JFUbiiQ9S4HGIj', 'Photon_Interface');
// scripts/Photon_Interface.js

"use strict";

var Photon = require('./Photon-Javascript_SDK');
/**
@namespace PhotonController
*/
// prevent globals renaming by closure compilier


var PhotonController;

(function (PhotonController) {
  /** 
     * 
     @class 
     */
  var PhotonIf = function () {
    /** 
        @constructor
        @param {Photon.ConnectionProtocol} protocol Connection protocol.
        @param {string} address Server address:port.
         */
    function PhotonIf(protocol, address) {
      this._ppr = new Photon.PhotonPeer(protocol, address, '', '');
    } //constructor function end

    /** 
        @設定peer的CallbackFunction
        @param {object} outsideObj The object who own callback function
        @param {Function} stcallback Photonpeer status callback function
        @param {Function} rspcallback Photon server response callback function
        @param {Function} srvevtcallback Photon server event callback function
        */


    PhotonIf.prototype.InitCallbackFunction = function (outsideObj, stcallback, rspcallback, eventcallback) {
      //status callback function
      this._ppr.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connecting, function () {
        stcallback(Photon.PhotonPeer.StatusCodes.connecting, outsideObj);
      });

      this._ppr.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connect, function () {
        stcallback(Photon.PhotonPeer.StatusCodes.connect, outsideObj);
      });

      this._ppr.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectFailed, function () {
        stcallback(Photon.PhotonPeer.StatusCodes.connectFailed, outsideObj);
      });

      this._ppr.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.disconnect, function () {
        stcallback(Photon.PhotonPeer.StatusCodes.disconnect, outsideObj);
      });

      this._ppr.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.timeout, function () {
        stcallback(Photon.PhotonPeer.StatusCodes.timeout, outsideObj);
      });

      this._ppr.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.error, function () {
        stcallback(Photon.PhotonPeer.StatusCodes.error, outsideObj);
      });

      this._ppr.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectClosed, function () {
        stcallback(Photon.PhotonPeer.StatusCodes.connectClosed, outsideObj);
      }); //reponse callback function


      this._ppr.addResponseListener(1, function (data) {
        var jsonstr = JSON.stringify(data);
        var obj = JSON.parse(jsonstr);

        if (obj.errCode == 0) {
          rspcallback(obj.vals, outsideObj);
        } else {
          //something error
          console.log('errCode:' + obj.errCode + ', errMsg:' + obj.errMsg);
        }
      }); //event callback function


      this._ppr.addEventListener(2, function test(b) {
        var jsonstr = JSON.stringify(b);
        var obj = JSON.parse(jsonstr);
        eventcallback(obj.vals, outsideObj);
      });
    }; //connect to server


    PhotonIf.prototype.connect = function () {
      this._ppr.connect();
    }; //send data to server


    PhotonIf.prototype.sendData = function (nCmdId) {
      var op = [0, nCmdId];

      for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); ++i) {
        op.push(i + 1, i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1]);
      }

      console.log('send cmd' + op);

      this._ppr.sendOperation(1, op);
    };

    return PhotonIf;
  }(); //class end


  PhotonController.PhotonIf = PhotonIf;
})(PhotonController || (PhotonController = {})); //namespace end


module.exports = PhotonController;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/buildSymbols.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4af37ximRlFnqqqfZsvqA7u', 'buildSymbols');
// scripts/buildSymbols.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;
exports.setSymbol = setSymbol;

var _getSymbolAnchor = _interopRequireDefault(require("./getSymbolAnchor"));

var _getSymbolSprite = _interopRequireDefault(require("./getSymbolSprite"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function setSymbol(colIndex, childIndex, symbolIndex) {
  var col = cc.find("Canvas/Game/Machine/Performance/Cols/" + (colIndex + 1));
  var child = col.getChildByName("" + (childIndex + 1));
  var sprite = child.getComponent(cc.Sprite);
  sprite.spriteFrame = (0, _getSymbolSprite["default"])(symbolIndex).spriteFrame;
}

function createSymbol(col, childIndex, symbolIndex, spacing) {
  var childName = childIndex < 0 ? "" + childIndex : "" + (childIndex + 1);
  var child = col.getChildByName(childName);

  if (child === null) {
    child = new cc.Node(childName);
    child.y = childIndex * spacing;
    col.addChild(child);
  }

  var sprite = child.getComponent(cc.Sprite);

  if (sprite === null) {
    sprite = child.addComponent(cc.Sprite);
    sprite.sizeMode = cc.Sprite.SizeMode.RAW;
  }

  sprite.spriteFrame = (0, _getSymbolSprite["default"])(symbolIndex).spriteFrame;
}

function buildSymbolCol(colTable, colIndex, spacing) {
  var col = cc.find("Canvas/Game/Machine/Performance/Cols/" + (colIndex + 1));

  for (var i = 0; i < colTable.length; i++) {
    createSymbol(col, i, colTable[i], spacing);
  }
}

var buildSymbols = function () {
  var spacing;
  return function buildSymbols(symbolColTable) {
    var anchorsNode = cc.find('Canvas/Game/Machine/Performance/Anchors');
    var colsNode = cc.find('Canvas/Game/Machine/Performance/Cols');

    for (var i = 1; i <= 5; i++) {
      var col = colsNode.getChildByName("" + i);
      var anchor = anchorsNode.getChildByName("" + i);
      col.x = anchor.x;
      col.y = anchor.getChildByName('3').y;
      col.baseY = col.y;
    }

    if (spacing === undefined) {
      var anchor1 = anchorsNode.getChildByName('1');
      spacing = Math.abs(anchor1.getChildByName('1').y - anchor1.getChildByName('2').y);
    }

    for (var _i = 0; _i < symbolColTable.length; _i++) {
      buildSymbolCol(symbolColTable[_i], _i, spacing);
    }
  };
}();

var _default = buildSymbols;
exports["default"] = _default;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcYnVpbGRTeW1ib2xzLmpzIl0sIm5hbWVzIjpbInNldFN5bWJvbCIsImNvbEluZGV4IiwiY2hpbGRJbmRleCIsInN5bWJvbEluZGV4IiwiY29sIiwiY2MiLCJmaW5kIiwiY2hpbGQiLCJnZXRDaGlsZEJ5TmFtZSIsInNwcml0ZSIsImdldENvbXBvbmVudCIsIlNwcml0ZSIsInNwcml0ZUZyYW1lIiwiY3JlYXRlU3ltYm9sIiwic3BhY2luZyIsImNoaWxkTmFtZSIsIk5vZGUiLCJ5IiwiYWRkQ2hpbGQiLCJhZGRDb21wb25lbnQiLCJzaXplTW9kZSIsIlNpemVNb2RlIiwiUkFXIiwiYnVpbGRTeW1ib2xDb2wiLCJjb2xUYWJsZSIsImkiLCJsZW5ndGgiLCJidWlsZFN5bWJvbHMiLCJzeW1ib2xDb2xUYWJsZSIsImFuY2hvcnNOb2RlIiwiY29sc05vZGUiLCJhbmNob3IiLCJ4IiwiYmFzZVkiLCJ1bmRlZmluZWQiLCJhbmNob3IxIiwiTWF0aCIsImFicyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFTyxTQUFTQSxTQUFULENBQW1CQyxRQUFuQixFQUE2QkMsVUFBN0IsRUFBeUNDLFdBQXpDLEVBQXNEO0FBQzNELE1BQU1DLEdBQUcsR0FBR0MsRUFBRSxDQUFDQyxJQUFILDRDQUFnREwsUUFBUSxHQUFHLENBQTNELEVBQVo7QUFDQSxNQUFNTSxLQUFLLEdBQUdILEdBQUcsQ0FBQ0ksY0FBSixPQUFzQk4sVUFBVSxHQUFHLENBQW5DLEVBQWQ7QUFDQSxNQUFNTyxNQUFNLEdBQUdGLEtBQUssQ0FBQ0csWUFBTixDQUFtQkwsRUFBRSxDQUFDTSxNQUF0QixDQUFmO0FBQ0FGLEVBQUFBLE1BQU0sQ0FBQ0csV0FBUCxHQUFxQixpQ0FBZ0JULFdBQWhCLEVBQTZCUyxXQUFsRDtBQUNEOztBQUVELFNBQVNDLFlBQVQsQ0FBc0JULEdBQXRCLEVBQTJCRixVQUEzQixFQUF1Q0MsV0FBdkMsRUFBb0RXLE9BQXBELEVBQTZEO0FBQzNELE1BQU1DLFNBQVMsR0FBR2IsVUFBVSxHQUFHLENBQWIsUUFBb0JBLFVBQXBCLFNBQXNDQSxVQUFVLEdBQUcsQ0FBbkQsQ0FBbEI7QUFDQSxNQUFJSyxLQUFLLEdBQUdILEdBQUcsQ0FBQ0ksY0FBSixDQUFtQk8sU0FBbkIsQ0FBWjs7QUFDQSxNQUFJUixLQUFLLEtBQUssSUFBZCxFQUFvQjtBQUNsQkEsSUFBQUEsS0FBSyxHQUFHLElBQUlGLEVBQUUsQ0FBQ1csSUFBUCxDQUFZRCxTQUFaLENBQVI7QUFDQVIsSUFBQUEsS0FBSyxDQUFDVSxDQUFOLEdBQVVmLFVBQVUsR0FBR1ksT0FBdkI7QUFDQVYsSUFBQUEsR0FBRyxDQUFDYyxRQUFKLENBQWFYLEtBQWI7QUFDRDs7QUFFRCxNQUFJRSxNQUFNLEdBQUdGLEtBQUssQ0FBQ0csWUFBTixDQUFtQkwsRUFBRSxDQUFDTSxNQUF0QixDQUFiOztBQUNBLE1BQUlGLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ25CQSxJQUFBQSxNQUFNLEdBQUdGLEtBQUssQ0FBQ1ksWUFBTixDQUFtQmQsRUFBRSxDQUFDTSxNQUF0QixDQUFUO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ1csUUFBUCxHQUFrQmYsRUFBRSxDQUFDTSxNQUFILENBQVVVLFFBQVYsQ0FBbUJDLEdBQXJDO0FBQ0Q7O0FBQ0RiLEVBQUFBLE1BQU0sQ0FBQ0csV0FBUCxHQUFxQixpQ0FBZ0JULFdBQWhCLEVBQTZCUyxXQUFsRDtBQUNEOztBQUVELFNBQVNXLGNBQVQsQ0FBd0JDLFFBQXhCLEVBQWtDdkIsUUFBbEMsRUFBNENhLE9BQTVDLEVBQXFEO0FBQ25ELE1BQU1WLEdBQUcsR0FBR0MsRUFBRSxDQUFDQyxJQUFILDRDQUFnREwsUUFBUSxHQUFHLENBQTNELEVBQVo7O0FBQ0EsT0FBSyxJQUFJd0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsUUFBUSxDQUFDRSxNQUE3QixFQUFxQ0QsQ0FBQyxFQUF0QyxFQUEwQztBQUN4Q1osSUFBQUEsWUFBWSxDQUFDVCxHQUFELEVBQU1xQixDQUFOLEVBQVNELFFBQVEsQ0FBQ0MsQ0FBRCxDQUFqQixFQUFzQlgsT0FBdEIsQ0FBWjtBQUNEO0FBQ0Y7O0FBRUQsSUFBTWEsWUFBWSxHQUFJLFlBQVk7QUFDaEMsTUFBSWIsT0FBSjtBQUVBLFNBQU8sU0FBU2EsWUFBVCxDQUFzQkMsY0FBdEIsRUFBc0M7QUFDM0MsUUFBTUMsV0FBVyxHQUFHeEIsRUFBRSxDQUFDQyxJQUFILENBQVEseUNBQVIsQ0FBcEI7QUFDQSxRQUFNd0IsUUFBUSxHQUFHekIsRUFBRSxDQUFDQyxJQUFILENBQVEsc0NBQVIsQ0FBakI7O0FBQ0EsU0FBSyxJQUFJbUIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsSUFBSSxDQUFyQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUMzQixVQUFNckIsR0FBRyxHQUFHMEIsUUFBUSxDQUFDdEIsY0FBVCxNQUEyQmlCLENBQTNCLENBQVo7QUFDQSxVQUFNTSxNQUFNLEdBQUdGLFdBQVcsQ0FBQ3JCLGNBQVosTUFBOEJpQixDQUE5QixDQUFmO0FBQ0FyQixNQUFBQSxHQUFHLENBQUM0QixDQUFKLEdBQVFELE1BQU0sQ0FBQ0MsQ0FBZjtBQUNBNUIsTUFBQUEsR0FBRyxDQUFDYSxDQUFKLEdBQVFjLE1BQU0sQ0FBQ3ZCLGNBQVAsQ0FBc0IsR0FBdEIsRUFBMkJTLENBQW5DO0FBQ0FiLE1BQUFBLEdBQUcsQ0FBQzZCLEtBQUosR0FBWTdCLEdBQUcsQ0FBQ2EsQ0FBaEI7QUFDRDs7QUFFRCxRQUFJSCxPQUFPLEtBQUtvQixTQUFoQixFQUEyQjtBQUN6QixVQUFNQyxPQUFPLEdBQUdOLFdBQVcsQ0FBQ3JCLGNBQVosQ0FBMkIsR0FBM0IsQ0FBaEI7QUFDQU0sTUFBQUEsT0FBTyxHQUFHc0IsSUFBSSxDQUFDQyxHQUFMLENBQVNGLE9BQU8sQ0FBQzNCLGNBQVIsQ0FBdUIsR0FBdkIsRUFBNEJTLENBQTVCLEdBQWdDa0IsT0FBTyxDQUFDM0IsY0FBUixDQUF1QixHQUF2QixFQUE0QlMsQ0FBckUsQ0FBVjtBQUNEOztBQUVELFNBQUssSUFBSVEsRUFBQyxHQUFHLENBQWIsRUFBZ0JBLEVBQUMsR0FBR0csY0FBYyxDQUFDRixNQUFuQyxFQUEyQ0QsRUFBQyxFQUE1QyxFQUFnRDtBQUM5Q0YsTUFBQUEsY0FBYyxDQUFDSyxjQUFjLENBQUNILEVBQUQsQ0FBZixFQUFvQkEsRUFBcEIsRUFBdUJYLE9BQXZCLENBQWQ7QUFDRDtBQUNGLEdBbkJEO0FBb0JELENBdkJvQixFQUFyQjs7ZUF5QmVhIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0U3ltYm9sQW5jaG9yIGZyb20gJy4vZ2V0U3ltYm9sQW5jaG9yJztcclxuaW1wb3J0IGdldFN5bWJvbFNwcml0ZSBmcm9tICcuL2dldFN5bWJvbFNwcml0ZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0U3ltYm9sKGNvbEluZGV4LCBjaGlsZEluZGV4LCBzeW1ib2xJbmRleCkge1xyXG4gIGNvbnN0IGNvbCA9IGNjLmZpbmQoYENhbnZhcy9HYW1lL01hY2hpbmUvUGVyZm9ybWFuY2UvQ29scy8ke2NvbEluZGV4ICsgMX1gKTtcclxuICBjb25zdCBjaGlsZCA9IGNvbC5nZXRDaGlsZEJ5TmFtZShgJHtjaGlsZEluZGV4ICsgMX1gKTtcclxuICBjb25zdCBzcHJpdGUgPSBjaGlsZC5nZXRDb21wb25lbnQoY2MuU3ByaXRlKTtcclxuICBzcHJpdGUuc3ByaXRlRnJhbWUgPSBnZXRTeW1ib2xTcHJpdGUoc3ltYm9sSW5kZXgpLnNwcml0ZUZyYW1lO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTeW1ib2woY29sLCBjaGlsZEluZGV4LCBzeW1ib2xJbmRleCwgc3BhY2luZykge1xyXG4gIGNvbnN0IGNoaWxkTmFtZSA9IGNoaWxkSW5kZXggPCAwID8gYCR7Y2hpbGRJbmRleH1gIDogYCR7Y2hpbGRJbmRleCArIDF9YDtcclxuICBsZXQgY2hpbGQgPSBjb2wuZ2V0Q2hpbGRCeU5hbWUoY2hpbGROYW1lKTtcclxuICBpZiAoY2hpbGQgPT09IG51bGwpIHtcclxuICAgIGNoaWxkID0gbmV3IGNjLk5vZGUoY2hpbGROYW1lKTtcclxuICAgIGNoaWxkLnkgPSBjaGlsZEluZGV4ICogc3BhY2luZztcclxuICAgIGNvbC5hZGRDaGlsZChjaGlsZCk7XHJcbiAgfVxyXG5cclxuICBsZXQgc3ByaXRlID0gY2hpbGQuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XHJcbiAgaWYgKHNwcml0ZSA9PT0gbnVsbCkge1xyXG4gICAgc3ByaXRlID0gY2hpbGQuYWRkQ29tcG9uZW50KGNjLlNwcml0ZSk7XHJcbiAgICBzcHJpdGUuc2l6ZU1vZGUgPSBjYy5TcHJpdGUuU2l6ZU1vZGUuUkFXO1xyXG4gIH1cclxuICBzcHJpdGUuc3ByaXRlRnJhbWUgPSBnZXRTeW1ib2xTcHJpdGUoc3ltYm9sSW5kZXgpLnNwcml0ZUZyYW1lO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZFN5bWJvbENvbChjb2xUYWJsZSwgY29sSW5kZXgsIHNwYWNpbmcpIHtcclxuICBjb25zdCBjb2wgPSBjYy5maW5kKGBDYW52YXMvR2FtZS9NYWNoaW5lL1BlcmZvcm1hbmNlL0NvbHMvJHtjb2xJbmRleCArIDF9YCk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xUYWJsZS5sZW5ndGg7IGkrKykge1xyXG4gICAgY3JlYXRlU3ltYm9sKGNvbCwgaSwgY29sVGFibGVbaV0sIHNwYWNpbmcpO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgYnVpbGRTeW1ib2xzID0gKGZ1bmN0aW9uICgpIHtcclxuICBsZXQgc3BhY2luZztcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGJ1aWxkU3ltYm9scyhzeW1ib2xDb2xUYWJsZSkge1xyXG4gICAgY29uc3QgYW5jaG9yc05vZGUgPSBjYy5maW5kKCdDYW52YXMvR2FtZS9NYWNoaW5lL1BlcmZvcm1hbmNlL0FuY2hvcnMnKTtcclxuICAgIGNvbnN0IGNvbHNOb2RlID0gY2MuZmluZCgnQ2FudmFzL0dhbWUvTWFjaGluZS9QZXJmb3JtYW5jZS9Db2xzJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA1OyBpKyspIHtcclxuICAgICAgY29uc3QgY29sID0gY29sc05vZGUuZ2V0Q2hpbGRCeU5hbWUoYCR7aX1gKTtcclxuICAgICAgY29uc3QgYW5jaG9yID0gYW5jaG9yc05vZGUuZ2V0Q2hpbGRCeU5hbWUoYCR7aX1gKTtcclxuICAgICAgY29sLnggPSBhbmNob3IueDtcclxuICAgICAgY29sLnkgPSBhbmNob3IuZ2V0Q2hpbGRCeU5hbWUoJzMnKS55O1xyXG4gICAgICBjb2wuYmFzZVkgPSBjb2wueTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3BhY2luZyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnN0IGFuY2hvcjEgPSBhbmNob3JzTm9kZS5nZXRDaGlsZEJ5TmFtZSgnMScpO1xyXG4gICAgICBzcGFjaW5nID0gTWF0aC5hYnMoYW5jaG9yMS5nZXRDaGlsZEJ5TmFtZSgnMScpLnkgLSBhbmNob3IxLmdldENoaWxkQnlOYW1lKCcyJykueSk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzeW1ib2xDb2xUYWJsZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBidWlsZFN5bWJvbENvbChzeW1ib2xDb2xUYWJsZVtpXSwgaSwgc3BhY2luZyk7XHJcbiAgICB9XHJcbiAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJ1aWxkU3ltYm9scztcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/autoPlayButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e82e68PrlpDUKUade1bQ3Zp', 'autoPlayButton');
// scripts/autoPlayButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      if (cc.store.canPlay() === true && cc.store.playing === false) {
        cc.store.playing = true;
      }
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcYXV0b1BsYXlCdXR0b24uanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsIm9uTG9hZCIsImJ1dHRvbiIsIm5vZGUiLCJnZXRDb21wb25lbnQiLCJCdXR0b24iLCJvbiIsInN0b3JlIiwiY2FuUGxheSIsInBsYXlpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLE1BSE8sb0JBR0U7QUFDUCxRQUFNQyxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCTixFQUFFLENBQUNPLE1BQTFCLENBQWY7QUFDQUgsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLFlBQU07QUFDNUIsVUFBSVIsRUFBRSxDQUFDUyxLQUFILENBQVNDLE9BQVQsT0FBdUIsSUFBdkIsSUFBK0JWLEVBQUUsQ0FBQ1MsS0FBSCxDQUFTRSxPQUFULEtBQXFCLEtBQXhELEVBQStEO0FBQzdEWCxRQUFBQSxFQUFFLENBQUNTLEtBQUgsQ0FBU0UsT0FBVCxHQUFtQixJQUFuQjtBQUNEO0FBQ0YsS0FKRDtBQUtEO0FBVk0sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xyXG4gICAgYnV0dG9uLm5vZGUub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAoY2Muc3RvcmUuY2FuUGxheSgpID09PSB0cnVlICYmIGNjLnN0b3JlLnBsYXlpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgY2Muc3RvcmUucGxheWluZyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/connectToServer.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ad6388hSVFLlJETm5TwUemS', 'connectToServer');
// scripts/connectToServer.js

"use strict";

exports.__esModule = true;
exports["default"] = connectToServer;

var _BaseCmdLogic = require("./BaseCmdLogic");

var _handleGameCommand = _interopRequireDefault(require("./handleGameCommand"));

var _Photon_Interface = _interopRequireDefault(require("./Photon_Interface"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function connectToServer(serverHost, serverPort, account, password, type) {
  var mainServer = new _BaseCmdLogic.MainSrvCmdLogic(new _Photon_Interface["default"].PhotonIf('Ws', serverHost + ":" + serverPort));
  var lobbyServer = new _BaseCmdLogic.LobbySrvCmdLogic(101, 1);
  var gameServer = new _BaseCmdLogic.GameSrvBaseCmdLogic({});
  mainServer.SetLbSrvCmdLogicObj(lobbyServer);
  lobbyServer.SetGameSrvCmdLogicObj(gameServer);
  gameServer.SetGameCmdFunc(_handleGameCommand["default"]);
  cc.store.mainServer = mainServer;
  cc.store.lobbyServer = lobbyServer;
  cc.store.gameServer = gameServer;
  mainServer.RunLogin(account, password, type);
}

module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcY29ubmVjdFRvU2VydmVyLmpzIl0sIm5hbWVzIjpbImNvbm5lY3RUb1NlcnZlciIsInNlcnZlckhvc3QiLCJzZXJ2ZXJQb3J0IiwiYWNjb3VudCIsInBhc3N3b3JkIiwidHlwZSIsIm1haW5TZXJ2ZXIiLCJNYWluU3J2Q21kTG9naWMiLCJQaG90b25Db250cm9sbGVyIiwiUGhvdG9uSWYiLCJsb2JieVNlcnZlciIsIkxvYmJ5U3J2Q21kTG9naWMiLCJnYW1lU2VydmVyIiwiR2FtZVNydkJhc2VDbWRMb2dpYyIsIlNldExiU3J2Q21kTG9naWNPYmoiLCJTZXRHYW1lU3J2Q21kTG9naWNPYmoiLCJTZXRHYW1lQ21kRnVuYyIsImhhbmRsZUdhbWVDb21tYW5kIiwiY2MiLCJzdG9yZSIsIlJ1bkxvZ2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRWUsU0FBU0EsZUFBVCxDQUF5QkMsVUFBekIsRUFBcUNDLFVBQXJDLEVBQWlEQyxPQUFqRCxFQUEwREMsUUFBMUQsRUFBbUVDLElBQW5FLEVBQXlFO0FBQ3RGLE1BQU1DLFVBQVUsR0FBRyxJQUFJQyw2QkFBSixDQUFvQixJQUFJQyw2QkFBaUJDLFFBQXJCLENBQThCLElBQTlCLEVBQXVDUixVQUF2QyxTQUFxREMsVUFBckQsQ0FBcEIsQ0FBbkI7QUFDQSxNQUFNUSxXQUFXLEdBQUcsSUFBSUMsOEJBQUosQ0FBcUIsR0FBckIsRUFBMEIsQ0FBMUIsQ0FBcEI7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSUMsaUNBQUosQ0FBd0IsRUFBeEIsQ0FBbkI7QUFFQVAsRUFBQUEsVUFBVSxDQUFDUSxtQkFBWCxDQUErQkosV0FBL0I7QUFDQUEsRUFBQUEsV0FBVyxDQUFDSyxxQkFBWixDQUFrQ0gsVUFBbEM7QUFDQUEsRUFBQUEsVUFBVSxDQUFDSSxjQUFYLENBQTBCQyw2QkFBMUI7QUFFQUMsRUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVNiLFVBQVQsR0FBc0JBLFVBQXRCO0FBQ0FZLEVBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTVCxXQUFULEdBQXVCQSxXQUF2QjtBQUNBUSxFQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBU1AsVUFBVCxHQUFzQkEsVUFBdEI7QUFFQU4sRUFBQUEsVUFBVSxDQUFDYyxRQUFYLENBQW9CakIsT0FBcEIsRUFBNkJDLFFBQTdCLEVBQXNDQyxJQUF0QztBQUNEIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYW1lU3J2QmFzZUNtZExvZ2ljLCBMb2JieVNydkNtZExvZ2ljLCBNYWluU3J2Q21kTG9naWMgfSBmcm9tICcuL0Jhc2VDbWRMb2dpYyc7XHJcbmltcG9ydCBoYW5kbGVHYW1lQ29tbWFuZCBmcm9tICcuL2hhbmRsZUdhbWVDb21tYW5kJztcclxuaW1wb3J0IFBob3RvbkNvbnRyb2xsZXIgZnJvbSAnLi9QaG90b25fSW50ZXJmYWNlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RUb1NlcnZlcihzZXJ2ZXJIb3N0LCBzZXJ2ZXJQb3J0LCBhY2NvdW50LCBwYXNzd29yZCx0eXBlKSB7XHJcbiAgY29uc3QgbWFpblNlcnZlciA9IG5ldyBNYWluU3J2Q21kTG9naWMobmV3IFBob3RvbkNvbnRyb2xsZXIuUGhvdG9uSWYoJ1dzJywgYCR7c2VydmVySG9zdH06JHtzZXJ2ZXJQb3J0fWApKTtcclxuICBjb25zdCBsb2JieVNlcnZlciA9IG5ldyBMb2JieVNydkNtZExvZ2ljKDEwMSwgMSk7XHJcbiAgY29uc3QgZ2FtZVNlcnZlciA9IG5ldyBHYW1lU3J2QmFzZUNtZExvZ2ljKHt9KTtcclxuXHJcbiAgbWFpblNlcnZlci5TZXRMYlNydkNtZExvZ2ljT2JqKGxvYmJ5U2VydmVyKTtcclxuICBsb2JieVNlcnZlci5TZXRHYW1lU3J2Q21kTG9naWNPYmooZ2FtZVNlcnZlcik7XHJcbiAgZ2FtZVNlcnZlci5TZXRHYW1lQ21kRnVuYyhoYW5kbGVHYW1lQ29tbWFuZCk7XHJcblxyXG4gIGNjLnN0b3JlLm1haW5TZXJ2ZXIgPSBtYWluU2VydmVyO1xyXG4gIGNjLnN0b3JlLmxvYmJ5U2VydmVyID0gbG9iYnlTZXJ2ZXI7XHJcbiAgY2Muc3RvcmUuZ2FtZVNlcnZlciA9IGdhbWVTZXJ2ZXI7XHJcblxyXG4gIG1haW5TZXJ2ZXIuUnVuTG9naW4oYWNjb3VudCwgcGFzc3dvcmQsdHlwZSk7XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/PublicSetUp.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bbe52wi27NIprLdPswHxN19', 'PublicSetUp');
// scripts/PublicSetUp.js

"use strict";

module.exports = {
  account: "",
  password: "",
  loginMessage: 0,
  audio1: null,
  MusicClip: null,
  loginType: 0
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcUHVibGljU2V0VXAuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFjY291bnQiLCJwYXNzd29yZCIsImxvZ2luTWVzc2FnZSIsImF1ZGlvMSIsIk11c2ljQ2xpcCIsImxvZ2luVHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWU7QUFDWEMsRUFBQUEsT0FBTyxFQUFDLEVBREc7QUFFWEMsRUFBQUEsUUFBUSxFQUFDLEVBRkU7QUFHWEMsRUFBQUEsWUFBWSxFQUFDLENBSEY7QUFJWEMsRUFBQUEsTUFBTSxFQUFFLElBSkc7QUFLWEMsRUFBQUEsU0FBUyxFQUFDLElBTEM7QUFNWEMsRUFBQUEsU0FBUyxFQUFDO0FBTkMsQ0FBZiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e1xyXG4gICAgYWNjb3VudDpcIlwiLFxyXG4gICAgcGFzc3dvcmQ6XCJcIixcclxuICAgIGxvZ2luTWVzc2FnZTowLFxyXG4gICAgYXVkaW8xOiBudWxsLFxyXG4gICAgTXVzaWNDbGlwOm51bGwsXHJcbiAgICBsb2dpblR5cGU6MCxcclxufSJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/freeSpinAnim.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b0b669BCXVCUpQgg5VRna7b', 'freeSpinAnim');
// scripts/freeSpinAnim.js

"use strict";

exports.__esModule = true;
exports["default"] = freeSpinAnim;

var _co = _interopRequireDefault(require("./co.cc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(freeSpinAnim);

function freeSpinAnim() {
  var type;
  return regeneratorRuntime.wrap(function freeSpinAnim$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          type = cc.store.gameResult.type;
          console.log(type);

          if (!(type == 2)) {
            _context.next = 7;
            break;
          }

          _context.next = 5;
          return _co["default"].waitForSeconds(5);

        case 5:
          _context.next = 9;
          break;

        case 7:
          _context.next = 9;
          return;

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcZnJlZVNwaW5BbmltLmpzIl0sIm5hbWVzIjpbImZyZWVTcGluQW5pbSIsInR5cGUiLCJjYyIsInN0b3JlIiwiZ2FtZVJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJjbyIsIndhaXRGb3JTZWNvbmRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O21EQUN5QkE7O0FBQVYsU0FBVUEsWUFBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDSkMsVUFBQUEsSUFESSxHQUNJQyxFQUFFLENBQUNDLEtBQUgsQ0FBU0MsVUFEYixDQUNKSCxJQURJO0FBRVhJLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxJQUFaOztBQUZXLGdCQUdSQSxJQUFJLElBQUUsQ0FIRTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUlQLGlCQUFNTSxlQUFHQyxjQUFILENBQWtCLENBQWxCLENBQU47O0FBSk87QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFNUDs7QUFOTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvIGZyb20gJy4vY28uY2MnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogZnJlZVNwaW5BbmltKCl7XHJcbiAgICBjb25zdCB7dHlwZX0gPSBjYy5zdG9yZS5nYW1lUmVzdWx0O1xyXG4gICAgY29uc29sZS5sb2codHlwZSk7XHJcbiAgICBpZih0eXBlPT0yKXtcclxuICAgICAgICB5aWVsZCBjby53YWl0Rm9yU2Vjb25kcyg1KTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIHlpZWxkXHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG59Il19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/co.cc.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '53fe6raOH5McIXi3lJzAGsq', 'co.cc');
// scripts/co.cc.js

// @ts-nocheck
'use strict';

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var valueTypes_cc = require('./value-types.cc');

var AsyncFunctionType = '[object AsyncFunction]';
var GeneratorFunctionType = '[object GeneratorFunction]';
var GeneratorType = '[object Generator]';
var PromiseType = '[object Promise]';
var objectToString = Object.prototype.toString;

function getType(value) {
  return objectToString.call(value);
}

function isSupportedAsync(value) {
  return isSupportedAsyncType(objectToString.call(value));
}

function isSupportedAsyncType(type) {
  switch (type) {
    case AsyncFunctionType:
    case GeneratorFunctionType:
    case GeneratorType:
    case PromiseType:
      return true;

    default:
      return false;
  }
}

function CoroutineStop() {}

var coroutines = new WeakSet();
var RUNNING = 0;
var SUSPENDED = 1;
var STOPPING = 2;
var DONE = 3;

function Coroutine(group, executor) {
  // const runtime = group.groupSet.runtime;
  var status = RUNNING;
  var stopped = false;
  var finalResult, finalException;
  var lastException, lastExceptionLog; // const lastYield = {};

  var executorStack = new Array(24); // prealloc...

  var currentExecutorStackIndex = -1;

  var pushExecutor = function pushExecutor(executor) {
    // executor.tick0 = runtime.currentTickCount;
    executorStack[++currentExecutorStackIndex] = executor;
    return executor;
  };

  var popExecutor = function popExecutor() {
    if (currentExecutorStackIndex >= 0) {
      --currentExecutorStackIndex;
      return getActiveExecutor();
    }
  };

  var getActiveExecutor = function getActiveExecutor() {
    if (currentExecutorStackIndex >= 0) {
      return executorStack[currentExecutorStackIndex];
    }
  }; // const setLastYield = ticks => {
  //   lastYield.ticks = ticks;
  // };


  var stop = function stop(eType) {
    if (eType === void 0) {
      eType = CoroutineStop;
    }

    resume();

    if (status === RUNNING) {
      status = STOPPING;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (currentCoroutine === coroutine) {
        throw _construct(eType, args);
      }

      lastException = _construct(eType, args);
    }
  };

  var isStopping = function isStopping() {
    return status === STOPPING;
  };

  var isStopped = function isStopped() {
    return stopped;
  };

  var suspend = function suspend() {
    if (status === RUNNING) {
      status = SUSPENDED;
      group.onSuspend(coroutine);
    }
  };

  var isSuspended = function isSuspended() {
    return status === SUSPENDED;
  };

  var resume = function resume() {
    if (status === SUSPENDED) {
      status = RUNNING;
      group.onResume(coroutine);
    }
  };

  var isDone = function isDone() {
    return status === DONE;
  };

  var execute = function execute() {
    if (status !== RUNNING && status !== STOPPING) {
      return;
    }

    currentCoroutine = coroutine;
    var lastResult;

    try {
      var currentExecutor = getActiveExecutor();

      while (true) {
        if (currentExecutor === undefined) {
          if (status === STOPPING) {
            stopped = true; // lastException = undefined;
          }

          status = DONE;
          break;
        }

        var execResult = currentExecutor.run(lastException, lastResult);
        lastException = execResult.exception;

        if (lastException !== lastExceptionLog) {
          lastExceptionLog = lastException;

          if (lastExceptionLog !== undefined && !(lastExceptionLog instanceof CoroutineStop)) {
            console.error("[co.Coroutine] runtime error: " + valueTypes_cc.errorToString(lastExceptionLog));
          }
        }

        if (execResult.nextTick === true) {
          // setLastYield(1);
          break;
        }

        lastResult = execResult.result;

        if (execResult.nextExecutor !== undefined) {
          currentExecutor = pushExecutor(execResult.nextExecutor); // setLastYield(0);

          continue;
        }

        if (execResult.directlyValue === true) {
          // setLastYield(0);
          continue;
        } // setLastYield(runtime.currentTickCount - currentExecutor.tick0);


        currentExecutor = popExecutor();
      }
    } catch (e) {
      console.error("[co.Coroutine] internal error: " + valueTypes_cc.errorToString(e));
    }

    if (status === DONE) {
      var _executor = getActiveExecutor();

      while (_executor !== undefined) {
        _executor.abort();

        _executor = popExecutor();
      } // executorStack.splice(0);


      finalException = lastException;
      finalResult = lastResult;
    }

    currentCoroutine = null;
  };

  var toPublic = function () {
    var publicCoroutine = {
      get group() {
        return group.toPublic();
      },

      get result() {
        return finalResult;
      },

      get exception() {
        return finalException;
      },

      // get lastYield() {
      //   return { ...lastYield };
      // },
      stop: stop,
      isStopping: isStopping,
      isStopped: isStopped,
      suspend: suspend,
      isSuspended: isSuspended,
      resume: resume,
      isDone: isDone
    };
    return function () {
      return publicCoroutine;
    };
  }(); // setLastYield(0);


  pushExecutor(executor);
  var coroutine = {
    // properties
    get group() {
      return group;
    },

    get result() {
      return finalResult;
    },

    get exception() {
      return finalException;
    },

    // methods
    stop: stop,
    isStopping: isStopping,
    isStopped: isStopped,
    suspend: suspend,
    isSuspended: isSuspended,
    resume: resume,
    isDone: isDone,
    execute: execute,
    toPublic: toPublic
  };
  return addCoroutine(coroutine);
}

function addCoroutine(coroutine) {
  coroutines.add(coroutine);
  coroutines.add(coroutine.toPublic());
  return coroutine;
}

function isCoroutine(obj) {
  return coroutines.has(obj);
}

var currentCoroutine = null;

function getCurrentCoroutine() {
  return currentCoroutine;
}

var normal = 0;
var belowNormal = normal - 10000000;
var lowest = belowNormal - 10000000;
var aboveNormal = normal + 10000000;
var highest = aboveNormal + 10000000;
var CoroutineGroupPriority = {
  get Lowest() {
    return lowest;
  },

  get BelowNormal() {
    return belowNormal;
  },

  get Normal() {
    return normal;
  },

  get AboveNormal() {
    return aboveNormal;
  },

  get Highest() {
    return highest;
  }

};
var PROMISE_PENDING = 0;
var PROMISE_FULFILLED = 1;
var PROMISE_REJECTED = 2;

function promiseToGenerator(promise) {
  var state = PROMISE_PENDING;
  var value;
  promise.then(function (val) {
    state = PROMISE_FULFILLED;
    value = val;
  }, function (err) {
    state = PROMISE_REJECTED;
    value = err;
  });
  return /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(state !== PROMISE_PENDING)) {
              _context2.next = 5;
              break;
            }

            if (!(state === PROMISE_REJECTED)) {
              _context2.next = 4;
              break;
            }

            throw value;

          case 4:
            return _context2.abrupt("return", value);

          case 5:
            _context2.next = 7;
            return;

          case 7:
            _context2.next = 0;
            break;

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })();
}

function asyncFnToGenerator(asyncFn) {
  // Async Function returns Promise
  return promiseToGenerator(asyncFn());
}

function coroutineToGenerator(coroutine) {
  return /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!coroutine.isDone()) {
              _context3.next = 5;
              break;
            }

            if (!(coroutine.exception !== undefined)) {
              _context3.next = 4;
              break;
            }

            throw coroutine.exception;

          case 4:
            return _context3.abrupt("return", coroutine.result);

          case 5:
            _context3.next = 7;
            return;

          case 7:
            _context3.next = 0;
            break;

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })();
}

var generatorExecutors = new WeakSet();

function GeneratorExecutor(gen) {
  var executor = {
    run: function run(exception, result) {
      var execResult = {};
      var state;

      try {
        state = exception !== undefined ? gen["throw"](exception) : gen.next(result);
      } catch (e) {
        execResult.exception = e;
        state = {
          done: true
        };
      }

      if (state.done) {
        execResult.result = state.value;
      } else {
        var value = state.value;

        if (value === undefined) {
          execResult.nextTick = true;
        } else if (generatorExecutors.has(value)) {
          execResult.nextExecutor = value;
        } else if (isCoroutine(value)) {
          execResult.nextExecutor = GeneratorExecutor(coroutineToGenerator(value));
        } else {
          switch (getType(value)) {
            case GeneratorFunctionType:
              execResult.nextExecutor = GeneratorExecutor(value());
              break;

            case GeneratorType:
              execResult.nextExecutor = GeneratorExecutor(value);
              break;

            case PromiseType:
              execResult.nextExecutor = GeneratorExecutor(promiseToGenerator(value));
              break;

            case AsyncFunctionType:
              execResult.nextExecutor = GeneratorExecutor(asyncFnToGenerator(value));
              break;

            default:
              // nextExecutor = GeneratorExecutor(anyToGenerator(value));
              execResult.result = value;
              execResult.directlyValue = true;
              break;
          }
        }
      }

      return execResult;
    },
    abort: function abort() {
      try {
        gen["return"]();
      } catch (_unused) {}
    }
  };
  generatorExecutors.add(executor);
  return executor;
}

var coroutineGroups = new WeakSet();

function CoroutineGroup(groupSet, name, options) {
  if (options === void 0) {
    options = {};
  }

  var _options$priority;

  if (groupSet.hasByName(name)) {
    throw new Error("coroutine group '" + name + "' exists");
  }

  (_options$priority = options.priority) != null ? _options$priority : options.priority = CoroutineGroupPriority.Normal;
  var runtime = groupSet.runtime;
  var currentPriority;
  var runningCoroutines = [];
  var coroutinesData = new Map();

  var _start = function start(genFn) {
    var coroutine = Coroutine(coroutineGroup, GeneratorExecutor(genFn()));
    coroutinesData.set(coroutine, {
      tickWhile: runtime.currentTickCount
    });
    runningCoroutines.push(coroutine);
    return coroutine;
  };

  var stopAll = function stopAll(eType) {
    if (eType === void 0) {
      eType = CoroutineStop;
    }

    var currentCoroutine = getCurrentCoroutine();

    if ((currentCoroutine == null ? void 0 : currentCoroutine.group.name) === name) {
      var error;
      runningCoroutines.forEach(function (coroutine) {
        if (currentCoroutine === coroutine) {
          try {
            coroutine.stop(eType);
          } catch (e) {
            if (!(e instanceof eType)) {
              throw e;
            }

            error = e;
          }
        } else {
          coroutine.stop(eType);
        }
      });

      if (error) {
        throw error;
      }
    } else {
      runningCoroutines.forEach(function (coroutine) {
        return void coroutine.stop(eType);
      });
    }
  };

  var update = function update() {
    if (runningCoroutines.length === 0) {
      return;
    }

    var currentTick = runtime.currentTickCount;

    try {
      var idel = -1;
      var idelc;
      var i = 0;
      var imax = runningCoroutines.length;

      while (i < imax) {
        var coroutine = runningCoroutines[i];

        if (coroutinesData.get(coroutine).tickWhile < currentTick) {
          coroutine.execute();
        }

        if (coroutine.isDone()) {
          coroutinesData["delete"](coroutine);

          if (idel > -1) {
            idelc++;
          } else {
            idel = i;
            idelc = 1;
          }
        } else {
          if (idel > -1) {
            runningCoroutines.splice(idel, idelc);
            imax -= idelc;
            i -= idelc;
            idel = -1;
          }
        }

        i++;
      }

      if (idel > -1) {
        runningCoroutines.splice(idel, idelc);
      }
    } catch (e) {
      console.error("[co.CoroutineGroup] internal error: " + valueTypes_cc.errorToString(e));
    }
  };

  var setPriority = function setPriority(priority) {
    if (currentPriority === undefined || currentPriority !== priority) {
      currentPriority = priority;
      groupSet.updatePriority(coroutineGroup, currentPriority);
    }
  };

  var onSuspend = function onSuspend(coroutine) {};

  var onResume = function onResume(coroutine) {
    coroutinesData.get(coroutine).tickWhile = runtime.currentTickCount;
  };

  var toPublic = function () {
    var publicCoroutineGroup = {
      get name() {
        return name;
      },

      get size() {
        return runningCoroutines.length;
      },

      get priority() {
        return currentPriority;
      },

      start: function start(genFn) {
        return _start(genFn).toPublic();
      },
      stopAll: stopAll
    };
    return function () {
      return publicCoroutineGroup;
    };
  }();

  var coroutineGroup = {
    // properties
    get name() {
      return name;
    },

    get groupSet() {
      return groupSet;
    },

    get size() {
      return runningCoroutines.length;
    },

    get priority() {
      return currentPriority;
    },

    // events
    onSuspend: onSuspend,
    onResume: onResume,
    // methods
    start: _start,
    stopAll: stopAll,
    update: update,
    toPublic: toPublic
  };
  setPriority(options.priority);
  return addCoroutineGroup(groupSet.add(coroutineGroup));
}

function addCoroutineGroup(coroutineGroup) {
  coroutineGroups.add(coroutineGroup);
  coroutineGroups.add(coroutineGroup.toPublic());
  return coroutineGroup;
}

function isCoroutineGroup(obj) {
  return coroutineGroups.has(obj);
}

function CoroutineGroupSet(runtime) {
  var groups = new Set();
  var nameToGroupMapping = new Map(); // let updatingGroups = false;

  var groupUpdateOrderList = [];
  var dirtyGroupUpdateOrder = 0;

  function add(group) {
    groups.add(group);
    groups.add(group.toPublic());
    nameToGroupMapping.set(group.name, group);
    dirtyGroupUpdateOrder |= 1 << 1;
    return group;
  }

  function has(group) {
    return groups.has(group);
  }

  function hasByName(groupName) {
    return nameToGroupMapping.has(groupName);
  }

  function getByName(groupName) {
    if (nameToGroupMapping.has(groupName)) {
      return nameToGroupMapping.get(groupName);
    }
  }

  function updatePriority(group, priority) {
    dirtyGroupUpdateOrder |= 1 << 0;
  }

  function sortUpdateOrder(flags) {
    if ((flags & 1 << 1) !== 0) {
      groupUpdateOrderList.splice(0, groupUpdateOrderList.length);
      nameToGroupMapping.forEach(function (group) {
        return void groupUpdateOrderList.push(group);
      });
    }

    groupUpdateOrderList.sort(function (a, b) {
      return b.priority - a.priority;
    });
  }

  function update() {
    if (dirtyGroupUpdateOrder !== 0) {
      var flags = dirtyGroupUpdateOrder;
      dirtyGroupUpdateOrder = 0;
      sortUpdateOrder(flags);
    } // updatingGroups = true;
    // try {


    groupUpdateOrderList.forEach(function (group) {
      return void group.update();
    }); // } finally {
    //   updatingGroups = false;
    // }
  }

  return {
    get runtime() {
      return runtime;
    },

    add: add,
    has: has,
    hasByName: hasByName,
    getByName: getByName,
    updatePriority: updatePriority,
    update: update
  };
}

function Runtime(tickRate) {
  if (tickRate === void 0) {
    tickRate = 0;
  }

  var autoTickEnabled = false;
  var tickCount = 0;
  var tickTime = 0;

  function enableAutoTick(tickRate) {
    if (tickRate <= 0) {
      throw new Error("'tickRate' must be greater than 0");
    }

    if (autoTickEnabled === true) {
      throw new Error('auto-tick has already enabled');
    }

    autoTickEnabled = true;
    startTick(tickRate);
  }

  function startTick(tickRate) {
    var interval = Math.floor(1000 / tickRate);
    var schedule;

    try {
      if (window && 'requestAnimationFrame' in window) {
        var tickIfNecessary = function tickIfNecessary(t1) {
          if (t1 - t0 >= interval) {
            tick(t1);
            t0 = t1;
          }

          schedule();
        };

        var t0 = 0;

        schedule = function schedule() {
          return void requestAnimationFrame(tickIfNecessary);
        };

        schedule();
      }
    } catch (_unused2) {}

    if (schedule === undefined) {
      var _tickIfNecessary = function _tickIfNecessary() {
        var t0 = Date.now();

        if (t0 >= nextTime) {
          tick(t0);
          var t1 = Date.now();

          if (t1 - t0 < interval) {
            nextTime = t0 + interval;
            schedule(Math.floor((nextTime - t1) * 0.85));
          } else {
            nextTime = t1;
            schedule(0);
          }
        } else {
          schedule(0);
        }
      };

      var nextTime = 0;

      schedule = function schedule(t) {
        return void setTimeout(_tickIfNecessary, t);
      };

      schedule(0);
    }
  }

  function tick(currentTime) {
    ++tickCount;
    tickTime = currentTime;
    currentRuntime = runtime;
    groupSet.update();
    currentRuntime = null;
  }

  function manualTick(currentTime) {
    if (autoTickEnabled === true) {
      throw new Error('running in auto-tick mode');
    }

    ++tickCount;
    tickTime = currentTime;
    var oldRuntime = currentRuntime;
    currentRuntime = runtime;
    groupSet.update();
    currentRuntime = oldRuntime;
  }

  var toPublic = function () {
    var publicRuntime = {
      get mainGroup() {
        return mainGroup.toPublic();
      },

      get currentTickCount() {
        return tickCount;
      },

      get lastTickTime() {
        return tickTime;
      },

      enableAutoTick: enableAutoTick,
      performTick: manualTick
    };
    return function () {
      return publicRuntime;
    };
  }();

  var groupSet = CoroutineGroupSet({
    get currentTickCount() {
      return tickCount;
    },

    get lastTickTime() {
      return tickTime;
    }

  });
  var mainGroup = CoroutineGroup(groupSet, 'main', {
    priority: CoroutineGroupPriority.Normal
  });
  var runtime = {
    get groupSet() {
      return groupSet;
    },

    get mainGroup() {
      return mainGroup;
    },

    get currentTickCount() {
      return tickCount;
    },

    get lastTickTime() {
      return tickTime;
    },

    toPublic: toPublic
  };

  if (tickRate > 0) {
    enableAutoTick(tickRate);
  }

  return runtime;
}

var currentRuntime = null;

function getCurrentRuntime() {
  return currentRuntime;
}

function asAsync(fn) {
  return /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var self, cb, done, exception, result, i, value;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            self = this;
            done = false;
            args = args.slice(0); // for (let i = 0; i < args.length; i++) {

            i = args.length - 1;
            value = args[i];

            if (typeof value === 'function') {
              cb = value;

              args[i] = function () {
                try {
                  var execResult = cb.apply(null, arguments);

                  if (valueTypes_cc.isObject(execResult)) {
                    exception = execResult.exception;
                    result = execResult.result;
                  } else {
                    result = execResult;
                  }
                } catch (e) {
                  exception = e;
                }

                done = true;
              }; // break;

            } // }


            if (!cb) {
              _context.next = 17;
              break;
            }

            fn.apply(self, args);

          case 8:
            if (done) {
              _context.next = 13;
              break;
            }

            _context.next = 11;
            return;

          case 11:
            _context.next = 8;
            break;

          case 13:
            if (!exception) {
              _context.next = 15;
              break;
            }

            throw exception;

          case 15:
            _context.next = 18;
            break;

          case 17:
            result = fn.apply(self, args);

          case 18:
            return _context.abrupt("return", result);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  });
}

function startStopwatch() {
  var runtime = getCurrentRuntime();

  if (!runtime) {
    throw new Error("'startStopwatch' must be run in coroutine");
  }

  var time0, tick0;
  var stopwatch = {
    get elapsedSeconds() {
      return (runtime.lastTickTime - time0) / 1000;
    },

    get elapsedMilliseconds() {
      return runtime.lastTickTime - time0;
    },

    get elapsedTicks() {
      return runtime.currentTickCount - tick0;
    },

    restart: function restart() {
      time0 = runtime.lastTickTime;
      tick0 = runtime.currentTickCount;
    }
  };
  stopwatch.restart();
  return stopwatch;
}

function start(group, genFn) {
  return isCoroutine(genFn) ? genFn : group.start(genFn);
}

function stopAll(coroutines) {
  if (coroutines.size > 0) {
    coroutines.forEach(function (coroutine) {
      return void coroutine.stop();
    }); // coroutines.clear();
  }
} // startAll(a, b, c, d);
// startAll([a, b, c, d]);
// startAll({ 0: a, 1: b, 2: c, 3: d });


function startAll(caller, genFns) {
  var _getCurrentCoroutine;

  var currentGroup = (_getCurrentCoroutine = getCurrentCoroutine()) == null ? void 0 : _getCurrentCoroutine.group;

  if (!currentGroup) {
    throw new Error("'" + caller + "' must be run in coroutine");
  } // if (arguments.length > 1) {
  //   genFns = Array.prototype.slice.call(arguments);
  // }


  var coroutines = new Map();

  if (valueTypes_cc.isArray(genFns)) {
    genFns.forEach(function (genFn, genFnIndex) {
      return void coroutines.set(genFnIndex, start(currentGroup, genFn));
    });
  } else if (valueTypes_cc.isObject(genFns)) {
    Object.keys(genFns).forEach(function (genFnName) {
      return void coroutines.set(genFnName, start(currentGroup, genFns[genFnName]));
    });
  }

  coroutines.stopAll = function () {
    return void stopAll(coroutines);
  };

  return coroutines;
}

var _marked$7 = /*#__PURE__*/regeneratorRuntime.mark(waitForAll);

function waitForAll(genFns) {
  var result, coroutines;
  return regeneratorRuntime.wrap(function waitForAll$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          result = {};
          coroutines = startAll('waitForAll', genFns);

          if (!(coroutines.size > 0)) {
            _context.next = 18;
            break;
          }

          _context.prev = 3;

        case 4:
          coroutines.forEach(function (coroutine, name) {
            if (coroutine.isDone()) {
              result[name] = {
                exception: coroutine.exception,
                result: coroutine.result
              };
              coroutines["delete"](name);
            }
          });

          if (!(coroutines.size === 0)) {
            _context.next = 8;
            break;
          }

          return _context.abrupt("break", 12);

        case 8:
          _context.next = 10;
          return;

        case 10:
          _context.next = 4;
          break;

        case 12:
          _context.next = 18;
          break;

        case 14:
          _context.prev = 14;
          _context.t0 = _context["catch"](3);
          coroutines.stopAll();
          throw _context.t0;

        case 18:
          return _context.abrupt("return", result);

        case 19:
        case "end":
          return _context.stop();
      }
    }
  }, _marked$7, null, [[3, 14]]);
}

var _marked$6 = /*#__PURE__*/regeneratorRuntime.mark(waitForAny);

function waitForAny(genFns) {
  var result, coroutines, any;
  return regeneratorRuntime.wrap(function waitForAny$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          result = {};
          coroutines = startAll('waitForAny', genFns);

          if (!(coroutines.size > 0)) {
            _context.next = 20;
            break;
          }

          _context.prev = 3;

        case 4:
          any = false;
          coroutines.forEach(function (coroutine, name) {
            if (coroutine.isDone()) {
              result[name] = {
                exception: coroutine.exception,
                result: coroutine.result
              };
              coroutines["delete"](name);
              any = true;
            }
          });

          if (!any) {
            _context.next = 10;
            break;
          }

          coroutines.stopAll();
          return _context.abrupt("break", 14);

        case 10:
          _context.next = 12;
          return;

        case 12:
          _context.next = 4;
          break;

        case 14:
          _context.next = 20;
          break;

        case 16:
          _context.prev = 16;
          _context.t0 = _context["catch"](3);
          coroutines.stopAll();
          throw _context.t0;

        case 20:
          return _context.abrupt("return", result);

        case 21:
        case "end":
          return _context.stop();
      }
    }
  }, _marked$6, null, [[3, 16]]);
}

var _marked$5 = /*#__PURE__*/regeneratorRuntime.mark(waitForTime);

function waitForTime(runtime, time) {
  var time0, elapsedTime;
  return regeneratorRuntime.wrap(function waitForTime$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(time > 0)) {
            _context.next = 10;
            break;
          }

          time0 = runtime.lastTickTime;

        case 2:
          elapsedTime = runtime.lastTickTime - time0;

          if (!(elapsedTime >= time)) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("break", 10);

        case 6:
          _context.next = 8;
          return;

        case 8:
          _context.next = 2;
          break;

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _marked$5);
}

var _marked$4 = /*#__PURE__*/regeneratorRuntime.mark(waitForMilliseconds);

function waitForMilliseconds(milliseconds) {
  var runtime;
  return regeneratorRuntime.wrap(function waitForMilliseconds$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          runtime = getCurrentRuntime();

          if (runtime) {
            _context.next = 3;
            break;
          }

          throw new Error("'waitForMilliseconds' must be run in coroutine");

        case 3:
          _context.next = 5;
          return waitForTime(runtime, Math.max(milliseconds, 0));

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _marked$4);
}

var _marked$3 = /*#__PURE__*/regeneratorRuntime.mark(waitForSeconds);

function waitForSeconds(seconds) {
  var runtime;
  return regeneratorRuntime.wrap(function waitForSeconds$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          runtime = getCurrentRuntime();

          if (runtime) {
            _context.next = 3;
            break;
          }

          throw new Error("'waitForSeconds' must be run in coroutine");

        case 3:
          _context.next = 5;
          return waitForTime(runtime, Math.max(seconds * 1000, 0));

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _marked$3);
}

var _marked$2 = /*#__PURE__*/regeneratorRuntime.mark(waitForTicks);

function waitForTicks(ticks) {
  var maxTicks, tickCnt;
  return regeneratorRuntime.wrap(function waitForTicks$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          maxTicks = Math.max(ticks, 0);

          if (!(maxTicks > 0)) {
            _context.next = 10;
            break;
          }

          tickCnt = 0;

        case 3:
          if (!(++tickCnt > maxTicks)) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("break", 10);

        case 6:
          _context.next = 8;
          return;

        case 8:
          _context.next = 3;
          break;

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _marked$2);
}

var _marked$1 = /*#__PURE__*/regeneratorRuntime.mark(waitUntil); // action: wait until action returns true


function waitUntil(action) {
  return regeneratorRuntime.wrap(function waitUntil$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(action() !== true)) {
            _context.next = 5;
            break;
          }

          _context.next = 3;
          return;

        case 3:
          _context.next = 0;
          break;

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _marked$1);
}

var _marked = /*#__PURE__*/regeneratorRuntime.mark(waitWhile); // action: wait until action returns false


function waitWhile(action) {
  return regeneratorRuntime.wrap(function waitWhile$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(action() === true)) {
            _context.next = 5;
            break;
          }

          _context.next = 3;
          return;

        case 3:
          _context.next = 0;
          break;

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

var utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  asAsync: asAsync,
  startStopwatch: startStopwatch,
  waitForAll: waitForAll,
  waitForAny: waitForAny,
  waitForMilliseconds: waitForMilliseconds,
  waitForSeconds: waitForSeconds,
  waitForTicks: waitForTicks,
  waitUntil: waitUntil,
  waitWhile: waitWhile
});

function isGenerator(value) {
  return getType(value) === GeneratorType;
}

function isGeneratorFunction(value) {
  return getType(value) === GeneratorFunctionType;
}

function isAsyncFunction(value) {
  return getType(value) === AsyncFunctionType;
}

function isPromise(value) {
  return getType(value) === PromiseType;
}

function exportRuntime(runtime) {
  var groupSet = runtime.groupSet;
  var mainGroup = runtime.mainGroup;

  function startCoroutine(genFn) {
    return mainGroup.start(genFn).toPublic();
  }

  function addProperty(obj, name, getter) {
    Object.defineProperty(obj, name, {
      enumerable: true,
      configurable: true,
      get: getter
    });
  }

  var publicRuntime = runtime.toPublic();
  addProperty(publicRuntime, 'current', function () {
    var _getCurrentCoroutine2;

    return (_getCurrentCoroutine2 = getCurrentCoroutine()) == null ? void 0 : _getCurrentCoroutine2.toPublic();
  });
  addProperty(publicRuntime, 'currentRuntime', function () {
    var _getCurrentRuntime;

    return (_getCurrentRuntime = getCurrentRuntime()) == null ? void 0 : _getCurrentRuntime.toPublic();
  });
  addProperty(publicRuntime, 'CoroutineStop', function () {
    return CoroutineStop;
  });
  publicRuntime.start = startCoroutine;
  publicRuntime.isCoroutine = isCoroutine;
  publicRuntime.isCoroutineGroup = isCoroutineGroup;
  publicRuntime.isGenerator = isGenerator;
  publicRuntime.isGeneratorFunction = isGeneratorFunction;
  publicRuntime.isAsyncFunction = isAsyncFunction;
  publicRuntime.isPromise = isPromise; // isGenerator/isGeneratorFunction/isAsyncFunction/isPromise
  // yield + [Generator/GeneratorFunction/AsyncFunction/Promise]

  publicRuntime.isSupportedAsync = isSupportedAsync;
  publicRuntime.promiseToGenerator = promiseToGenerator;

  publicRuntime.Runtime = function (tickRate) {
    return exportRuntime(Runtime(tickRate));
  };

  publicRuntime.CoroutineGroup = function (name, options) {
    return CoroutineGroup(groupSet, name, options).toPublic();
  };

  publicRuntime.CoroutineGroup.getGroupByName = function (name) {
    var _groupSet$getByName;

    return (_groupSet$getByName = groupSet.getByName(name)) == null ? void 0 : _groupSet$getByName.toPublic();
  };

  publicRuntime.CoroutineGroup.hasGroup = groupSet.has;
  publicRuntime.CoroutineGroup.hasGroupByName = groupSet.hasByName;
  Reflect.ownKeys(CoroutineGroupPriority).forEach(function (priorityName) {
    return void addProperty(publicRuntime.CoroutineGroup, priorityName + "Priority", function () {
      return CoroutineGroupPriority[priorityName];
    });
  });
  Reflect.ownKeys(utils).forEach(function (fnName) {
    return void (publicRuntime[fnName] = utils[fnName]);
  });
  return publicRuntime;
}

var index = exportRuntime(Runtime());
module.exports = index;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/decBetButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '71bd3ud10FANbZ3VcXhLvvA', 'decBetButton');
// scripts/decBetButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      var currentBetValue = cc.find('Canvas/Game/Machine/UI/BetPanel/Value').getComponent(cc.Label);
      var currentBet = parseFloat(currentBetValue.string);

      if (currentBet > cc.store.minBet && currentBet <= cc.store.maxBet) {
        if (currentBet <= 1) {
          currentBetValue.string = cc.store.currentBet = parseFloat((currentBet - 0.1).toPrecision(12));
        } else if (currentBet <= 10) {
          currentBetValue.string = cc.store.currentBet = currentBet - 1;
        } else {
          currentBetValue.string = cc.store.currentBet = currentBet - 10;
        }
      }
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcZGVjQmV0QnV0dG9uLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJvbkxvYWQiLCJidXR0b24iLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiQnV0dG9uIiwib24iLCJjdXJyZW50QmV0VmFsdWUiLCJmaW5kIiwiTGFiZWwiLCJjdXJyZW50QmV0IiwicGFyc2VGbG9hdCIsInN0cmluZyIsInN0b3JlIiwibWluQmV0IiwibWF4QmV0IiwidG9QcmVjaXNpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLE1BSE8sb0JBR0U7QUFDUCxRQUFNQyxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCTixFQUFFLENBQUNPLE1BQTFCLENBQWY7QUFDQUgsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLFlBQU07QUFDNUIsVUFBTUMsZUFBZSxHQUFHVCxFQUFFLENBQUNVLElBQUgsQ0FBUSx1Q0FBUixFQUFpREosWUFBakQsQ0FBOEROLEVBQUUsQ0FBQ1csS0FBakUsQ0FBeEI7QUFDQSxVQUFNQyxVQUFVLEdBQUdDLFVBQVUsQ0FBQ0osZUFBZSxDQUFDSyxNQUFqQixDQUE3Qjs7QUFDQSxVQUFJRixVQUFVLEdBQUdaLEVBQUUsQ0FBQ2UsS0FBSCxDQUFTQyxNQUF0QixJQUFnQ0osVUFBVSxJQUFJWixFQUFFLENBQUNlLEtBQUgsQ0FBU0UsTUFBM0QsRUFBbUU7QUFDakUsWUFBR0wsVUFBVSxJQUFFLENBQWYsRUFBaUI7QUFDZkgsVUFBQUEsZUFBZSxDQUFDSyxNQUFoQixHQUF5QmQsRUFBRSxDQUFDZSxLQUFILENBQVNILFVBQVQsR0FBc0JDLFVBQVUsQ0FBQyxDQUFDRCxVQUFVLEdBQUcsR0FBZCxFQUFtQk0sV0FBbkIsQ0FBK0IsRUFBL0IsQ0FBRCxDQUF6RDtBQUNELFNBRkQsTUFFTSxJQUFHTixVQUFVLElBQUUsRUFBZixFQUFrQjtBQUN0QkgsVUFBQUEsZUFBZSxDQUFDSyxNQUFoQixHQUF5QmQsRUFBRSxDQUFDZSxLQUFILENBQVNILFVBQVQsR0FBc0JBLFVBQVUsR0FBRyxDQUE1RDtBQUNELFNBRkssTUFFRDtBQUNISCxVQUFBQSxlQUFlLENBQUNLLE1BQWhCLEdBQXlCZCxFQUFFLENBQUNlLEtBQUgsQ0FBU0gsVUFBVCxHQUFzQkEsVUFBVSxHQUFHLEVBQTVEO0FBQ0Q7QUFDRjtBQUNGLEtBWkQ7QUFhRDtBQWxCTSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICBvbkxvYWQoKSB7XHJcbiAgICBjb25zdCBidXR0b24gPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbik7XHJcbiAgICBidXR0b24ubm9kZS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRCZXRWYWx1ZSA9IGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvVUkvQmV0UGFuZWwvVmFsdWUnKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpO1xyXG4gICAgICBjb25zdCBjdXJyZW50QmV0ID0gcGFyc2VGbG9hdChjdXJyZW50QmV0VmFsdWUuc3RyaW5nKTtcclxuICAgICAgaWYgKGN1cnJlbnRCZXQgPiBjYy5zdG9yZS5taW5CZXQgJiYgY3VycmVudEJldCA8PSBjYy5zdG9yZS5tYXhCZXQpIHtcclxuICAgICAgICBpZihjdXJyZW50QmV0PD0xKXtcclxuICAgICAgICAgIGN1cnJlbnRCZXRWYWx1ZS5zdHJpbmcgPSBjYy5zdG9yZS5jdXJyZW50QmV0ID0gcGFyc2VGbG9hdCgoY3VycmVudEJldCAtIDAuMSkudG9QcmVjaXNpb24oMTIpKSA7XHJcbiAgICAgICAgfWVsc2UgaWYoY3VycmVudEJldDw9MTApe1xyXG4gICAgICAgICAgY3VycmVudEJldFZhbHVlLnN0cmluZyA9IGNjLnN0b3JlLmN1cnJlbnRCZXQgPSBjdXJyZW50QmV0IC0gMTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIGN1cnJlbnRCZXRWYWx1ZS5zdHJpbmcgPSBjYy5zdG9yZS5jdXJyZW50QmV0ID0gY3VycmVudEJldCAtIDEwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/getSymbolSprite.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '228bf6KrtxN0qHJ1bjh23br', 'getSymbolSprite');
// scripts/getSymbolSprite.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var getSymbolSprite = function () {
  var cached = {};
  return function getSymbolSprite(symbolIndex) {
    var path = "Canvas/Game/Machine/Performance/Symbols/" + (symbolIndex + 1);
    var symbolSprite = cached[path];

    if (symbolSprite === undefined) {
      symbolSprite = cached[path] = cc.find(path).getComponent(cc.Sprite);
    }

    return symbolSprite;
  };
}();

var _default = getSymbolSprite;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcZ2V0U3ltYm9sU3ByaXRlLmpzIl0sIm5hbWVzIjpbImdldFN5bWJvbFNwcml0ZSIsImNhY2hlZCIsInN5bWJvbEluZGV4IiwicGF0aCIsInN5bWJvbFNwcml0ZSIsInVuZGVmaW5lZCIsImNjIiwiZmluZCIsImdldENvbXBvbmVudCIsIlNwcml0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFNQSxlQUFlLEdBQUksWUFBWTtBQUNuQyxNQUFNQyxNQUFNLEdBQUcsRUFBZjtBQUVBLFNBQU8sU0FBU0QsZUFBVCxDQUF5QkUsV0FBekIsRUFBc0M7QUFDM0MsUUFBTUMsSUFBSSxpREFBOENELFdBQVcsR0FBRyxDQUE1RCxDQUFWO0FBQ0EsUUFBSUUsWUFBWSxHQUFHSCxNQUFNLENBQUNFLElBQUQsQ0FBekI7O0FBQ0EsUUFBSUMsWUFBWSxLQUFLQyxTQUFyQixFQUFnQztBQUM5QkQsTUFBQUEsWUFBWSxHQUFHSCxNQUFNLENBQUNFLElBQUQsQ0FBTixHQUFlRyxFQUFFLENBQUNDLElBQUgsQ0FBUUosSUFBUixFQUFjSyxZQUFkLENBQTJCRixFQUFFLENBQUNHLE1BQTlCLENBQTlCO0FBQ0Q7O0FBQ0QsV0FBT0wsWUFBUDtBQUNELEdBUEQ7QUFRRCxDQVh1QixFQUF4Qjs7ZUFhZUoiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdldFN5bWJvbFNwcml0ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgY29uc3QgY2FjaGVkID0ge307XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiBnZXRTeW1ib2xTcHJpdGUoc3ltYm9sSW5kZXgpIHtcclxuICAgIGNvbnN0IHBhdGggPSBgQ2FudmFzL0dhbWUvTWFjaGluZS9QZXJmb3JtYW5jZS9TeW1ib2xzLyR7c3ltYm9sSW5kZXggKyAxfWA7XHJcbiAgICBsZXQgc3ltYm9sU3ByaXRlID0gY2FjaGVkW3BhdGhdO1xyXG4gICAgaWYgKHN5bWJvbFNwcml0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHN5bWJvbFNwcml0ZSA9IGNhY2hlZFtwYXRoXSA9IGNjLmZpbmQocGF0aCkuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3ltYm9sU3ByaXRlO1xyXG4gIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xTcHJpdGU7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/historyButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8babavgekZPEpL8e3kJT8gt', 'historyButton');
// scripts/historyButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {});
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcaGlzdG9yeUJ1dHRvbi5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50Iiwib25Mb2FkIiwiYnV0dG9uIiwibm9kZSIsImdldENvbXBvbmVudCIsIkJ1dHRvbiIsIm9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNQLGFBQVNELEVBQUUsQ0FBQ0UsU0FETDtBQUdQQyxFQUFBQSxNQUhPLG9CQUdFO0FBQ1AsUUFBTUMsTUFBTSxHQUFHLEtBQUtDLElBQUwsQ0FBVUMsWUFBVixDQUF1Qk4sRUFBRSxDQUFDTyxNQUExQixDQUFmO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRyxFQUFaLENBQWUsT0FBZixFQUF3QixZQUFNLENBQUUsQ0FBaEM7QUFDRDtBQU5NLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gIG9uTG9hZCgpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcclxuICAgIGJ1dHRvbi5ub2RlLm9uKCdjbGljaycsICgpID0+IHt9KTtcclxuICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/handleGameCommand.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '547502AtRxEfq8fxpX3tzx8', 'handleGameCommand');
// scripts/handleGameCommand.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var handleGameCommand = function () {
  var first3072 = true;
  return function handleGameCommand(vals, pi, gameObj) {
    console.log("--%o", vals);

    switch (vals[0]) {
      case 3072:
        //　回傳本桌的資訊
        if (first3072 === true) {
          first3072 = false;
          cc.store.userPoints = vals[4];
          cc.find('Canvas/Game/Machine/UI/GamePoint/Value').getComponent(cc.Label).string = cc.store.userPoints;
          cc.store.maxBet = vals[2];
          cc.store.minBet = cc.store.currentBet = vals[3];
          cc.store.gameResult.iGrid = vals[8];
          cc.find('Canvas/Game/Machine/UI/BetPanel/Value').getComponent(cc.Label).string = cc.store.currentBet; // console.log(vals[8]);
          // hide login
          // play bg music

          cc.find('Canvas/Game').active = true;
        }

        cc.store.freeGameCnts = vals[9];
        break;

      case 3073:
        //　回傳押注結果資訊
        if (cc.store.gameResultGotStatus === 1) {
          var gameResult = cc.store.gameResult;
          gameResult.type = vals[1];
          gameResult.iGrid = vals[2];
          gameResult.iLine = vals[3];
          gameResult.iFrame = vals[4];
          gameResult.freeGameNCnts = vals[5];
          gameResult.WinPointLine = vals[6];
          gameResult.WinTotalPoint = vals[7];
          cc.store.userPoints = vals[8]; // console.log(vals[2]);
          // console.log(vals[3]);
          // console.log(vals[4]);

          if (gameResult.iGrid.some(function (val) {
            return val === -1;
          }) === false) {
            cc.store.gameResultGotStatus = 2;
          }
        }

        break;

      case 3074:
        //　通知遊戲端免費遊戲結束
        cc.store.FreeTotalPoint = vals[1];
        cc.store.userPoints = vals[2];
        break;
    }
  };
}();

var _default = handleGameCommand;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcaGFuZGxlR2FtZUNvbW1hbmQuanMiXSwibmFtZXMiOlsiaGFuZGxlR2FtZUNvbW1hbmQiLCJmaXJzdDMwNzIiLCJ2YWxzIiwicGkiLCJnYW1lT2JqIiwiY29uc29sZSIsImxvZyIsImNjIiwic3RvcmUiLCJ1c2VyUG9pbnRzIiwiZmluZCIsImdldENvbXBvbmVudCIsIkxhYmVsIiwic3RyaW5nIiwibWF4QmV0IiwibWluQmV0IiwiY3VycmVudEJldCIsImdhbWVSZXN1bHQiLCJpR3JpZCIsImFjdGl2ZSIsImZyZWVHYW1lQ250cyIsImdhbWVSZXN1bHRHb3RTdGF0dXMiLCJ0eXBlIiwiaUxpbmUiLCJpRnJhbWUiLCJmcmVlR2FtZU5DbnRzIiwiV2luUG9pbnRMaW5lIiwiV2luVG90YWxQb2ludCIsInNvbWUiLCJ2YWwiLCJGcmVlVG90YWxQb2ludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFNQSxpQkFBaUIsR0FBSSxZQUFZO0FBQ3JDLE1BQUlDLFNBQVMsR0FBRyxJQUFoQjtBQUVBLFNBQU8sU0FBU0QsaUJBQVQsQ0FBMkJFLElBQTNCLEVBQWlDQyxFQUFqQyxFQUFxQ0MsT0FBckMsRUFBOEM7QUFDbkRDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE1BQVosRUFBbUJKLElBQW5COztBQUNBLFlBQVFBLElBQUksQ0FBQyxDQUFELENBQVo7QUFDRSxXQUFLLElBQUw7QUFBVztBQUNULFlBQUlELFNBQVMsS0FBSyxJQUFsQixFQUF3QjtBQUN0QkEsVUFBQUEsU0FBUyxHQUFHLEtBQVo7QUFFQU0sVUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVNDLFVBQVQsR0FBc0JQLElBQUksQ0FBQyxDQUFELENBQTFCO0FBQ0FLLFVBQUFBLEVBQUUsQ0FBQ0csSUFBSCxDQUFRLHdDQUFSLEVBQWtEQyxZQUFsRCxDQUErREosRUFBRSxDQUFDSyxLQUFsRSxFQUF5RUMsTUFBekUsR0FBa0ZOLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTQyxVQUEzRjtBQUVBRixVQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBU00sTUFBVCxHQUFrQlosSUFBSSxDQUFDLENBQUQsQ0FBdEI7QUFDQUssVUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVNPLE1BQVQsR0FBa0JSLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTUSxVQUFULEdBQXNCZCxJQUFJLENBQUMsQ0FBRCxDQUE1QztBQUNBSyxVQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBU1MsVUFBVCxDQUFvQkMsS0FBcEIsR0FBNEJoQixJQUFJLENBQUMsQ0FBRCxDQUFoQztBQUVBSyxVQUFBQSxFQUFFLENBQUNHLElBQUgsQ0FBUSx1Q0FBUixFQUFpREMsWUFBakQsQ0FBOERKLEVBQUUsQ0FBQ0ssS0FBakUsRUFBd0VDLE1BQXhFLEdBQWlGTixFQUFFLENBQUNDLEtBQUgsQ0FBU1EsVUFBMUYsQ0FWc0IsQ0FZdEI7QUFFQTtBQUdBOztBQUdBVCxVQUFBQSxFQUFFLENBQUNHLElBQUgsQ0FBUSxhQUFSLEVBQXVCUyxNQUF2QixHQUFnQyxJQUFoQztBQUNEOztBQUNEWixRQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBU1ksWUFBVCxHQUF3QmxCLElBQUksQ0FBQyxDQUFELENBQTVCO0FBQ0E7O0FBRUYsV0FBSyxJQUFMO0FBQVc7QUFDVCxZQUFJSyxFQUFFLENBQUNDLEtBQUgsQ0FBU2EsbUJBQVQsS0FBaUMsQ0FBckMsRUFBd0M7QUFDdEMsY0FBUUosVUFBUixHQUF1QlYsRUFBRSxDQUFDQyxLQUExQixDQUFRUyxVQUFSO0FBQ0FBLFVBQUFBLFVBQVUsQ0FBQ0ssSUFBWCxHQUFrQnBCLElBQUksQ0FBQyxDQUFELENBQXRCO0FBQ0FlLFVBQUFBLFVBQVUsQ0FBQ0MsS0FBWCxHQUFtQmhCLElBQUksQ0FBQyxDQUFELENBQXZCO0FBQ0FlLFVBQUFBLFVBQVUsQ0FBQ00sS0FBWCxHQUFtQnJCLElBQUksQ0FBQyxDQUFELENBQXZCO0FBQ0FlLFVBQUFBLFVBQVUsQ0FBQ08sTUFBWCxHQUFvQnRCLElBQUksQ0FBQyxDQUFELENBQXhCO0FBQ0FlLFVBQUFBLFVBQVUsQ0FBQ1EsYUFBWCxHQUF5QnZCLElBQUksQ0FBQyxDQUFELENBQTdCO0FBQ0FlLFVBQUFBLFVBQVUsQ0FBQ1MsWUFBWCxHQUEwQnhCLElBQUksQ0FBQyxDQUFELENBQTlCO0FBQ0FlLFVBQUFBLFVBQVUsQ0FBQ1UsYUFBWCxHQUEyQnpCLElBQUksQ0FBQyxDQUFELENBQS9CO0FBRUFLLFVBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTQyxVQUFULEdBQXNCUCxJQUFJLENBQUMsQ0FBRCxDQUExQixDQVZzQyxDQVl0QztBQUNBO0FBQ0E7O0FBRUEsY0FBSWUsVUFBVSxDQUFDQyxLQUFYLENBQWlCVSxJQUFqQixDQUFzQixVQUFBQyxHQUFHO0FBQUEsbUJBQUlBLEdBQUcsS0FBSyxDQUFDLENBQWI7QUFBQSxXQUF6QixNQUE2QyxLQUFqRCxFQUF3RDtBQUN0RHRCLFlBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTYSxtQkFBVCxHQUErQixDQUEvQjtBQUNEO0FBQ0Y7O0FBQ0Q7O0FBRUYsV0FBSyxJQUFMO0FBQVc7QUFDVGQsUUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVNzQixjQUFULEdBQXdCNUIsSUFBSSxDQUFDLENBQUQsQ0FBNUI7QUFDQUssUUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVNDLFVBQVQsR0FBc0JQLElBQUksQ0FBQyxDQUFELENBQTFCO0FBQ0E7QUFyREo7QUF1REQsR0F6REQ7QUEwREQsQ0E3RHlCLEVBQTFCOztlQStEZUYiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGhhbmRsZUdhbWVDb21tYW5kID0gKGZ1bmN0aW9uICgpIHtcclxuICBsZXQgZmlyc3QzMDcyID0gdHJ1ZTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZUdhbWVDb21tYW5kKHZhbHMsIHBpLCBnYW1lT2JqKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIi0tJW9cIix2YWxzKTtcclxuICAgIHN3aXRjaCAodmFsc1swXSkge1xyXG4gICAgICBjYXNlIDMwNzI6IC8v44CA5Zue5YKz5pys5qGM55qE6LOH6KiKXHJcbiAgICAgICAgaWYgKGZpcnN0MzA3MiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgZmlyc3QzMDcyID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgY2Muc3RvcmUudXNlclBvaW50cyA9IHZhbHNbNF07XHJcbiAgICAgICAgICBjYy5maW5kKCdDYW52YXMvR2FtZS9NYWNoaW5lL1VJL0dhbWVQb2ludC9WYWx1ZScpLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gY2Muc3RvcmUudXNlclBvaW50cztcclxuXHJcbiAgICAgICAgICBjYy5zdG9yZS5tYXhCZXQgPSB2YWxzWzJdO1xyXG4gICAgICAgICAgY2Muc3RvcmUubWluQmV0ID0gY2Muc3RvcmUuY3VycmVudEJldCA9IHZhbHNbM107XHJcbiAgICAgICAgICBjYy5zdG9yZS5nYW1lUmVzdWx0LmlHcmlkID0gdmFsc1s4XTtcclxuXHJcbiAgICAgICAgICBjYy5maW5kKCdDYW52YXMvR2FtZS9NYWNoaW5lL1VJL0JldFBhbmVsL1ZhbHVlJykuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBjYy5zdG9yZS5jdXJyZW50QmV0O1xyXG5cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHNbOF0pO1xyXG5cclxuICAgICAgICAgIC8vIGhpZGUgbG9naW5cclxuXHJcblxyXG4gICAgICAgICAgLy8gcGxheSBiZyBtdXNpY1xyXG5cclxuXHJcbiAgICAgICAgICBjYy5maW5kKCdDYW52YXMvR2FtZScpLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNjLnN0b3JlLmZyZWVHYW1lQ250cyA9IHZhbHNbOV07XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlIDMwNzM6IC8v44CA5Zue5YKz5oq85rOo57WQ5p6c6LOH6KiKXHJcbiAgICAgICAgaWYgKGNjLnN0b3JlLmdhbWVSZXN1bHRHb3RTdGF0dXMgPT09IDEpIHtcclxuICAgICAgICAgIGNvbnN0IHsgZ2FtZVJlc3VsdCB9ID0gY2Muc3RvcmU7XHJcbiAgICAgICAgICBnYW1lUmVzdWx0LnR5cGUgPSB2YWxzWzFdO1xyXG4gICAgICAgICAgZ2FtZVJlc3VsdC5pR3JpZCA9IHZhbHNbMl07XHJcbiAgICAgICAgICBnYW1lUmVzdWx0LmlMaW5lID0gdmFsc1szXTtcclxuICAgICAgICAgIGdhbWVSZXN1bHQuaUZyYW1lID0gdmFsc1s0XTtcclxuICAgICAgICAgIGdhbWVSZXN1bHQuZnJlZUdhbWVOQ250cz12YWxzWzVdO1xyXG4gICAgICAgICAgZ2FtZVJlc3VsdC5XaW5Qb2ludExpbmUgPSB2YWxzWzZdO1xyXG4gICAgICAgICAgZ2FtZVJlc3VsdC5XaW5Ub3RhbFBvaW50ID0gdmFsc1s3XTtcclxuXHJcbiAgICAgICAgICBjYy5zdG9yZS51c2VyUG9pbnRzID0gdmFsc1s4XTtcclxuXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyh2YWxzWzJdKTtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZhbHNbM10pO1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2codmFsc1s0XSk7XHJcblxyXG4gICAgICAgICAgaWYgKGdhbWVSZXN1bHQuaUdyaWQuc29tZSh2YWwgPT4gdmFsID09PSAtMSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNjLnN0b3JlLmdhbWVSZXN1bHRHb3RTdGF0dXMgPSAyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgMzA3NDogLy/jgIDpgJrnn6XpgYrmiLLnq6/lhY3osrvpgYrmiLLntZDmnZ9cclxuICAgICAgICBjYy5zdG9yZS5GcmVlVG90YWxQb2ludD12YWxzWzFdO1xyXG4gICAgICAgIGNjLnN0b3JlLnVzZXJQb2ludHMgPSB2YWxzWzJdO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVHYW1lQ29tbWFuZDtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/incBetButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f2aafML1QxASK398CLTW68w', 'incBetButton');
// scripts/incBetButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      var currentBetValue = cc.find('Canvas/Game/Machine/UI/BetPanel/Value').getComponent(cc.Label);
      var currentBet = parseFloat(currentBetValue.string);

      if (currentBet >= cc.store.minBet && currentBet < cc.store.maxBet) {
        if (currentBet <= 0.9) {
          currentBetValue.string = cc.store.currentBet = parseFloat((currentBet + 0.1).toPrecision(12));
        } else if (currentBet <= 9) {
          currentBetValue.string = cc.store.currentBet = currentBet + 1;
        } else {
          currentBetValue.string = cc.store.currentBet = currentBet + 10;
        }
      }
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcaW5jQmV0QnV0dG9uLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJvbkxvYWQiLCJidXR0b24iLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiQnV0dG9uIiwib24iLCJjdXJyZW50QmV0VmFsdWUiLCJmaW5kIiwiTGFiZWwiLCJjdXJyZW50QmV0IiwicGFyc2VGbG9hdCIsInN0cmluZyIsInN0b3JlIiwibWluQmV0IiwibWF4QmV0IiwidG9QcmVjaXNpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLE1BSE8sb0JBR0U7QUFDUCxRQUFNQyxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCTixFQUFFLENBQUNPLE1BQTFCLENBQWY7QUFDQUgsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLFlBQU07QUFDNUIsVUFBTUMsZUFBZSxHQUFHVCxFQUFFLENBQUNVLElBQUgsQ0FBUSx1Q0FBUixFQUFpREosWUFBakQsQ0FBOEROLEVBQUUsQ0FBQ1csS0FBakUsQ0FBeEI7QUFDQSxVQUFNQyxVQUFVLEdBQUdDLFVBQVUsQ0FBQ0osZUFBZSxDQUFDSyxNQUFqQixDQUE3Qjs7QUFDQSxVQUFJRixVQUFVLElBQUlaLEVBQUUsQ0FBQ2UsS0FBSCxDQUFTQyxNQUF2QixJQUFpQ0osVUFBVSxHQUFHWixFQUFFLENBQUNlLEtBQUgsQ0FBU0UsTUFBM0QsRUFBbUU7QUFDakUsWUFBR0wsVUFBVSxJQUFFLEdBQWYsRUFBbUI7QUFDakJILFVBQUFBLGVBQWUsQ0FBQ0ssTUFBaEIsR0FBeUJkLEVBQUUsQ0FBQ2UsS0FBSCxDQUFTSCxVQUFULEdBQXFCQyxVQUFVLENBQUMsQ0FBQ0QsVUFBVSxHQUFHLEdBQWQsRUFBbUJNLFdBQW5CLENBQStCLEVBQS9CLENBQUQsQ0FBeEQ7QUFDRCxTQUZELE1BRU0sSUFBR04sVUFBVSxJQUFFLENBQWYsRUFBaUI7QUFDckJILFVBQUFBLGVBQWUsQ0FBQ0ssTUFBaEIsR0FBeUJkLEVBQUUsQ0FBQ2UsS0FBSCxDQUFTSCxVQUFULEdBQXNCQSxVQUFVLEdBQUcsQ0FBNUQ7QUFDRCxTQUZLLE1BRUQ7QUFDSEgsVUFBQUEsZUFBZSxDQUFDSyxNQUFoQixHQUF5QmQsRUFBRSxDQUFDZSxLQUFILENBQVNILFVBQVQsR0FBc0JBLFVBQVUsR0FBRyxFQUE1RDtBQUNEO0FBRUY7QUFDRixLQWJEO0FBY0Q7QUFuQk0sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xyXG4gICAgYnV0dG9uLm5vZGUub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50QmV0VmFsdWUgPSBjYy5maW5kKCdDYW52YXMvR2FtZS9NYWNoaW5lL1VJL0JldFBhbmVsL1ZhbHVlJykuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKTtcclxuICAgICAgY29uc3QgY3VycmVudEJldCA9IHBhcnNlRmxvYXQoY3VycmVudEJldFZhbHVlLnN0cmluZyk7XHJcbiAgICAgIGlmIChjdXJyZW50QmV0ID49IGNjLnN0b3JlLm1pbkJldCAmJiBjdXJyZW50QmV0IDwgY2Muc3RvcmUubWF4QmV0KSB7XHJcbiAgICAgICAgaWYoY3VycmVudEJldDw9MC45KXtcclxuICAgICAgICAgIGN1cnJlbnRCZXRWYWx1ZS5zdHJpbmcgPSBjYy5zdG9yZS5jdXJyZW50QmV0ID1wYXJzZUZsb2F0KChjdXJyZW50QmV0ICsgMC4xKS50b1ByZWNpc2lvbigxMikpIDtcclxuICAgICAgICB9ZWxzZSBpZihjdXJyZW50QmV0PD05KXtcclxuICAgICAgICAgIGN1cnJlbnRCZXRWYWx1ZS5zdHJpbmcgPSBjYy5zdG9yZS5jdXJyZW50QmV0ID0gY3VycmVudEJldCArIDE7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBjdXJyZW50QmV0VmFsdWUuc3RyaW5nID0gY2Muc3RvcmUuY3VycmVudEJldCA9IGN1cnJlbnRCZXQgKyAxMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Photon-Javascript_SDK.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b3e2fCQxetN24gGB83KHjgJ', 'Photon-Javascript_SDK');
// scripts/Photon-Javascript_SDK.js

"use strict";

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}(); /// --------------------------------------------------------------------------------------------------------------------------------------------------------------
/// ------------------- Exitgames.Common
/// --------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
    Exitgames
    @namespace Exitgames
*/

/**
    Exitgames utilities
    @namespace Exitgames.Common
*/


var Exitgames;

(function (Exitgames) {
  var Common;

  (function (Common) {
    var Logger =
    /** @class */
    function () {
      /**
          @classdesc Logger with ability to control logging level.
          Prints messages to browser console.
          Each logging method perfoms toString() calls and default formatting of arguments only after it checks logging level. Therefore disabled level logging method call with plain arguments doesn't involves much overhead.
          But if one prefer custom formatting or some calculation for logging methods arguments he should check logging level before doing this to avoid unnecessary operations:
          if(logger.isLevelEnabled(Logger.Level.DEBUG)) {
              logger.debug("", someCall(x, y), x + "," + y);
          }
          @constructor Exitgames.Common.Logger
          @param {string} [prefix=""] All log messages will be prefixed with that.
          @param {Exitgames.Common.Logger.Level} [level=Level.INFO] Initial logging level.
      */
      function Logger(prefix, level) {
        if (prefix === void 0) {
          prefix = "";
        }

        if (level === void 0) {
          level = Logger.Level.INFO;
        }

        this.prefix = prefix;
        this.level = level;
      }
      /**
          @summary Sets logger prefix.
          @method Exitgames.Common.Logger#setPrefix
          @param {stirng} prefix New prefix.
      */


      Logger.prototype.setPrefix = function (prefix) {
        this.prefix = prefix;
      };
      /**
          @summary Gets logger prefix.
          @method Exitgames.Common.Logger#getPrefix
          @returns {string} Prefix.
      */


      Logger.prototype.getPrefix = function () {
        return this.prefix;
      };
      /**
          @summary Changes current logging level.
          @method Exitgames.Common.Logger#setLevel
          @param {Exitgames.Common.Logger.Level} level New logging level.
      */


      Logger.prototype.setLevel = function (level) {
        level = Math.max(level, Logger.Level.DEBUG);
        level = Math.min(level, Logger.Level.OFF);
        this.level = level;
      };
      /**
          @summary Sets global method to be called on logger.exception call.
          @method Exitgames.Common.Logger#setExceptionHandler
          @param {(string) => boolean} handler Exception handler. Return true to cancel throwing.
      */


      Logger.setExceptionHandler = function (handler) {
        this.exceptionHandler = handler;
      };
      /**
          @summary Checks if logging level active.
          @method Exitgames.Common.Logger#isLevelEnabled
          @param {Exitgames.Common.Logger.Level} level Level to check.
          @returns {boolean} True if level active.
      */


      Logger.prototype.isLevelEnabled = function (level) {
        return level >= this.level;
      };
      /**
          @summary Returns current logging level.
          @method Exitgames.Common.Logger#getLevel
          @returns {Exitgames.Common.Logger.Level} Current logging level.
      */


      Logger.prototype.getLevel = function () {
        return this.level;
      };
      /**
          @summary Logs message if logging level = DEBUG, INFO, WARN, ERROR
          @method Exitgames.Common.Logger#debug
          @param {string} mess Message to log.
          @param {...any} optionalParams For every additional parameter toString() applies and result added to the end of log message after space character.
      */


      Logger.prototype.debug = function (mess) {
        var optionalParams = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          optionalParams[_i - 1] = arguments[_i];
        }

        this.log(Logger.Level.DEBUG, mess, optionalParams);
      };
      /**
          @summary Logs message if logging level = INFO, WARN, ERROR
          @method Exitgames.Common.Logger#info
          @param {string} mess Message to log.
          @param {...any} optionalParams For every additional parameter toString() applies and result added to the end of log message after space character.
      */


      Logger.prototype.info = function (mess) {
        var optionalParams = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          optionalParams[_i - 1] = arguments[_i];
        }

        this.log(Logger.Level.INFO, mess, optionalParams);
      };
      /**
          @summary Logs message if logging level = WARN, ERROR
          @method Exitgames.Common.Logger#warn
          @param {string} mess Message to log.
          @param {...any} optionalParams For every additional parameter toString() applies and result added to the end of log message after space character.
      */


      Logger.prototype.warn = function (mess) {
        var optionalParams = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          optionalParams[_i - 1] = arguments[_i];
        }

        this.log(Logger.Level.WARN, mess, optionalParams);
      };
      /**
          @summary Logs message if logging level = ERROR
          @method Exitgames.Common.Logger#error
          @param {string} mess Message to log.
          @param {...any} optionalParams For every additional parameter toString() applies and result added to the end of log message after space character.
      */


      Logger.prototype.error = function (mess) {
        var optionalParams = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          optionalParams[_i - 1] = arguments[_i];
        }

        this.log(Logger.Level.ERROR, mess, optionalParams);
      };
      /**
          @summary Throws an Error or executes exception handler if set.
          @method Exitgames.Common.Logger#exception
          @param {string} mess Message passed to Error or exception handler.
          @param {...any} optionalParams For every additional parameter toString() applies and result added to the end of log message after space character.
      */


      Logger.prototype.exception = function (code, mess) {
        var optionalParams = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          optionalParams[_i - 2] = arguments[_i];
        }

        if (Logger.exceptionHandler && Logger.exceptionHandler(code, this.format0(mess, optionalParams))) {
          return;
        }

        throw new Error(this.format0("[" + code + "] " + mess, optionalParams));
      };
      /**
          @summary Applies default logger formatting to arguments
          @method Exitgames.Common.Logger#format
          @param {string} mess String to start formatting with.
          @param {...any} optionalParams For every additional parameter toString() applies and result added to the end of formatted string after space character.
          @returns {string} Formatted string.
      */


      Logger.prototype.format = function (mess) {
        var optionalParams = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          optionalParams[_i - 1] = arguments[_i];
        }

        return this.format0(mess, optionalParams);
      };
      /**
          @summary Applies default logger formatting to array of objects.
          @method Exitgames.Common.Logger#format
          @param {string} mess String to start formatting with.
          @param {any[]} optionalParams For every additional parameter toString() applies and result added to the end of formatted string after space character.
          @returns {string} Formatted string.
      */


      Logger.prototype.formatArr = function (mess, optionalParams) {
        return this.format0(mess, optionalParams);
      };

      Logger.prototype.log = function (level, msg, optionalParams) {
        if (level >= this.level) {
          // for global vars console !== undefined throws an error
          if (typeof console !== "undefined" && msg !== undefined) {
            try {
              var logMethod = console[Logger.log_types[level]];

              if (!logMethod) {
                logMethod = console["log"];
              }

              if (logMethod) {
                logMethod.apply(console, [this.prefix, msg].concat(optionalParams));
              }
            } catch (error) {// silently fail
            }
          }
        }
      };

      Logger.prototype.format0 = function (msg, optionalParams) {
        return (this.prefix == "" ? "" : this.prefix + " ") + msg + " " + optionalParams.map(function (x) {
          if (x !== undefined) {
            switch (typeof x) {
              case "object":
                try {
                  return JSON.stringify(x);
                } catch (error) {
                  return x.toString() + "(" + error + ")";
                }

              default:
                return x.toString();
            }
          }
        }).join(" ");
      };
      /**
          @summary Logging levels. Set to restrict log output.
          @member Exitgames.Common.Logger.Level
          @readonly
          @property {number} DEBUG All logging methods enabled.
          @property {number} INFO info(...), warn(...), error(...) methods enabled.
          @property {number} WARN warn(...) and error(...) methods enabled.
          @property {number} ERROR Only error(...) method enabled.
          @property {number} OFF Logging off.
      */


      Logger.Level = {
        //TRACE : 0,
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        //FATAL: 5,
        OFF: 6
      };
      Logger.log_types = ["debug", "debug", "info", "warn", "error"];
      return Logger;
    }();

    Common.Logger = Logger;

    var Util =
    /** @class */
    function () {
      function Util() {}

      Util.indexOf = function (arr, item, from) {
        for (var l = arr.length, i = from < 0 ? Math.max(0, l + from) : from || 0; i < l; i++) {
          if (arr[i] === item) {
            return i;
          }
        }

        return -1;
      };

      Util.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      }; //TODO: naming. could be named mergeHashtable or something more specific


      Util.merge = function (target, additional) {
        for (var i in additional) {
          if (additional.hasOwnProperty(i)) {
            target[i] = additional[i];
          }
        }
      };

      Util.getPropertyOrElse = function (obj, prop, defaultValue) {
        if (obj.hasOwnProperty(prop)) {
          return obj[prop];
        } else {
          return defaultValue;
        }
      };

      Util.enumValueToName = function (enumObj, value) {
        for (var i in enumObj) {
          if (value == enumObj[i]) {
            return i;
          }
        }

        return "undefined";
      };

      Util.getEnumKeyByValue = function (enumObj, value) {
        for (var i in enumObj) {
          if (value == enumObj[i]) {
            return i;
          }
        }

        return undefined;
      };

      return Util;
    }();

    Common.Util = Util;
  })(Common = Exitgames.Common || (Exitgames.Common = {}));
})(Exitgames || (Exitgames = {})); /// <reference path="photon-common.ts"/>

/**
    Photon
    @namespace Photon
*/


var Photon;

(function (Photon) {
  /**
      @summary These are the options that can be used as underlying transport protocol.
      @member Photon.ConnectionProtocol
      @readonly
      @property {number} Ws WebSockets connection.
      @property {number} Wss WebSockets Secure connection.
  **/
  var ConnectionProtocol;

  (function (ConnectionProtocol) {
    ConnectionProtocol[ConnectionProtocol["Ws"] = 0] = "Ws";
    ConnectionProtocol[ConnectionProtocol["Wss"] = 1] = "Wss";
  })(ConnectionProtocol = Photon.ConnectionProtocol || (Photon.ConnectionProtocol = {})); // Stubs for extended types used by photon-peer-em (emscripten)


  var TypeExtType =
  /** @class */
  function () {
    function TypeExtType() {}

    return TypeExtType;
  }();

  Photon.TypeExtType = TypeExtType;

  var TypeExt =
  /** @class */
  function () {
    function TypeExt() {}

    TypeExt.Is = function (x) {
      return false;
    };

    TypeExt.Byte = function (x) {
      return x;
    };

    TypeExt.Short = function (x) {
      return x;
    };

    TypeExt.Int = function (x) {
      return x;
    };

    TypeExt.Long = function (x) {
      return x;
    };

    TypeExt.Float = function (x) {
      return x;
    };

    TypeExt.Double = function (x) {
      return x;
    };

    TypeExt.String = function (x) {
      return x;
    };

    TypeExt.Bool = function (x) {
      return x;
    };

    TypeExt.Dict = function (t1, t2, x) {
      return x;
    };

    return TypeExt;
  }();

  Photon.TypeExt = TypeExt;

  var PhotonPeer =
  /** @class */
  function () {
    /**
        @classdesc Instances of the PhotonPeer class are used to connect to a Photon server and communicate with it.
        A PhotonPeer instance allows communication with the Photon Server, which in turn distributes messages to other PhotonPeer clients.
        An application can use more than one PhotonPeer instance, which are treated as separate users on the server.
        Each should have its own listener instance, to separate the operations, callbacks and events.
        @constructor Photon.PhotonPeer
        @param {Photon.ConnectionProtocol} protocol Connection protocol.
        @param {string} address Server address:port.
        @param {string} [subprotocol=""] WebSocket protocol.
        @param {string} [debugName=""] Log messages prefixed with this value.
    */
    function PhotonPeer(protocol, address, subprotocol, debugName) {
      if (subprotocol === void 0) {
        subprotocol = "";
      }

      if (debugName === void 0) {
        debugName = "";
      }

      this.protocol = protocol;
      this.address = address;
      this.subprotocol = subprotocol;
      /**
          @summary Peer sends 'keep alive' message to server as this timeout exceeded after last send operation.
          Set it < 1000 to disable 'keep alive' operation
          @member Photon.PhotonPeer#keepAliveTimeoutMs
          @type {number}
          @default 3000
      */

      this.keepAliveTimeoutMs = 3000;
      this._frame = "~m~";
      this._isConnecting = false;
      this._isConnected = false;
      this._isClosing = false;
      this._peerStatusListeners = {};
      this._eventListeners = {};
      this._responseListeners = {};
      this.lastRtt = 0;
      this.initTimestamp = Date.now();
      this.keepAliveTimer = 0;
      this.url = this.addProtocolPrefix(this.address, this.protocol);
      this._logger = new Exitgames.Common.Logger(debugName && debugName != "" ? debugName + ":" : "");
    }

    PhotonPeer.prototype.addProtocolPrefix = function (address, protocol) {
      var protocolPrefix = {
        ws: "ws://",
        wss: "wss://"
      };

      for (var k in protocolPrefix) {
        if (address.indexOf(protocolPrefix[k]) == 0) {
          return address;
        }
      }

      switch (protocol) {
        case ConnectionProtocol.Ws:
          return protocolPrefix.ws + address;

        case ConnectionProtocol.Wss:
          return protocolPrefix.wss + address;

        default:
          // error
          return protocolPrefix.ws + address;
      }
    };

    PhotonPeer.prototype.Destroy = function () {};
    /**
        @summary Checks if peer is connecting.
        @method Photon.PhotonPeer#isConnecting
        @returns {boolean} True if peer is connecting.
    */


    PhotonPeer.prototype.isConnecting = function () {
      return this._isConnecting;
    };

    PhotonPeer.prototype.getLastRtt = function () {
      return this.lastRtt;
    };
    /**
        @summary Checks if peer is connected.
        @method Photon.PhotonPeer#isConnected
        @returns {boolean} True if peer is connected.
    */


    PhotonPeer.prototype.isConnected = function () {
      return this._isConnected;
    };
    /**
        @summary Checks if peer is closing.
        @method Photon.PhotonPeer#isClosing
        @returns {boolean} True if peer is closing.
    */


    PhotonPeer.prototype.isClosing = function () {
      return this._isClosing;
    };
    /**
        @summary Starts connection to server.
        @method Photon.PhotonPeer#connect
    */


    PhotonPeer.prototype.connect = function (appid) {
      var _this = this;

      this._sessionid = undefined;
      var url = this.url + "/" + appid + "?libversion=4.1.0.0";

      if (this.subprotocol == "") {
        this._socket = new WebSocket(url, "Json");
      } else {
        this._socket = new WebSocket(url, this.subprotocol);
      }

      this._onConnecting(); // Set event handlers.


      this._socket.onopen = function (ev) {//this.logger.debug("onopen");
      };

      this._socket.onmessage = function (ev) {
        var message = _this._decode(ev.data);

        _this._onMessage(message.toString());
      };

      this._socket.onclose = function (ev) {
        _this._logger.debug("onclose: wasClean =", ev.wasClean, ", code=", ev.code, ", reason =", ev.reason);

        if (_this._isConnecting) {
          _this._onConnectFailed(ev);
        } else {
          if (1006 == ev.code) {
            _this._onTimeout();
          }

          _this._onDisconnect();
        }
      };

      this._socket.onerror = function (ev) {
        _this._onError(ev);
      };
    };
    /**
        @summary Disconnects from server.
        @method Photon.PhotonPeer#disconnect
    */


    PhotonPeer.prototype.disconnect = function () {
      this._isClosing = true;

      this._socket.close();
    };
    /**
        @summary Sends operation to the Photon Server.
        @method Photon.PhotonPeer#sendOperation
        @param {number} code Code of operation.
        @param {object} [data] Parameters of operation as a flattened array of key-value pairs: [key1, value1, key2, value2...]
        @param {boolean} [sendReliable=false] Selects if the operation must be acknowledged or not. If false, the operation is not guaranteed to reach the server.
        @param {number} [channelId=0] The channel in which this operation should be sent.
    */


    PhotonPeer.prototype.sendOperation = function (code, data, sendReliable, channelId) {
      if (sendReliable === void 0) {
        sendReliable = false;
      }

      if (channelId === void 0) {
        channelId = 0;
      }

      var sndJSON = {
        "req": code,
        "vals": []
      };

      if (Exitgames.Common.Util.isArray(data)) {
        sndJSON["vals"] = data;
      } else {
        if (data === undefined) {
          sndJSON["vals"] = [];
        } else {
          this._logger.exception(201, "PhotonPeer[sendOperation] - Trying to send non array data:", data);
        }
      }

      this._send(sndJSON);

      this._logger.debug("PhotonPeer[sendOperation] - Sending request:", sndJSON);
    };
    /**
        @summary Registers listener for peer status change.
        @method Photon.PhotonPeer#addPeerStatusListener
        @param {PhotonPeer.StatusCodes} statusCode Status change to this value will be listening.
        @param {Function} callback The listener function that processes the status change. This function don't accept any parameters.
    */


    PhotonPeer.prototype.addPeerStatusListener = function (statusCode, callback) {
      this._addListener(this._peerStatusListeners, statusCode, callback);
    };
    /**
        @summary Registers listener for custom event.
        @method Photon.PhotonPeer#addEventListener
        @param {number} eventCode Custom event code.
        @param {Function} callback The listener function that processes the event. This function may accept object with event content.
    */


    PhotonPeer.prototype.addEventListener = function (eventCode, callback) {
      this._addListener(this._eventListeners, eventCode.toString(), callback);
    };
    /**
        @summary Registers listener for operation response.
        @method Photon.PhotonPeer#addResponseListener
        @param {number} operationCode Operation code.
        @param {Function} callback The listener function that processes the event. This function may accept object with operation response content.
    */


    PhotonPeer.prototype.addResponseListener = function (operationCode, callback) {
      this._addListener(this._responseListeners, operationCode.toString(), callback);
    };
    /**
        @summary Removes listener if exists for peer status change.
        @method Photon.PhotonPeer#removePeerStatusListener
        @param {string} statusCode One of PhotonPeer.StatusCodes to remove listener for.
        @param {Function} callback Listener to remove.
    */


    PhotonPeer.prototype.removePeerStatusListener = function (statusCode, callback) {
      this._removeListener(this._peerStatusListeners, statusCode, callback);
    };
    /**
        @summary Removes listener if exists for custom event.
        @method Photon.PhotonPeer#removeEventListener
        @param {number} eventCode Event code to remove to remove listener for.
        @param {Function} callback Listener to remove.
    */


    PhotonPeer.prototype.removeEventListener = function (eventCode, callback) {
      this._removeListener(this._eventListeners, eventCode.toString(), callback);
    };
    /**
        @summary Removes listener if exists for operation response.
        @method Photon.PhotonPeer#removeResponseListener
        @param {number} operationCode Operation code to remove listener for.
        @param {Function} callback Listener to remove.
    */


    PhotonPeer.prototype.removeResponseListener = function (operationCode, callback) {
      this._removeListener(this._responseListeners, operationCode.toString(), callback);
    };
    /**
        @summary Removes all listeners for peer status change specified.
        @method Photon.PhotonPeer#removePeerStatusListenersForCode
        @param {string} statusCode One of PhotonPeer.StatusCodes to remove all listeners for.
    */


    PhotonPeer.prototype.removePeerStatusListenersForCode = function (statusCode) {
      this._removeListenersForCode(this._peerStatusListeners, statusCode);
    };
    /**
        @summary Removes all listeners for custom event specified.
        @method Photon.PhotonPeer#removeEventListenersForCode
        @param {number} eventCode Event code to remove all listeners for.
    */


    PhotonPeer.prototype.removeEventListenersForCode = function (eventCode) {
      this._removeListenersForCode(this._eventListeners, eventCode.toString());
    };
    /**
        @summary Removes all listeners for operation response specified.
        @method Photon.PhotonPeer#removeResponseListenersForCode
        @param {number} operationCode Operation code to remove all listeners for.
    */


    PhotonPeer.prototype.removeResponseListenersForCode = function (operationCode) {
      this._removeListenersForCode(this._responseListeners, operationCode.toString());
    };
    /**
        @summary Sets peer logger level.
        @method Photon.PhotonPeer#setLogLevel
        @param {Exitgames.Common.Logger.Level} level Logging level.
    */


    PhotonPeer.prototype.setLogLevel = function (level) {
      this._logger.setLevel(level);
    };
    /**
        @summary Called if no listener found for received custom event.
        Override to relay unknown event to user's code or handle known events without listener registration.
        @method Photon.PhotonPeer#onUnhandledEvent
        @param {number} eventCode Code of received event.
        @param {object} [args] Content of received event or empty object.
    */


    PhotonPeer.prototype.onUnhandledEvent = function (eventCode, args) {
      this._logger.warn('PhotonPeer: No handler for event', eventCode, 'registered.');
    };
    /**
        @summary Called if no listener found for received operation response event.
        Override to relay unknown response to user's code or handle known responses without listener registration.
        @method Photon.PhotonPeer#onUnhandledEvent
        @param {number} operationCode Code of received response.
        @param {object} [args] Content of received response or empty object.
    */


    PhotonPeer.prototype.onUnhandledResponse = function (operationCode, args) {
      this._logger.warn('PhotonPeer: No handler for response', operationCode, 'registered.');
    }; // TODO: lite calls this
    // protected


    PhotonPeer.prototype._dispatchEvent = function (code, args) {
      if (!this._dispatch(this._eventListeners, code.toString(), args, "event")) {
        this.onUnhandledEvent(code, args);
      }
    }; // TODO: lite calls this
    // protected


    PhotonPeer.prototype._dispatchResponse = function (code, args) {
      if (!this._dispatch(this._responseListeners, code.toString(), args, "response")) {
        this.onUnhandledResponse(code, args);
      }
    };

    PhotonPeer.prototype._stringify = function (message) {
      if (Object.prototype.toString.call(message) == "[object Object]") {
        if (!JSON) {
          this._logger.exception(202, "PhotonPeer[_stringify] - Trying to encode as JSON, but JSON.stringify is missing.");
        }

        return "~j~" + JSON.stringify(message);
      } else {
        return String(message);
      }
    };

    PhotonPeer.prototype._encode = function (messages) {
      var ret = "",
          message,
          messages = Exitgames.Common.Util.isArray(messages) ? messages : [messages];

      for (var i = 0, l = messages.length; i < l; i++) {
        message = messages[i] === null || messages[i] === undefined ? "" : this._stringify(messages[i]);
        ret += this._frame + message.length + this._frame + message;
      }

      return ret;
    };

    PhotonPeer.prototype._decode = function (data) {
      var messages = [],
          number,
          n,
          newdata = data;
      var nulIndex = data.indexOf("\x00");

      if (nulIndex !== -1) {
        newdata = data.replace(/[\0]/g, "");
      }

      data = newdata;

      do {
        if (data.substr(0, 3) !== this._frame) {
          return messages;
        }

        data = data.substr(3);
        number = "", n = "";

        for (var i = 0, l = data.length; i < l; i++) {
          n = Number(data.substr(i, 1));

          if (data.substr(i, 1) == n) {
            number += n;
          } else {
            data = data.substr(number.length + this._frame.length);
            number = Number(number);
            break;
          }
        }

        messages.push(data.substr(0, number));
        data = data.substr(number);
      } while (data !== "");

      return messages;
    };

    PhotonPeer.prototype._onMessage = function (message) {
      if (message.substr(0, 3) == "~j~") {
        this._onMessageReceived(JSON.parse(message.substr(3)));
      } else {
        if (!this._sessionid) {
          this._sessionid = message;

          this._onConnect();
        } else {
          this._onMessageReceived(message);
        }
      }
    };

    PhotonPeer.prototype.resetKeepAlive = function () {
      var _this = this; //this._logger.debug("reset kep alive: ", Date.now());


      clearTimeout(this.keepAliveTimer);

      if (this.keepAliveTimeoutMs >= 1000) {
        this.keepAliveTimer = setTimeout(function () {
          // send time from peer creation to avoid timestamp overflow on server side
          _this._send((_a = {}, _a["irq"] = 1, _a["vals"] = [1, Date.now() - _this.initTimestamp], _a), true);

          var _a;
        }, this.keepAliveTimeoutMs);
      }
    };

    PhotonPeer.prototype._send = function (data, checkConnected) {
      if (checkConnected === void 0) {
        checkConnected = false;
      }

      var message = this._encode(data);

      if (this._isConnected && !this._isClosing) {
        this.resetKeepAlive(); //this._logger.debug("_send:", message);

        this._socket.send(message);
      } else {
        if (!checkConnected) {
          this._logger.exception(203, 'PhotonPeer[_send] - Operation', data.req, '- failed, "isConnected" is', this._isConnected, ', "isClosing" is', this._isClosing, "!");
        }
      }
    };

    PhotonPeer.prototype._onMessageReceived = function (message) {
      if (typeof message === "object") {
        this._logger.debug("PhotonPeer[_onMessageReceived] - Socket received message:", message); // copy protocol 'message' protocol object to runtime object: the latter's properties can be renamed by minifier.


        var msgJSON = {
          err: message["err"],
          msg: message["msg"],
          vals: message["vals"],
          res: message["res"],
          evt: message["evt"],
          irs: message["irs"]
        };
        var msgErr = msgJSON.err ? msgJSON.err : 0;
        msgJSON.vals = msgJSON.vals !== undefined ? msgJSON.vals : [];

        if (msgJSON.vals.length > 0) {
          msgJSON.vals = this._parseMessageValuesArrayToJSON(msgJSON.vals);
        }

        if (msgJSON.res !== undefined) {
          var code = parseInt(msgJSON.res);

          this._parseResponse(code, msgJSON);
        } else {
          if (msgJSON.evt !== undefined) {
            var code = parseInt(msgJSON.evt);

            this._parseEvent(code, msgJSON);
          } else {
            if (msgJSON.irs !== undefined) {
              var code = parseInt(msgJSON.irs);

              this._parseInternalResponse(code, msgJSON);
            } else {
              this._logger.exception(204, "PhotonPeer[_onMessageReceived] - Received undefined message type:", msgJSON);
            }
          }
        }
      }
    };

    PhotonPeer.prototype._parseMessageValuesArrayToJSON = function (vals) {
      var parsedJSON = {};

      if (Exitgames.Common.Util.isArray(vals)) {
        if (vals.length % 2 == 0) {
          var toParse = vals,
              key,
              value;

          while (toParse.length > 0) {
            key = toParse.shift() + "";
            value = toParse.shift();
            parsedJSON[key] = value;
          }
        } else {
          this._logger.exception(205, "PhotonPeer[_parseMessageValuesToJSON] - Received invalid values array:", vals);
        }
      }

      return parsedJSON;
    };

    PhotonPeer.prototype._parseEvent = function (code, event) {
      switch (code) {
        default:
          this._dispatchEvent(code, {
            vals: event.vals
          });

          break;
      }
    };

    PhotonPeer.prototype._parseResponse = function (code, response) {
      switch (code) {
        default:
          this._dispatchResponse(code, {
            errCode: response.err,
            errMsg: response.msg,
            vals: response.vals
          });

          break;
      }
    };

    PhotonPeer.prototype._parseInternalResponse = function (code, response) {
      this.lastRtt = Date.now() - this.initTimestamp - response.vals[1];

      this._logger.debug("internal response:", response);
    };

    PhotonPeer.prototype._onConnecting = function () {
      this._logger.debug("PhotonPeer[_onConnecting] - Starts connecting", this.url, '..., raising "connecting" event ...');

      this._isConnecting = true;

      this._dispatchPeerStatus(PhotonPeer.StatusCodes.connecting);

      this.resetKeepAlive();
    };

    PhotonPeer.prototype._onConnect = function () {
      this._logger.debug('PhotonPeer[_onConnect] - Connected successfully! Raising "connect" event ...');

      this._isConnecting = false;
      this._isConnected = true;

      this._dispatchPeerStatus(PhotonPeer.StatusCodes.connect);

      this.resetKeepAlive();
    };

    PhotonPeer.prototype._onConnectFailed = function (evt) {
      this._logger.error('PhotonPeer[_onConnectFailed] - Socket connection could not be created:', this.url, this.subprotocol, 'Wrong host or port?\n Raising "connectFailed event ...');

      this._isConnecting = this._isConnected = false;

      this._dispatchPeerStatus(PhotonPeer.StatusCodes.connectFailed);
    };

    PhotonPeer.prototype._onDisconnect = function () {
      var wasConnected = this._isConnected;
      var wasClosing = this._isClosing;

      this._logger.debug('PhotonPeer[_onDisconnect] - Socket closed, raising "disconnect" event ...');

      this._isClosing = this._isConnected = this._isConnecting = false;

      if (wasConnected) {
        if (wasClosing) {
          this._dispatchPeerStatus(PhotonPeer.StatusCodes.disconnect);
        } else {
          this._dispatchPeerStatus(PhotonPeer.StatusCodes.connectClosed);
        }
      }
    };

    PhotonPeer.prototype._onTimeout = function () {
      this._logger.debug('PhotonPeer[_onTimeout] - Client timed out! Raising "timeout" event ...');

      this._dispatchPeerStatus(PhotonPeer.StatusCodes.timeout);
    };

    PhotonPeer.prototype._onError = function (ev) {
      this._logger.error("PhotonPeer[_onError] - Connection error:", arguments[0]);

      this._isConnecting = this._isConnected = this._isClosing = false;

      this._dispatchPeerStatus(PhotonPeer.StatusCodes.error);
    };

    PhotonPeer.prototype._addListener = function (listeners, code, callback) {
      if (!(code in listeners)) {
        listeners[code] = [];
      }

      if (callback && typeof callback === "function") {
        this._logger.debug('PhotonPeer[_addListener] - Adding listener for event', code);

        listeners[code].push(callback);
      } else {
        this._logger.error('PhotonPeer[_addListener] - Listener', code, 'is not a function but of type', typeof callback, '. No listener added!');
      }

      return this;
    };

    PhotonPeer.prototype._dispatch = function (listeners, code, args, debugType) {
      if (code in listeners) {
        var events = listeners[code];

        for (var i = 0, l = events.length; i < l; i++) {
          if (!Exitgames.Common.Util.isArray(args)) {
            args = [args];
          }

          events[i].apply(this, args === undefined ? [] : args);
        }

        return true;
      } else {
        return false;
      }
    };

    PhotonPeer.prototype._dispatchPeerStatus = function (code) {
      if (!this._dispatch(this._peerStatusListeners, code, undefined, "peerStatus")) {
        this._logger.warn('PhotonPeer[_dispatchPeerStatus] - No handler for ', code, 'registered.');
      }
    };

    PhotonPeer.prototype._removeListener = function (listeners, code, callback) {
      if (code in listeners) {
        var prevLenght = listeners[code].length;
        listeners[code] = listeners[code].filter(function (x) {
          return x != callback;
        });

        this._logger.debug('PhotonPeer[_removeListener] - Removing listener for event', code, "removed:", prevLenght - listeners[code].length);
      }

      return this;
    };

    PhotonPeer.prototype._removeListenersForCode = function (listeners, code) {
      this._logger.debug('PhotonPeer[_removeListenersForCode] - Removing all listeners for event', code);

      if (code in listeners) {
        listeners[code] = [];
      }

      return this;
    };
    /**
        @summary Enum for peer status codes.
        Use to subscribe to status changes.
        @member Photon.PhotonPeer.StatusCodes
        @readonly
        @property {string} connecting Is connecting to server.
        @property {string} connect Connected to server.
        @property {string} connectFailed Connection to server failed.
        @property {string} disconnect Disconnected from server.
        @property {string} connectClosed Connection closed by server.
        @property {string} error General connection error.
        @property {string} timeout Disconnected from server for timeout.
    */


    PhotonPeer.StatusCodes = {
      connecting: "connecting",
      connect: "connect",
      connectFailed: "connectFailed",
      disconnect: "disconnect",
      connectClosed: "connectClosed",
      error: "error",
      timeout: "timeout"
    };
    return PhotonPeer;
  }();

  Photon.PhotonPeer = PhotonPeer;
})(Photon || (Photon = {}));
/**
    Photon Load Balancing API
    @namespace Photon.LoadBalancing
*/


var Photon;

(function (Photon) {
  var LoadBalancing;

  (function (LoadBalancing) {
    var WebFlags = {
      HttpForward: 0x01,
      SendAuthCookie: 0x02,
      SendSync: 0x04,
      SendState: 0x08
    };

    var Actor =
    /** @class */
    function () {
      /**
          @classdesc Summarizes a "player" within a room, identified (in that room) by ID (or "actorNr"). Extend to implement custom logic.
          @constructor Photon.LoadBalancing.Actor
          @param {string} name Actor name.
          @param {number} actorNr Actor ID.
          @param {boolean} isLocal Actor is local.
      */
      function Actor(name, actorNr, isLocal) {
        this.name = name;
        this.actorNr = actorNr;
        this.isLocal = isLocal;
        this.customProperties = {};
        this.suspended = false;
      } // public getLoadBalancingClient() { return this.loadBalancingClient; }

      /**
          @summary Actor's room: the room initialized by client for create room operation or room client connected to.
          @method Photon.LoadBalancing.Actor#getRoom
          @returns {Photon.LoadBalancing.Room} Actor's room.
      */


      Actor.prototype.getRoom = function () {
        return this.loadBalancingClient.myRoom();
      };
      /**
          @summary Raises game custom event.
          @method Photon.LoadBalancing.Actor#raiseEvent
          @param {number} eventCode Identifies this type of event (and the content). Your game's event codes can start with 0.
          @param {object} [data] Custom data you want to send along (use null, if none).
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {number} [options.interestGroup] The ID of the interest group this event goes to (exclusively).
          @property {Photon.LoadBalancing.Constants.EventCaching} [options.cache=EventCaching.DoNotCache] Events can be cached (merged and removed) for players joining later on.
          @property {Photon.LoadBalancing.Constants.ReceiverGroup} [options.receivers=ReceiverGroup.Others] Defines to which group of players the event is passed on.
          @property {number[]} [options.targetActors] Defines the target players who should receive the event (use only for small target groups).
          @property {boolean} [options.webForward=false] Forward to web hook.
      */


      Actor.prototype.raiseEvent = function (eventCode, data, options) {
        if (this.loadBalancingClient) {
          this.loadBalancingClient.raiseEvent(eventCode, data, options);
        }
      };
      /**
          @summary Sets actor name.
          @method Photon.LoadBalancing.Actor#setName
          @param {string} name Actor name.
      */


      Actor.prototype.setName = function (name) {
        this.name = name;
      }; // properties methods

      /**
          @summary Called on every actor properties update: properties set by client, poperties update from server.
          Override to update custom room state.
          @method Photon.LoadBalancing.Actor#onPropertiesChange
          @param {object} changedCustomProps Key-value map of changed properties.
          @param {boolean} [byClient] true if properties set by client.
      */


      Actor.prototype.onPropertiesChange = function (changedCustomProps, byClient) {};
      /**
          @summary Returns custom property by name.
          @method Photon.LoadBalancing.Actor#getCustomProperty
          @param {string} name Name of the property.
          @returns {object} Property or undefined if property not found.
      */


      Actor.prototype.getCustomProperty = function (name) {
        return this.customProperties[name];
      };
      /**
          @summary Returns custom property by name or default value.
          @method Photon.LoadBalancing.Actor#getCustomPropertyOrElse
          @param {string} name Name of the property.
          @param {object} defaultValue Default property value.
          @returns {object} Property or default value if property not found.
      */


      Actor.prototype.getCustomPropertyOrElse = function (name, defaultValue) {
        return Exitgames.Common.Util.getPropertyOrElse(this.customProperties, name, defaultValue);
      };
      /**
          @summary Sets custom property.
          @method Photon.LoadBalancing.Actor#setCustomProperty
          @param {string} name Name of the property.
          @param {object} value Property value.
          @param {boolean} [webForward=false] Forward to web hook.
          @param {object} [expectedValue] Property value expected when update occurs. (CAS : "Check And Swap")
      */


      Actor.prototype.setCustomProperty = function (name, value, webForward, expectedValue) {
        if (webForward === void 0) {
          webForward = false;
        }

        this.customProperties[name] = value;
        var props = {};
        props[name] = value;
        var expectedProps;

        if (expectedValue != undefined) {
          expectedProps = (_a = {}, _a[name] = expectedValue, _a);
        }

        if (this.loadBalancingClient && this.loadBalancingClient.isJoinedToRoom()) {
          this.loadBalancingClient._setPropertiesOfActor(this.actorNr, props, webForward, expectedProps);
        }

        this.onPropertiesChange(props, true);

        var _a;
      };
      /**
          @summary Sets custom properties.
          @method Photon.LoadBalancing.Actor#setCustomProperties
          @param {object} properties Table of properties to set.
          @param {boolean} [webForward=false] Forward to web hook.
          @param {object} [expectedProperties] Table of properties expected when update occurs. (CAS : "Check And Swap")
      */


      Actor.prototype.setCustomProperties = function (properties, webForward, expectedProperties) {
        if (webForward === void 0) {
          webForward = false;
        }

        var props = {};

        for (var name in properties) {
          this.customProperties[name] = properties[name];
          props[name] = properties[name];
        }

        if (this.loadBalancingClient && this.loadBalancingClient.isJoinedToRoom()) {
          this.loadBalancingClient._setPropertiesOfActor(this.actorNr, props, webForward, expectedProperties);
        }

        this.onPropertiesChange(props, true);
      };
      /**
          @summary Returns true if actor is in suspended state.
          @returns {boolean} Actor suspend state.
      **/


      Actor.prototype.isSuspended = function () {
        return this.suspended;
      };

      Actor.prototype._getAllProperties = function () {
        var p = {};
        p[LoadBalancing.Constants.ActorProperties.PlayerName] = this.name;

        for (var k in this.customProperties) {
          p[k] = this.customProperties[k];
        }

        return p;
      };

      Actor.prototype._setLBC = function (lbc) {
        this.loadBalancingClient = lbc;
      };

      Actor.prototype._updateFromResponse = function (vals) {
        this.actorNr = vals[LoadBalancing.Constants.ParameterCode.ActorNr];
        var props = vals[LoadBalancing.Constants.ParameterCode.PlayerProperties];

        if (props !== undefined) {
          var name = props[LoadBalancing.Constants.ActorProperties.PlayerName];

          if (name !== undefined) {
            this.name = name;
          }

          this._updateCustomProperties(props);
        }
      };

      Actor.prototype._updateMyActorFromResponse = function (vals) {
        this.actorNr = vals[LoadBalancing.Constants.ParameterCode.ActorNr];
      };

      Actor.prototype._updateCustomProperties = function (vals) {
        for (var p in vals) {
          this.customProperties[p] = vals[p];
        }

        this.onPropertiesChange(vals, false);
      };

      Actor.prototype._setSuspended = function (s) {
        this.suspended = s;
      };

      Actor._getActorNrFromResponse = function (vals) {
        return vals[LoadBalancing.Constants.ParameterCode.ActorNr];
      };

      return Actor;
    }();

    LoadBalancing.Actor = Actor; // readonly room info from server

    var RoomInfo =
    /** @class */
    function () {
      /**
          @classdesc Used for Room listings of the lobby (not yet joining). Offers the basic info about a room: name, player counts, properties, etc.
          @constructor Photon.LoadBalancing.RoomInfo
          @param {string} name Room name.
      */
      function RoomInfo(name) {
        // standard room properties
        // TODO: access via getters

        /**
            @summary Room name.
            @member Photon.LoadBalancing.RoomInfo#name
            @type {string}
            @readonly
        */
        this.name = "";
        /**
            @summary Joined room Game server address.
            @member Photon.LoadBalancing.RoomInfo#address
            @type {string}
            @readonly
        */

        this.address = "";
        /**
            @summary Max players before room is considered full.
            @member Photon.LoadBalancing.RoomInfo#maxPlayers
            @type {number}
            @readonly
        */

        this.maxPlayers = 0;
        /**
            @summary Shows the room in the lobby's room list. Makes sense only for local room.
            @member Photon.LoadBalancing.RoomInfo#isVisible
            @type {boolean}
            @readonly
        */

        this.isVisible = true;
        /**
            @summary Defines if this room can be joined.
            @member Photon.LoadBalancing.RoomInfo#isOpen
            @type {boolean}
            @readonly
        */

        this.isOpen = true;
        /**
            @summary Count of player currently in room.
            @member Photon.LoadBalancing.RoomInfo#playerCount
            @type {number}
            @readonly
        */

        this.playerCount = 0;
        /**
            @summary Time in ms indicating how long the room instance will be keeped alive in the server room cache after all clients have left the room.
            @member Photon.LoadBalancing.RoomInfo#emptyRoomLiveTime
            @type {number}
            @readonly
        */

        this.emptyRoomLiveTime = 0;
        /**
            @summary Time in ms indicating how long suspended player will be kept in the room.
            @member Photon.LoadBalancing.RoomInfo#suspendedPlayerLiveTime
            @type {number}
            @readonly
        **/

        this.suspendedPlayerLiveTime = 0;
        /**
            @summary Room removed (in room list updates).
            @member Photon.LoadBalancing.RoomInfo#removed
            @type {boolean}
            @readonly
        */

        this.removed = false; // TODO: does end user need this?

        this.cleanupCacheOnLeave = false;
        /**
            @summary Master client set by game server. Note: Not all servers support this currently. If the value of the property is 0, use lowest actorid instead.
            @member Photon.LoadBalancing.RoomInfo#masterClientId
            @type { number }
            @readonly
        */

        this.masterClientId = 0; // custom properties

        this._customProperties = {};
        this._propsListedInLobby = [];
        this.name = name;
      }
      /**
          @summary Called on every room properties update: room creation, properties set by client, poperties update from server.
          Override to update custom room state.
          @method Photon.LoadBalancing.RoomInfo#onPropertiesChange
          @param {object} changedCustomProps Key-value map of changed properties.
          @param {boolean} [byClient] true if called on room creation or properties set by client.
      */


      RoomInfo.prototype.onPropertiesChange = function (changedCustomProps, byClient) {};
      /**
          @summary Returns custom property by name.
          @method Photon.LoadBalancing.RoomInfo#getCustomProperty
          @param {string} name Name of the property.
          @returns {object} Property or undefined if property not found.
      */


      RoomInfo.prototype.getCustomProperty = function (prop) {
        return this._customProperties[prop];
      };
      /**
          @summary Returns custom property by name or default value.
          @method Photon.LoadBalancing.RoomInfo#getCustomPropertyOrElse
          @param {string} name Name of the property.
          @param {object} defaultValue Default property value.
          @returns {object} Property or default value if property not found.
      */


      RoomInfo.prototype.getCustomPropertyOrElse = function (prop, defaultValue) {
        return Exitgames.Common.Util.getPropertyOrElse(this._customProperties, prop, defaultValue);
      };

      RoomInfo.prototype._updateFromMasterResponse = function (vals) {
        this.address = vals[LoadBalancing.Constants.ParameterCode.Address];
        var name = vals[LoadBalancing.Constants.ParameterCode.RoomName];

        if (name) {
          this.name = name;
        }
      };

      RoomInfo.prototype._updateFromProps = function (props) {
        if (props) {
          this.maxPlayers = this.updateIfExists(this.maxPlayers, LoadBalancing.Constants.GameProperties.MaxPlayers, props);
          this.isVisible = this.updateIfExists(this.isVisible, LoadBalancing.Constants.GameProperties.IsVisible, props);
          this.isOpen = this.updateIfExists(this.isOpen, LoadBalancing.Constants.GameProperties.IsOpen, props);
          this.playerCount = this.updateIfExists(this.playerCount, LoadBalancing.Constants.GameProperties.PlayerCount, props);
          this.removed = this.updateIfExists(this.removed, LoadBalancing.Constants.GameProperties.Removed, props);
          this._propsListedInLobby = this.updateIfExists(this._propsListedInLobby, LoadBalancing.Constants.GameProperties.PropsListedInLobby, props);
          this.cleanupCacheOnLeave = this.updateIfExists(this.cleanupCacheOnLeave, LoadBalancing.Constants.GameProperties.CleanupCacheOnLeave, props);
          this.masterClientId = this.updateIfExists(this.masterClientId, LoadBalancing.Constants.GameProperties.MasterClientId, props);
          this.emptyRoomLiveTime = this.updateIfExists(this.emptyRoomLiveTime, LoadBalancing.Constants.GameProperties.EmptyRoomTtl, props);
          this.suspendedPlayerLiveTime = this.updateIfExists(this.suspendedPlayerLiveTime, LoadBalancing.Constants.GameProperties.PlayerTtl, props);
          var changedProps = {};

          for (var k in props) {
            if (parseInt(k).toString() != k) {
              if (this._customProperties[k] !== props[k]) {
                this._customProperties[k] = props[k];
                changedProps[k] = props[k];
              }
            }
          }

          this.onPropertiesChange(changedProps, false);
        }
      };

      RoomInfo.prototype._updateFromEvent = function (payload) {
        if (payload) {
          this.masterClientId = this.updateIfExists(this.masterClientId, LoadBalancing.Constants.ParameterCode.MasterClientId, payload);
        }
      };

      RoomInfo.prototype.updateIfExists = function (prevValue, code, props) {
        if (props.hasOwnProperty(code)) {
          return props[code];
        } else {
          return prevValue;
        }
      };

      return RoomInfo;
    }();

    LoadBalancing.RoomInfo = RoomInfo; // joined room with writable properties

    var Room =
    /** @class */
    function (_super) {
      __extends(Room, _super);
      /**
          @classdesc Represents a room client joins or is joined to. Extend to implement custom logic. Custom properties can be set via setCustomProperty() while being in the room.
          @mixes Photon.LoadBalancing.RoomInfo
          @constructor Photon.LoadBalancing.Room
          @param {string} name Room name.
      */


      function Room(name) {
        return _super.call(this, name) || this;
      } // room created from client via factory always has this field set
      //public getLoadBalancingClient() { return this.loadBalancingClient; }

      /**
          @summary Sets custom property
          @method Photon.LoadBalancing.Room#setCustomProperty
          @param {string} name Name of the property.
          @param {object} value Property value.
          @param {boolean} [webForward=false] Forward to web hook.
          @param {object} [expectedValue] Property value expected when update occurs. (CAS : "Check And Swap")
      */


      Room.prototype.setCustomProperty = function (name, value, webForward, expectedValue) {
        if (webForward === void 0) {
          webForward = false;
        }

        this._customProperties[name] = value;
        var props = {};
        props[name] = value;
        var expectedProps;

        if (expectedValue != undefined) {
          expectedProps = (_a = {}, _a[name] = expectedValue, _a);
        }

        if (this.loadBalancingClient && this.loadBalancingClient.isJoinedToRoom()) {
          this.loadBalancingClient._setPropertiesOfRoom(props, webForward, expectedProps);
        }

        this.onPropertiesChange(props, true);

        var _a;
      };
      /**
          @summary Sets custom property
          @method Photon.LoadBalancing.Room#setCustomProperties
          @param {object} properties Table of properties to set.
          @param {boolean} [webForward=false] Forward to web hook.
          @param {object} [expectedProperties] Table of properties expected when update occurs. (CAS : "Check And Swap")
      */


      Room.prototype.setCustomProperties = function (properties, webForward, expectedProperties) {
        if (webForward === void 0) {
          webForward = false;
        }

        var props = {};

        for (var name in properties) {
          this._customProperties[name] = properties[name];
          props[name] = properties[name];
        }

        if (this.loadBalancingClient && this.loadBalancingClient.isJoinedToRoom()) {
          this.loadBalancingClient._setPropertiesOfRoom(props, webForward, expectedProperties);
        }

        this.onPropertiesChange(props, true);
      };

      Room.prototype.setProp = function (name, value) {
        if (this.loadBalancingClient && this.loadBalancingClient.isJoinedToRoom()) {
          var props = {};
          props[name] = value;

          this.loadBalancingClient._setPropertiesOfRoom(props, false, undefined);
        }
      };
      /**
       * @summary Sets rooms visibility in the lobby's room list.
       * @method Photon.LoadBalancing.Room#setIsVisible
       * @param {boolean} isVisible New visibility value.
      */


      Room.prototype.setIsVisible = function (isVisible) {
        if (this.isVisible != isVisible) {
          this.isVisible = isVisible;
          this.setProp(LoadBalancing.Constants.GameProperties.IsVisible, isVisible);
        }
      };
      /**
       * @summary Sets if this room can be joined.
       * @method Photon.LoadBalancing.Room#setIsOpen
       * @param {boolean} isOpen New property value.
      */


      Room.prototype.setIsOpen = function (isOpen) {
        if (this.isOpen != isOpen) {
          this.isOpen = isOpen;
          this.setProp(LoadBalancing.Constants.GameProperties.IsOpen, isOpen);
        }
      };
      /**
       * @summary Sets max players before room is considered full.
       * @method Photon.LoadBalancing.Room#setMaxPlayers
       * @param {number} maxPlayers New max players value.
      */


      Room.prototype.setMaxPlayers = function (maxPlayers) {
        if (this.maxPlayers != maxPlayers) {
          this.maxPlayers = maxPlayers;
          this.setProp(LoadBalancing.Constants.GameProperties.MaxPlayers, maxPlayers);
        }
      };
      /**
       * @summary Sets room live time in the server room cache after all clients have left the room.
       * @method Photon.LoadBalancing.Room#setEmptyRoomLiveTime
       * @param {number} emptyRoomLiveTime New live time value in ms.
      */


      Room.prototype.setEmptyRoomLiveTime = function (emptyRoomLiveTime) {
        if (this.emptyRoomLiveTime != emptyRoomLiveTime) {
          this.emptyRoomLiveTime = emptyRoomLiveTime;
          this.setProp(LoadBalancing.Constants.GameProperties.EmptyRoomTtl, emptyRoomLiveTime);
        }
      };
      /**
       * @summary Sets time in ms indicating how long suspended player will be kept in the room.
       * @method Photon.LoadBalancing.Room#setSuspendedPlayerLiveTime
       * @param {number} suspendedPlayerLiveTime New live time value in ms.
      */


      Room.prototype.setSuspendedPlayerLiveTime = function (suspendedPlayerLiveTime) {
        if (this.suspendedPlayerLiveTime != suspendedPlayerLiveTime) {
          this.suspendedPlayerLiveTime = suspendedPlayerLiveTime;
          this.setProp(LoadBalancing.Constants.GameProperties.PlayerTtl, suspendedPlayerLiveTime);
        }
      };
      /**
       * @summary Sets expected server plugins.
       * @method Photon.LoadBalancing.Room#setPlugins
       * @param {string[]} plugins New plugins list.
      */


      Room.prototype.setPlugins = function (plugins) {
        this.plugins = plugins;
      };
      /**
          @summary Sets list of the room properties to pass to the RoomInfo list in a lobby.
          @method Photon.LoadBalancing.Room#setPropsListedInLobby
          @param {string[]} props Array of properties names.
      */


      Room.prototype.setPropsListedInLobby = function (props) {
        this._propsListedInLobby = props;
      };

      Room.prototype._setLBC = function (lbc) {
        this.loadBalancingClient = lbc;
      };

      return Room;
    }(RoomInfo);

    LoadBalancing.Room = Room;

    var LoadBalancingClient =
    /** @class */
    function () {
      /**
          @classdesc Implements the Photon LoadBalancing workflow. This class should be extended to handle system or custom events and operation responses.
          @constructor Photon.LoadBalancing.LoadBalancingClient
          @param {Photon.ConnectionProtocol} protocol Connecton protocol.
          @param {string} appId Cloud application ID.
          @param {string} appVersion Cloud application version.
      */
      function LoadBalancingClient(protocol, appId, appVersion) {
        this.appId = appId;
        this.appVersion = appVersion; // protected

        this.autoJoinLobby = true; // hardcoded behaviour; inheritor class can override this
        // options mainly keep state between servers
        // set / cleared in connectToNameServer()(connectToRegionMaster()), connect()
        // lobbyName and lobbyType passed to JoinLobby operation (we don't have separate JoinLobby operation and set them in connect())

        this.connectOptions = {}; // shares lobby info between Master and Game CreateGame calls (createRoomInternal)

        this.createRoomOptions = {}; // shares options between Master and Game JoinGame operations

        this.joinRoomOptions = {};
        this.roomInfos = new Array();
        this.roomInfosDict = {}; // 'by name' access support

        this.actors = {};
        this.actorsArray = []; // actors 'at index' access support (Scirra/Costruct 2)

        this.lowestActorId = 0; // master client support

        this.userAuthType = LoadBalancing.Constants.CustomAuthenticationType.None;
        this.userAuthParameters = "";
        this.userAuthData = "";
        this.lobbyStatsRequestList = new Array(); // protected

        this.state = LoadBalancingClient.State.Uninitialized;
        this.logger = new Exitgames.Common.Logger("Client:");
        this.validNextState = {};
        var serverAddress = "";

        if (typeof protocol == "number") {
          this.connectionProtocol = protocol;

          switch (protocol) {
            case Photon.ConnectionProtocol.Ws:
              this.masterServerAddress = "ws://app-eu.exitgamescloud.com:9090";
              this.nameServerAddress = "ws://ns.exitgames.com:9093";
              break;

            case Photon.ConnectionProtocol.Wss:
              this.masterServerAddress = "wss://app-eu.exitgamescloud.com:19090";
              this.nameServerAddress = "wss://ns.exitgames.com:19093";
              break;

            default:
              var s0 = "wrong_protocol_error";
              this.masterServerAddress = s0;
              this.nameServerAddress = s0;
              this.logger.error("Wrong protocol: ", protocol);
              break;
          }
        } else if (typeof protocol == "string") {
          this.connectionProtocol = Photon.ConnectionProtocol.Ws;
          var s = protocol;
          this.masterServerAddress = s;
          this.nameServerAddress = s;
        } else {
          this.connectionProtocol = Photon.ConnectionProtocol.Ws;
          var s1 = "wrong_protocol_type_error";
          this.masterServerAddress = s1;
          this.nameServerAddress = s1;
          this.logger.error("Wrong protocol type: ", typeof protocol);
        }

        this.initValidNextState();
        this.currentRoom = this.roomFactoryInternal("");
        this._myActor = this.actorFactoryInternal("", -1, true);
        this.addActor(this._myActor);
      } // override to handle system events:

      /**
          @summary Called on client state change. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onStateChange
          @param {Photon.LoadBalancing.LoadBalancingClient.State} state New client state.
      */


      LoadBalancingClient.prototype.onStateChange = function (state) {};
      /**
          @summary Called if client error occures. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onError
          @param {Photon.LoadBalancing.LoadBalancingClient.PeerErrorCode} errorCode Client error code.
          @param {string} errorMsg Error message.
      */


      LoadBalancingClient.prototype.onError = function (errorCode, errorMsg) {};
      /**
          @summary Called on operation response. Override if need custom workflow or response error handling.
          @method Photon.LoadBalancing.LoadBalancingClient#onOperationResponse
          @param {number} errorCode Server error code.
          @param {string} errorMsg Error message.
          @param {number} code Operation code.
          @param {object} content Operation response content.
      */


      LoadBalancingClient.prototype.onOperationResponse = function (errorCode, errorMsg, code, content) {};
      /**
          @summary Called on custom event. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onEvent
          @param {number} code Event code.
          @param {object} content Event content.
          @param {number} actorNr Actor ID event raised by.
      */


      LoadBalancingClient.prototype.onEvent = function (code, content, actorNr) {};
      /**
          @summary Called on room list received from Master server (on connection). Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onRoomList
          @param {{@link Photon.LoadBalancing.RoomInfo}[]} rooms Room list.
      */


      LoadBalancingClient.prototype.onRoomList = function (rooms) {};
      /**
          @summary Called on room list updates received from Master server. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onRoomListUpdate
          @param {{@link Photon.LoadBalancing.RoomInfo}[]} rooms Updated room list.
          @param {{@link Photon.LoadBalancing.RoomInfo}[]} roomsUpdated Rooms whose properties were changed.
          @param {{@link Photon.LoadBalancing.RoomInfo}[]} roomsAdded New rooms in list.
          @param {{@link Photon.LoadBalancing.RoomInfo}[]} roomsRemoved Rooms removed from list.
      */


      LoadBalancingClient.prototype.onRoomListUpdate = function (rooms, roomsUpdated, roomsAdded, roomsRemoved) {}; // TODO: move to Room? Or remove and use Room.onPropertiesChange only?

      /**
          @summary Called on joined room properties changed event. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onMyRoomPropertiesChange
      */


      LoadBalancingClient.prototype.onMyRoomPropertiesChange = function () {};
      /**
          @summary Called on actor properties changed event. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onActorPropertiesChange
          @param {Photon.LoadBalancing.Actor} actor Actor whose properties were changed.
      */


      LoadBalancingClient.prototype.onActorPropertiesChange = function (actor) {};
      /**
          @summary Called when client joins room. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onJoinRoom
          @param {boolean} createdByMe True if room is created by client.
      */


      LoadBalancingClient.prototype.onJoinRoom = function (createdByMe) {};
      /**
          @summary Called when new actor joins the room client joined to. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onActorJoin
          @param {Photon.LoadBalancing.Actor} actor New actor.
      */


      LoadBalancingClient.prototype.onActorJoin = function (actor) {};
      /**
          @summary Called when actor leaves the room client joined to. Also called for every actor during room cleanup. Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onActorLeave
          @param {Photon.LoadBalancing.Actor} actor Actor left the room.
          @param {boolean} cleanup True if called during room cleanup (e.g. on disconnect).
      */


      LoadBalancingClient.prototype.onActorLeave = function (actor, cleanup) {};
      /**
          @summary Called when actor suspended in the room client joined to.Override to handle it.
          @method Photon.LoadBalancing.LoadBalancingClient#onActorSuspend
          @param {Photon.LoadBalancing.Actor} actor Actor suspended in the room.
      */


      LoadBalancingClient.prototype.onActorSuspend = function (actor) {};
      /**
          @summary Called when {@link Photon.LoadBalancing.LoadBalancingClient#findFriends findFriends} request completed. <br/>
          Override to handle request results.
          @method Photon.LoadBalancing.LoadBalancingClient#onFindFriendsResult
          @param {number} errorCode Result error code. 0 if request is successful.
          @param {string} errorMsg Error message.
          @param {object} friends Table with actors names as keys and friend statuses as values: {name1: friendStatus1, name2: friendStatus2, ... }.
          @property {object} friendStatus Friend status.
          @property {boolean} friendStatus.online Online status.
          @property {string} friendStatus.roomId Joined room.
      */


      LoadBalancingClient.prototype.onFindFriendsResult = function (errorCode, errorMsg, friends) {};
      /**
          @summary Called when lobbies statistics update received. <br/>
          Update can be automated by set up during {@link Photon.LoadBalancing.LoadBalancingClient#connect connect} or requested explicitly by {@link Photon.LoadBalancing.LoadBalancingClient#requestLobbyStats requestLobbyStats}. <br/>
          Override to handle request results.
          @method Photon.LoadBalancing.LoadBalancingClient#onLobbyStats
          @param {number} errorCode Result error code. 0 if request is successful. For automated updates is always 0.
          @param {string} errorMsg Error message. For automated updates is always empty.
          @param {object[]} lobbies Array of lobbies statistics: [lobbyStats1, lobbyStats1, ... ].
          @property {object} lobbyStats Lobby statistics.
          @property {string} lobbyStats.lobbyName Lobby name.
          @property {number} lobbyStats.lobbyType Lobby type.
          @property {number} lobbyStats.peerCount The number of players in the lobby (on Master, not playing).
          @property {number} lobbyStats.gameCount The number of games in the lobby.
      */


      LoadBalancingClient.prototype.onLobbyStats = function (errorCode, errorMsg, lobbies) {};
      /**
          @summary Called when application statistics update received. <br/>
          Override to handle request results.
          @method Photon.LoadBalancing.LoadBalancingClient#onAppStats
          @param {number} errorCode Result error code. Currently is always 0.
          @param {string} errorMsg Error message. Currently is always empty.
          @param {object} stats Application statistics.
          @property {object} stats Application statistics.
          @property {number} stats.peerCount Count of players currently online on Game servers.
          @property {number} stats.masterPeerCount Count of players on Master server (looking for game).
          @property {number} stats.gameCount Count of games currently in use (includes invisible and full rooms, so it doesn't match lobby list).
      */


      LoadBalancingClient.prototype.onAppStats = function (errorCode, errorMsg, stats) {};
      /**
          @summary Called when {@link Photon.LoadBalancing.LoadBalancingClient#getRegions getRegions} request completed.<br/>
          Override to handle request results.
          @param {number} errorCode Result error code. 0 if request is successful.
          @param {string} errorMsg Error message.
          @param {object} regions Object with region codes as keys and Master servers addresses as values
      */


      LoadBalancingClient.prototype.onGetRegionsResult = function (errorCode, errorMsg, regions) {};
      /**
          Called when {@link Photon.LoadBalancing.LoadBalancingClient#webRpc webRpc} request completed.<br/>
          Override to handle request results.
          @param {number} errorCode Result error code. 0 if request is successful.
          @param {string} message Error message if errorCode ~ = 0 or optional message returned by remote procedure.
          @param {string} uriPath Request path.
          @param {number} resultCode Result code returned by remote procedure.
          @param {object} data Data returned by remote procedure.
      **/


      LoadBalancingClient.prototype.onWebRpcResult = function (errorCode, message, uriPath, resultCode, data) {};
      /**
          @summary Override with creation of custom room (extended from Room): { return new CustomRoom(...); }
          @method Photon.LoadBalancing.LoadBalancingClient#roomFactory
          @param {string} name Room name. Pass to super() in custom actor constructor.
      */


      LoadBalancingClient.prototype.roomFactory = function (name) {
        return new Room(name);
      };
      /**
          @summary Override with creation of custom actor (extended from Actor): { return new CustomActor(...); }
          @method Photon.LoadBalancing.LoadBalancingClient#actorFactory
          @param {string} name Actor name. Pass to super() in custom room constructor.
          @param {number} actorNr Actor ID. Pass to super() in custom room constructor.
          @param {boolean} isLocal Actor is local. Pass to super() in custom room constructor.
      */


      LoadBalancingClient.prototype.actorFactory = function (name, actorNr, isLocal) {
        return new Actor(name, actorNr, isLocal);
      }; //------------------------

      /**
          @summary Returns local actor.
          Client always has local actor even if not joined.
          @method Photon.LoadBalancing.LoadBalancingClient#myActor
          @returns {Photon.LoadBalancing.Actor} Local actor.
      */


      LoadBalancingClient.prototype.myActor = function () {
        return this._myActor;
      };
      /**
          @summary Returns client's room.
          Client always has it's room even if not joined. It's used for room creation operation.
          @method Photon.LoadBalancing.LoadBalancingClient#myRoom
          @returns {Photon.LoadBalancing.Room} Current room.
      */


      LoadBalancingClient.prototype.myRoom = function () {
        return this.currentRoom;
      };
      /**
          @summary Returns actors in room client currently joined including local actor.
          @method Photon.LoadBalancing.LoadBalancingClient#myRoomActors
          @returns {object} actorNr -> {@link Photon.LoadBalancing.Actor} map of actors in room.
      */


      LoadBalancingClient.prototype.myRoomActors = function () {
        return this.actors;
      };
      /**
          @summary Returns numer of actors in room client currently joined including local actor.
          @method Photon.LoadBalancing.LoadBalancingClient#myRoomActorCount
          @returns {number} Number of actors.
      */


      LoadBalancingClient.prototype.myRoomActorCount = function () {
        return this.actorsArray.length;
      };

      LoadBalancingClient.prototype.myRoomActorsArray = function () {
        return this.actorsArray;
      }; // actors 'at index' access support (Scirra/Costruct 2)                

      /**
          @summary Actor number of the player who's the master of this Room. Note: This changes when the current master leaves the room.
          @member Photon.LoadBalancing.RoomInfo#masterClientId
          @type {number}
          @readonly
      */


      LoadBalancingClient.prototype.myRoomMasterActorNr = function () {
        if (this.myRoom().masterClientId) {
          return this.myRoom().masterClientId;
        } else {
          return this.lowestActorId;
        }
      };

      LoadBalancingClient.prototype.lastRtt = function () {
        return this.gamePeer && this.gamePeer.getLastRtt();
      };

      LoadBalancingClient.prototype.roomFactoryInternal = function (name) {
        if (name === void 0) {
          name = "";
        }

        var r = this.roomFactory(name);

        r._setLBC(this);

        return r;
      };

      LoadBalancingClient.prototype.actorFactoryInternal = function (name, actorNr, isLocal) {
        if (name === void 0) {
          name = "";
        }

        if (actorNr === void 0) {
          actorNr = -1;
        }

        if (isLocal === void 0) {
          isLocal = false;
        }

        var a = this.actorFactory(name, actorNr, isLocal);

        a._setLBC(this);

        return a;
      };
      /**
          @summary Changes default NameServer address and port before connecting to NameServer.
          @method Photon.LoadBalancing.LoadBalancingClient#setNameServerAddress
          @param {string} address New address and port.
      */


      LoadBalancingClient.prototype.setNameServerAddress = function (address) {
        this.nameServerAddress = address;
      };
      /**
          @summary Returns current NameServer address.
          @method Photon.LoadBalancing.LoadBalancingClient#getNameServerAddress
          @returns {string} NameServer address address.
      */


      LoadBalancingClient.prototype.getNameServerAddress = function () {
        return this.nameServerAddress;
      };
      /**
          @summary Changes default Master server address and port before connecting to Master server.
          @method Photon.LoadBalancing.LoadBalancingClient#setMasterServerAddress
          @param {string} address New address and port.
      */


      LoadBalancingClient.prototype.setMasterServerAddress = function (address) {
        this.masterServerAddress = address;
      };
      /**
          @summary Returns current Master server address.
          @method Photon.LoadBalancing.LoadBalancingClient#getMasterServerAddress
          @returns {string} Master server address.
      */


      LoadBalancingClient.prototype.getMasterServerAddress = function () {
        return this.nameServerAddress;
      };
      /**
          @summary Sets optional user id(required by some cloud services)
          @method Photon.LoadBalancing.LoadBalancingClient#setUserId
          @param {string} userId New user id.
      */


      LoadBalancingClient.prototype.setUserId = function (userId) {
        this.userId = userId;
      };
      /**
          @summary Returns previously set user id.
          @method Photon.LoadBalancing.LoadBalancingClient#getUserId
          @returns {string} User id.
      */


      LoadBalancingClient.prototype.getUserId = function () {
        return this.userId;
      };
      /**
          @summary Enables custom authentication and sets it's parameters.
          @method Photon.LoadBalancing.LoadBalancingClient#setCustomAuthentication
          @param {string} authParameters This string must contain any (http get) parameters expected by the used authentication service.
          @param {Photon.LoadBalancing.Constants.CustomAuthenticationType} [authType=Photon.LoadBalancing.Constants.CustomAuthenticationType.Custom] The type of custom authentication provider that should be used.
          @param {any} [authData] The data to be passed-on to the auth service via POST. String passed as is, objects as application/json
      */


      LoadBalancingClient.prototype.setCustomAuthentication = function (authParameters, authType, authData) {
        if (authType === void 0) {
          authType = Photon.LoadBalancing.Constants.CustomAuthenticationType.Custom;
        }

        this.userAuthType = authType;
        this.userAuthParameters = authParameters;
        this.userAuthData = authData;
      }; // TODO: remove backward compatibility (deprecated)

      /**
          @summary Starts connection to Master server.
          @method Photon.LoadBalancing.LoadBalancingClient#connect
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {boolean} [options.keepMasterConnection=false] Don't disconnect from Master server after joining room.
          @property {string} [options.lobbyName] Name of the lobby connect to.
          @property {Photon.LoadBalancing.Constants.LobbyType} [options.lobbyType=LobbyType.Default] Type of the lobby.
          @property {boolean} [options.lobbyStats=false] If true, Master server will be sending lobbies statistics periodically.<br/> Override {@link Photon.LoadBalancing.LoadBalancingClient#onLobbyStats onLobbyStats} to handle request results.<br/>Alternatively, {@link Photon.LoadBalancing.LoadBalancingClient#requestLobbyStats requestLobbyStats} can be used.
          @returns {boolean} True if current client state allows connection.
      */


      LoadBalancingClient.prototype.connect = function (options) {
        // backward compatibility
        if (typeof options === "boolean") {
          if (options) {
            options = {
              keepMasterConnection: true
            };
          } else {
            options = {
              keepMasterConnection: false
            };
          }
        } //


        if (!options) {
          options = {};
        }

        if (this.checkNextState(LoadBalancingClient.State.ConnectingToMasterserver, true)) {
          this.changeState(LoadBalancingClient.State.ConnectingToMasterserver);
          this.logger.info("Connecting to Master", this.masterServerAddress); // make options copy to protect

          this.connectOptions = {};

          for (var k in options) {
            this.connectOptions[k] = options[k];
          }

          if (this.masterPeer) this.masterPeer.Destroy();
          this.masterPeer = new MasterPeer(this, this.connectionProtocol, this.masterServerAddress, "");
          this.initMasterPeer(this.masterPeer);
          this.masterPeer.connect(this.appId);
          return true;
        } else {
          return false;
        }
      };
      /**
          @summary Starts connection to NameServer.
          @method Photon.LoadBalancing.LoadBalancingClient#connectToNameServer
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {string} [options.region] Don't disconnect from Master server after joining room.
          @property {string} [options.lobbyName] Name of the lobby connect to.
          @property {Photon.LoadBalancing.Constants.LobbyType} [options.lobbyType=LobbyType.Default] Type of the lobby.
          @property {boolean} [options.lobbyStats=false] If true, Master server will be sending lobbies statistics periodically.<br/> Override {@link Photon.LoadBalancing.LoadBalancingClient#onLobbyStats onLobbyStats} to handle request results.<br/>Alternatively, {@link Photon.LoadBalancing.LoadBalancingClient#requestLobbyStats requestLobbyStats} can be used.
          @property {boolean} [options.keepMasterConnection=false] Don't disconnect from Master server after joining room.
      */


      LoadBalancingClient.prototype.connectToNameServer = function (options) {
        if (!options) {
          options = {};
        }

        if (this.checkNextState(LoadBalancingClient.State.ConnectingToNameServer, true)) {
          this.changeState(LoadBalancingClient.State.ConnectingToNameServer);
          this.logger.info("Connecting to NameServer", this.nameServerAddress); // make options copy to protect

          this.connectOptions = {};

          for (var k in options) {
            this.connectOptions[k] = options[k];
          }

          if (this.nameServerPeer) this.nameServerPeer.Destroy();
          this.nameServerPeer = new NameServerPeer(this, this.connectionProtocol, this.nameServerAddress, "");
          this.initNameServerPeer(this.nameServerPeer);
          this.nameServerPeer.connect(this.appId);
          return true;
        } else {
          return false;
        }
      };

      LoadBalancingClient.prototype.fillCreateRoomOptions = function (op, options) {
        options = options || {};
        var gp = {};
        if (options.isVisible !== undefined) gp[LoadBalancing.Constants.GameProperties.IsVisible] = options.isVisible;
        if (options.isOpen !== undefined) gp[LoadBalancing.Constants.GameProperties.IsOpen] = options.isOpen;
        if (options.maxPlayers !== undefined) gp[LoadBalancing.Constants.GameProperties.MaxPlayers] = options.maxPlayers;
        if (options.propsListedInLobby !== undefined) gp[LoadBalancing.Constants.GameProperties.PropsListedInLobby] = Photon.TypeExt.String(options.propsListedInLobby);

        if (options.customGameProperties !== undefined) {
          for (var p in options.customGameProperties) {
            gp[p] = options.customGameProperties[p];
          }
        }

        op.push(LoadBalancing.Constants.ParameterCode.GameProperties, gp);
        op.push(LoadBalancing.Constants.ParameterCode.CleanupCacheOnLeave, true); //TODO: make this optional?

        op.push(LoadBalancing.Constants.ParameterCode.Broadcast, true); //TODO: make this optional?

        if (options.emptyRoomLiveTime !== undefined) op.push(LoadBalancing.Constants.ParameterCode.EmptyRoomTTL, Photon.TypeExt.Int(options.emptyRoomLiveTime));
        if (options.suspendedPlayerLiveTime !== undefined) op.push(LoadBalancing.Constants.ParameterCode.PlayerTTL, Photon.TypeExt.Int(options.suspendedPlayerLiveTime));
        if (options.plugins !== undefined) op.push(LoadBalancing.Constants.ParameterCode.Plugins, options.plugins); // shold be always set to true by client

        op.push(LoadBalancing.Constants.ParameterCode.CheckUserOnJoin, true);

        if (options.lobbyName) {
          op.push(LoadBalancing.Constants.ParameterCode.LobbyName);
          op.push(options.lobbyName);

          if (options.lobbyType != undefined) {
            op.push(LoadBalancing.Constants.ParameterCode.LobbyType);
            op.push(options.lobbyType);
          }
        }
      };
      /**
          @summary Creates a new room on the server (or fails when the name is already taken). Takes parameters (except name) for new room from myRoom() object. Set them before call.
          @method Photon.LoadBalancing.LoadBalancingClient#createRoomFromMy
          @param {string} [roomName] New room name. Assigned automatically by server if empty or not specified.
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {string} [options.lobbyName] Name of the lobby to create room in.
          @property {Photon.LoadBalancing.Constants.LobbyType} [options.lobbyType=LobbyType.Default] Type of the lobby.
      */


      LoadBalancingClient.prototype.createRoomFromMy = function (roomName, options) {
        this.currentRoom.name = roomName ? roomName : "";
        options = this.copyCreateOptionsFromMyRoom(options);
        return this.createRoomInternal(this.masterPeer, options);
      };

      LoadBalancingClient.prototype.copyCreateOptionsFromMyRoom = function (options) {
        options = options || {}; //retrieve options from my room

        options.isVisible = this.currentRoom.isVisible;
        options.isOpen = this.currentRoom.isOpen;
        options.maxPlayers = this.currentRoom.maxPlayers;
        options.customGameProperties = this.currentRoom._customProperties;
        options.propsListedInLobby = this.currentRoom._propsListedInLobby;
        options.emptyRoomLiveTime = this.currentRoom.emptyRoomLiveTime;
        options.suspendedPlayerLiveTime = this.currentRoom.suspendedPlayerLiveTime;
        options.plugins = this.currentRoom.plugins;
        return options;
      };
      /**
          @summary Creates a new room on the server (or fails when the name is already taken).
          @method Photon.LoadBalancing.LoadBalancingClient#createRoom
          @param {string} [roomName] The name to create a room with. Must be unique and not in use or can't be created. If not specified or null, the server will assign a GUID as name.
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {boolean} [options.isVisible=true] Shows the room in the lobby's room list.
          @property {boolean} [options.isOpen=true] Keeps players from joining the room (or opens it to everyone).
          @property {number} [options.maxPlayers=0] Max players before room is considered full (but still listed).
          @property {object} [options.customGameProperties] Custom properties to apply to the room on creation (use string-typed keys but short ones).
          @property {string[]} [options.propsListedInLobby] Defines the custom room properties that get listed in the lobby.
          @property {number} [options.emptyRoomLiveTime=0] Room live time (ms) in the server room cache after all clients have left the room.
          @property {number} [options.suspendedPlayerLiveTime=0] Player live time (ms) in the room after player suspended.
          @property {string[]} [options.plugins] Expected server plugins.
          @property {string} [options.lobbyName] Name of the lobby to create room in.
          @property {Photon.LoadBalancing.Constants.LobbyType} [options.lobbyType=LobbyType.Default] Type of the lobby.
            */


      LoadBalancingClient.prototype.createRoom = function (roomName, options) {
        this.currentRoom = this.roomFactoryInternal(roomName ? roomName : "");
        return this.createRoomInternal(this.masterPeer, options);
      };
      /**
          @summary Joins a room by name and sets this player's properties.
          @method Photon.LoadBalancing.LoadBalancingClient#joinRoom
          @param {string} roomName The name of the room to join. Must be existing already, open and non-full or can't be joined.
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {string} [options.rejoin=false] Rejoin using current userId.
          @property {boolean} [options.createIfNotExists=false] Create room if not exists.
          @param {object} [createOptions] Room options for creation
          @property {object} createOptions Room options for creation
          @property {boolean} [createOptions.isVisible=true] Shows the room in the lobby's room list.
          @property {boolean} [createOptions.isOpen=true] Keeps players from joining the room (or opens it to everyone).
          @property {number} [createOptions.maxPlayers=0] Max players before room is considered full (but still listed).
          @property {object} [createOptions.customGameProperties] Custom properties to apply to the room on creation (use string-typed keys but short ones).
          @property {string[]} [createOptions.propsListedInLobby] Defines the custom room properties that get listed in the lobby.
          @property {number} [createOptions.emptyRoomLiveTime=0] Room live time (ms) in the server room cache after all clients have left the room.
          @property {number} [createOptions.suspendedPlayerLiveTime=0] Player live time (ms) in the room after player suspended.
          @property {string[]} [createOptions.plugins] Informs the server of the expected plugin setup.
          @property {string} [createOptions.lobbyName=""] Name of the lobby to create room in.
          @property {Photon.LoadBalancing.Constants.LobbyType} [createOptions.lobbyType=LobbyType.Default] Type of the lobby.
            */


      LoadBalancingClient.prototype.joinRoom = function (roomName, options, createOptions) {
        var op = [];

        if (options) {
          if (options.createIfNotExists) {
            op.push(LoadBalancing.Constants.ParameterCode.JoinMode, LoadBalancingClient.JoinMode.CreateIfNotExists);
            this.fillCreateRoomOptions(op, createOptions);
          }

          if (options.rejoin) {
            op.push(LoadBalancing.Constants.ParameterCode.JoinMode, LoadBalancingClient.JoinMode.RejoinOnly);
          }
        }

        this.currentRoom = this.roomFactoryInternal(roomName);
        op.push(LoadBalancing.Constants.ParameterCode.RoomName, roomName);
        this.joinRoomOptions = options || {};
        this.createRoomOptions = createOptions || {};
        this.logger.info("Join Room", roomName, options, createOptions, "...");
        this.masterPeer.sendOperation(LoadBalancing.Constants.OperationCode.JoinGame, op);
        return true;
      };
      /**
          @summary Joins a random, available room.
          This operation fails if all rooms are closed or full.
          @method Photon.LoadBalancing.LoadBalancingClient#joinRandomRoom
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {object} [options.expectedCustomRoomProperties] If specified, a room will only be joined, if it matches these custom properties. Use null to accept rooms with any properties.
          @property {number} [options.expectedMaxPlayers] If specified, filters for a particular maxPlayer setting. Use 0 to accept any maxPlayer value.
          @property {Photon.LoadBalancing.Constants.MatchmakingMode} [options.matchmakingMode=MatchmakingMode.FillRoom] Selects one of the available matchmaking algorithms.
          @property {string} [options.lobbyName] Name of the lobby to search rooms in.
          @property {Photon.LoadBalancing.Constants.LobbyType} [options.lobbyType=LobbyType.Default] Type of the lobby.
          @property {string} [options.sqlLobbyFilter] Basically the "where" clause of a sql statement. Examples: 'C0 = 1 AND C2 > 50'. 'C5 = "Map2" AND C2 > 10 AND C2 < 20'
      */


      LoadBalancingClient.prototype.joinRandomRoom = function (options) {
        var op = [];

        if (options) {
          if (options.matchingType != undefined && options.matchingType != LoadBalancing.Constants.MatchmakingMode.FillRoom) {
            op.push(LoadBalancing.Constants.ParameterCode.MatchMakingType);
            op.push(options.matchingType);
          }

          var expectedRoomProperties = {};
          var propNonEmpty = false;

          if (options.expectedCustomRoomProperties != undefined) {
            for (var k in options.expectedCustomRoomProperties) {
              expectedRoomProperties[k] = options.expectedCustomRoomProperties[k];
              propNonEmpty = true;
            }
          }

          if (options.expectedMaxPlayers != undefined && options.expectedMaxPlayers > 0) {
            expectedRoomProperties[LoadBalancing.Constants.GameProperties.MaxPlayers] = options.expectedMaxPlayers;
            propNonEmpty = true;
          }

          if (propNonEmpty) {
            op.push(LoadBalancing.Constants.ParameterCode.GameProperties);
            op.push(expectedRoomProperties);
          }

          if (options.lobbyName) {
            op.push(LoadBalancing.Constants.ParameterCode.LobbyName);
            op.push(options.lobbyName);

            if (options.lobbyType != undefined) {
              op.push(LoadBalancing.Constants.ParameterCode.LobbyType);
              op.push(options.lobbyType);
            }
          }

          if (options.sqlLobbyFilter) {
            op.push(LoadBalancing.Constants.ParameterCode.Data);
            op.push(options.sqlLobbyFilter);
          }
        }

        this.logger.info("Join Random Room", options && options.lobbyName, options && options.lobbyType, "...");
        this.masterPeer.sendOperation(LoadBalancing.Constants.OperationCode.JoinRandomGame, op);
        return true;
      };

      LoadBalancingClient.prototype._setPropertiesOfRoom = function (properties, webForward, expectedProperties) {
        var op = [];
        op.push(LoadBalancing.Constants.ParameterCode.Properties);
        op.push(properties);
        op.push(LoadBalancing.Constants.ParameterCode.Broadcast);
        op.push(true);

        if (webForward) {
          op.push(LoadBalancing.Constants.ParameterCode.WebFlags);
          op.push(Photon.TypeExt.Byte(WebFlags.HttpForward));
        }

        if (expectedProperties) {
          op.push(LoadBalancing.Constants.ParameterCode.ExpectedValues);
          op.push(expectedProperties);
        }

        this.gamePeer.sendOperation(LoadBalancing.Constants.OperationCode.SetProperties, op);
      };

      LoadBalancingClient.prototype._setPropertiesOfActor = function (actorNr, properties, webForward, expectedProperties) {
        var op = [];
        op.push(LoadBalancing.Constants.ParameterCode.ActorNr);
        op.push(actorNr);
        op.push(LoadBalancing.Constants.ParameterCode.Properties);
        op.push(properties);
        op.push(LoadBalancing.Constants.ParameterCode.Broadcast);
        op.push(true);

        if (webForward) {
          op.push(LoadBalancing.Constants.ParameterCode.WebFlags);
          op.push(Photon.TypeExt.Byte(WebFlags.HttpForward));
        }

        if (expectedProperties) {
          op.push(LoadBalancing.Constants.ParameterCode.ExpectedValues);
          op.push(expectedProperties);
        }

        this.gamePeer.sendOperation(LoadBalancing.Constants.OperationCode.SetProperties, op);
      };
      /**
          @summary Disconnects from all servers.
          @method Photon.LoadBalancing.LoadBalancingClient#disconnect
      */


      LoadBalancingClient.prototype.disconnect = function () {
        if (this.nameServerPeer) {
          this.nameServerPeer.disconnect();
        }

        this._cleanupNameServerPeerData();

        if (this.masterPeer) {
          this.masterPeer.disconnect();
        }

        this._cleanupMasterPeerData();

        if (this.gamePeer) {
          this.gamePeer.disconnect();
        }

        this._cleanupGamePeerData();

        this.changeState(LoadBalancingClient.State.Disconnected);
      };
      /**
          @summary Disconnects client from Game server keeping player in room (to rejoin later) and connects to Master server if not connected.
          @method Photon.LoadBalancing.LoadBalancingClient#suspendRoom
          @property {object} options Additional options
          @property {boolean} [options.sendAuthCookie] Securely transmit the encrypted object AuthCookie to the web service in PathLeave webhook when available
      */


      LoadBalancingClient.prototype.suspendRoom = function (options) {
        if (this.isJoinedToRoom()) {
          if (this.gamePeer) {
            var params = [];

            if (options) {
              if (options.sendAuthCookie) {
                params.push(LoadBalancing.Constants.ParameterCode.WebFlags, Photon.TypeExt.Byte(WebFlags.SendAuthCookie));
              }
            }

            params.push(LoadBalancing.Constants.ParameterCode.IsInactive, true);
            this.gamePeer.sendOperation(LoadBalancing.Constants.OperationCode.Leave, params);
            this.gamePeerWaitingForDisconnect = true;
          }

          this._cleanupGamePeerData();

          if (this.isConnectedToMaster()) {
            this.changeState(LoadBalancingClient.State.JoinedLobby);
          } else {
            this.changeState(LoadBalancingClient.State.Disconnected);
            this.connect(this.connectOptions);
          }
        }
      };
      /**
          @summary Leaves room and connects to Master server if not connected.
          @method Photon.LoadBalancing.LoadBalancingClient#leaveRoom
          @property {object} options Additional options
          @property {boolean} [options.sendAuthCookie] Securely transmit the encrypted object AuthCookie to the web service in PathLeave webhook when available
      */


      LoadBalancingClient.prototype.leaveRoom = function (options) {
        if (this.isJoinedToRoom()) {
          if (this.gamePeer) {
            var params = [];

            if (options) {
              if (options.sendAuthCookie) {
                params.push(LoadBalancing.Constants.ParameterCode.WebFlags, Photon.TypeExt.Byte(WebFlags.SendAuthCookie));
              }
            }

            this.gamePeer.sendOperation(LoadBalancing.Constants.OperationCode.Leave, params);
            this.gamePeerWaitingForDisconnect = true;
          }

          this._cleanupGamePeerData();

          if (this.isConnectedToMaster()) {
            this.changeState(LoadBalancingClient.State.JoinedLobby);
          } else {
            this.changeState(LoadBalancingClient.State.Disconnected);
            this.connect(this.connectOptions);
          }
        }
      };
      /**
          @summary Raises game custom event
          @method Photon.LoadBalancing.LoadBalancingClient#raiseEvent
          @param {number} eventCode Identifies this type of event (and the content). Your game's event codes can start with 0.
          @param {object} [data] Custom data you want to send along (use null, if none).
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {number} [options.interestGroup] The ID of the interest group this event goes to (exclusively).
          @property {Photon.LoadBalancing.Constants.EventCaching} [options.cache=EventCaching.DoNotCache] Events can be cached (merged and removed) for players joining later on.
          @property {Photon.LoadBalancing.Constants.ReceiverGroup} [options.receivers=ReceiverGroup.Others] Defines to which group of players the event is passed on.
          @property {number[]} [options.targetActors] Defines the target players who should receive the event (use only for small target groups).
          @property {boolean} [options.webForward=false] Forward to web hook.
      */


      LoadBalancingClient.prototype.raiseEvent = function (eventCode, data, options) {
        if (this.isJoinedToRoom()) {
          this.gamePeer.raiseEvent(eventCode, data, options);
        }
      };
      /**
          @summary Changes client's interest groups (for events in room).<br/>
          Note the difference between passing null and []: null won't add/remove any groups, [] will add/remove all (existing) groups.<br/>
          First, removing groups is executed. This way, you could leave all groups and join only the ones provided.
          @method Photon.LoadBalancing.LoadBalancingClient#changeGroups
          @param {number[]} groupsToRemove Groups to remove from interest. Null will not leave any. A [] will remove all.
          @param {number[]} groupsToAdd Groups to add to interest. Null will not add any. A [] will add all current.
      */


      LoadBalancingClient.prototype.changeGroups = function (groupsToRemove, groupsToAdd) {
        if (this.isJoinedToRoom()) {
          this.logger.debug("Group change:", groupsToRemove, groupsToAdd);
          this.gamePeer.changeGroups(groupsToRemove, groupsToAdd);
        }
      };
      /**
          @summary Requests Master server for actors online status and joined rooms.<br/>
          Override {@link Photon.LoadBalancing.LoadBalancingClient#onFindFriendsResult onFindFriendsResult} to handle request results.
          @method Photon.LoadBalancing.LoadBalancingClient#findFriends
          @param {string[]} friendsToFind Actors names.
      **/


      LoadBalancingClient.prototype.findFriends = function (friendsToFind) {
        if (this.isConnectedToMaster()) {
          if (friendsToFind && typeof friendsToFind == "object") {
            this.findFriendsRequestList = new Array();

            for (var i = 0; i < friendsToFind.length; ++i) {
              if (typeof friendsToFind[i] == "string") {
                this.findFriendsRequestList[i] = friendsToFind[i];
              } else {
                this.logger.error("FindFriends request error:", "Friend name is not a string", i);
                this.onFindFriendsResult(-1, "Friend name is not a string" + " " + i, {});
                return;
              }
            }

            this.logger.debug("Find friends:", friendsToFind);
            this.masterPeer.findFriends(this.findFriendsRequestList);
          } else {
            this.logger.error("FindFriends request error:", "Parameter is not an array");
            this.onFindFriendsResult(-1, "Parameter is not an array", {});
          }
        } else {
          this.logger.error("FindFriends request error:", "Not connected to Master");
          this.onFindFriendsResult(LoadBalancingClient.PeerErrorCode.MasterError, "Not connected to Master", {});
        }
      };
      /**
          @summary Requests Master server for lobbies statistics.<br/>
          Override {@link Photon.LoadBalancing.LoadBalancingClient#onLobbyStats onLobbyStats} to handle request results.<br/>
          Alternatively, automated updates can be set up during {@link Photon.LoadBalancing.LoadBalancingClient#connect connect}.
          @method Photon.LoadBalancing.LoadBalancingClient#requestLobbyStats
          @param {any[]} lobbiesToRequest Array of lobbies id pairs [ [lobbyName1, lobbyType1], [lobbyName2, lobbyType2], ... ]. If not specified or null, statistics for all lobbies requested.
            **/


      LoadBalancingClient.prototype.requestLobbyStats = function (lobbiesToRequest) {
        if (this.isConnectedToMaster()) {
          this.lobbyStatsRequestList = new Array();

          if (lobbiesToRequest) {
            if (typeof lobbiesToRequest == "object") {
              for (var i = 0; i < lobbiesToRequest.length; ++i) {
                var l = lobbiesToRequest[i];

                if (typeof l == "object") {
                  var n = l[0];

                  if (n) {
                    var t;

                    if (l[1] === undefined) {
                      t = LoadBalancing.Constants.LobbyType.Default;
                    } else {
                      if (typeof l[1] == "number") {
                        t = l[1];
                      } else {
                        this.requestLobbyStatsErr("Lobby type is invalid", i);
                        return;
                      }
                    }

                    this.lobbyStatsRequestList[i] = [n.toString(), t];
                  } else {
                    this.requestLobbyStatsErr("Lobby name is empty", i);
                    return;
                  }
                } else {
                  this.requestLobbyStatsErr("Lobby id is not an array", i);
                  return;
                }
              }
            } else {
              this.requestLobbyStatsErr("Parameter is not an array");
              return;
            }
          }

          this.masterPeer.requestLobbyStats(this.lobbyStatsRequestList);
        } else {
          this.logger.error("LobbyState request error:", "Not connected to Master");
          this.onLobbyStats(LoadBalancingClient.PeerErrorCode.MasterError, "Not connected to Master", []);
        }
      };

      LoadBalancingClient.prototype.requestLobbyStatsErr = function (m, other) {
        if (other === void 0) {
          other = "";
        }

        this.logger.error("LobbyState request error:", m, other);
        this.onLobbyStats(-1, m + " " + other, []);
      };
      /**
          @summary Requests NameServer for regions list.<br/>
          Override {@link Photon.LoadBalancing.LoadBalancingClient#onGetRegionsResult onGetRegionsResult} to handle request results.<br/>
          @method Photon.LoadBalancing.LoadBalancingClient#getRegions
      **/


      LoadBalancingClient.prototype.getRegions = function () {
        if (this.isConnectedToNameServer()) {
          this.logger.debug("GetRegions...");
          this.nameServerPeer.getRegions(this.appId);
        } else {
          this.logger.error("GetRegions request error:", "Not connected to NameServer");
          this.onGetRegionsResult(LoadBalancingClient.PeerErrorCode.NameServerError, "Not connected to NameServer", {});
        }
      };
      /**
          @summary Sends web rpc request to Master server.<br/ >
          Override {@link Photon.LoadBalancing.LoadBalancingClient#onWebRpcResult onWebRpcResult} to handle request results.<br/>
          @method Photon.LoadBalancing.LoadBalancingClient#webRpc
          @param {string} uriPath Request path.
          @param {object} parameters Request parameters.
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {boolean} [options.sendAuthCookie] Defines if the authentication cookie gets sent to a WebHook (if setup)
      **/


      LoadBalancingClient.prototype.webRpc = function (uriPath, parameters, options) {
        if (this.isConnectedToMaster()) {
          this.logger.debug("WebRpc...");
          this.masterPeer.webRpc(uriPath, parameters, options);
        } else if (this.isJoinedToRoom()) {
          this.logger.debug("WebRpc...");
          this.gamePeer.webRpc(uriPath, parameters, options);
        } else {
          this.logger.error("WebRpc request error:", "Connected to neither Master nor Game server");
          this.onWebRpcResult(LoadBalancingClient.PeerErrorCode.MasterError, "Connected to neither Master nor Game server", uriPath, 0, {});
        }
      };
      /**
          @summary Connects to a specific region's Master server, using the NameServer to find the IP.
          Override {@link Photon.LoadBalancing.LoadBalancingClient#onWebRpcResult onWebRpcResult} to handle request results.<br/>
          @method Photon.LoadBalancing.LoadBalancingClient#connectToRegionMaster
          @param {string} region Region connect to Master server of.
          @returns {boolean} True if current client state allows connection.
      **/


      LoadBalancingClient.prototype.connectToRegionMaster = function (region) {
        if (this.isConnectedToNameServer()) {
          this.logger.debug("Connecting to Region Master", region, "...");
          this.nameServerPeer.opAuth(this.appId, this.appVersion, this.userAuthType, this.userAuthParameters, this.userAuthData, this.userId, region);
          return true;
        } else if (this.connectToNameServer({
          region: region
        })) {
          return true;
        } else {
          this.logger.error("Connecting to Region Master error:", "Not connected to NameServer");
          return false;
        }
      };
      /**
          @summary Checks if client is connected to Master server (usually joined to lobby and receives room list updates).
          @method Photon.LoadBalancing.LoadBalancingClient#isConnectedToMaster
          @returns {boolean} True if client is connected to Master server.
      */


      LoadBalancingClient.prototype.isConnectedToMaster = function () {
        return this.masterPeer && this.masterPeer.isConnected();
      };
      /**
          @summary Checks if client is connected to NameServer server.
          @method Photon.LoadBalancing.LoadBalancingClient#isConnectedToNameServer
          @returns {boolean} True if client is connected to NameServer server.
      */


      LoadBalancingClient.prototype.isConnectedToNameServer = function () {
        return this.nameServerPeer && this.nameServerPeer.isConnected();
      };
      /**
          @summary Checks if client is in lobby and ready to join or create game.
          @method Photon.LoadBalancing.LoadBalancingClient#isInLobby
          @returns {boolean} True if client is in lobby.
      */


      LoadBalancingClient.prototype.isInLobby = function () {
        return this.state == LoadBalancingClient.State.JoinedLobby;
      };
      /**
          @summary Checks if client is joined to game.
          @method Photon.LoadBalancing.LoadBalancingClient#isJoinedToRoom
          @returns {boolean} True if client is joined to game.
      */


      LoadBalancingClient.prototype.isJoinedToRoom = function () {
        return this.state == LoadBalancingClient.State.Joined;
      };
      /**
          @deprecated Use isJoinedToRoom()
      */


      LoadBalancingClient.prototype.isConnectedToGame = function () {
        return this.isJoinedToRoom();
      };
      /**
          @summary Current room list from Master server.
          @method Photon.LoadBalancing.LoadBalancingClient#availableRooms
          @returns {{@link Photon.LoadBalancing.RoomInfo}[]} Current room list
      */


      LoadBalancingClient.prototype.availableRooms = function () {
        return this.roomInfos;
      };
      /**
          @summary Sets client logger level
          @method Photon.LoadBalancing.LoadBalancingClient#setLogLevel
          @param {Exitgames.Common.Logger.Level} level Logging level.
      */


      LoadBalancingClient.prototype.setLogLevel = function (level) {
        this.logger.setLevel(level);

        if (this.nameServerPeer) {
          this.nameServerPeer.setLogLevel(level);
        }

        if (this.masterPeer) {
          this.masterPeer.setLogLevel(level);
        }

        if (this.gamePeer) {
          this.gamePeer.setLogLevel(level);
        }
      };

      LoadBalancingClient.prototype.addRoom = function (r) {
        this.roomInfos.push(r);
        this.roomInfosDict[r.name] = r;
      };

      LoadBalancingClient.prototype.clearRooms = function () {
        this.roomInfos = new Array();
        this.roomInfosDict = {};
      };

      LoadBalancingClient.prototype.purgeRemovedRooms = function () {
        this.roomInfos = this.roomInfos.filter(function (x) {
          return !x.removed;
        });

        for (var n in this.roomInfosDict) {
          if (this.roomInfosDict[n].removed) {
            delete this.roomInfosDict[n];
          }
        }
      };

      LoadBalancingClient.prototype.addActor = function (a) {
        this.actors[a.actorNr] = a;
        this.actorsArray.push(a);
        this.currentRoom.playerCount = this.actorsArray.length;
        if (this.lowestActorId == 0 || this.lowestActorId > a.actorNr) this.lowestActorId = a.actorNr;
      };

      LoadBalancingClient.prototype.removeActor = function (actorNr) {
        delete this.actors[actorNr];
        this.actorsArray = this.actorsArray.filter(function (x) {
          return x.actorNr != actorNr;
        });
        this.currentRoom.playerCount = this.actorsArray.length;

        if (this.lowestActorId == actorNr) {
          if (this.actorsArray.length > 0) this.lowestActorId = this.actorsArray.reduce(function (prev, curr) {
            return prev.actorNr < curr.actorNr ? prev : curr;
          }).actorNr;else this.lowestActorId = 0;
        }
      };

      LoadBalancingClient.prototype.clearActors = function () {
        this.actors = {};
        this.actorsArray = [];
        this.currentRoom.playerCount = 0;
        this.lowestActorId = 0;
      };

      LoadBalancingClient.prototype.changeState = function (nextState) {
        this.logger.info("State:", LoadBalancingClient.StateToName(this.state), "->", LoadBalancingClient.StateToName(nextState));
        this.state = nextState;
        this.onStateChange(nextState);
      };

      LoadBalancingClient.prototype.createRoomInternal = function (peer, options) {
        var op = [];
        if (this.currentRoom.name) op.push(LoadBalancing.Constants.ParameterCode.RoomName, this.currentRoom.name);
        this.fillCreateRoomOptions(op, options);

        if (peer === this.masterPeer) {
          this.createRoomOptions = options;
        }

        if (peer === this.gamePeer) {
          op.push(LoadBalancing.Constants.ParameterCode.PlayerProperties);
          op.push(this._myActor._getAllProperties());
        }

        var log = peer == this.gamePeer ? this.gamePeer._logger : this.masterPeer._logger;
        log.info("Create Room", options && options.lobbyName, options && options.lobbyType, "...");
        peer.sendOperation(LoadBalancing.Constants.OperationCode.CreateGame, op);
      };

      LoadBalancingClient.prototype.updateUserIdAndNickname = function (vals, logger) {
        var userId = vals[LoadBalancing.Constants.ParameterCode.UserId];

        if (userId != undefined) {
          this.setUserId(userId);
          logger.info("Setting userId sent by server:", userId);
        }

        var nickname = vals[LoadBalancing.Constants.ParameterCode.Nickname];

        if (nickname != undefined) {
          this.myActor().setName(nickname);
          logger.info("Setting nickname sent by server:", nickname);
        }
      };

      LoadBalancingClient.prototype.initNameServerPeer = function (np) {
        var _this = this;

        np.setLogLevel(this.logger.getLevel()); // errors

        np.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.error, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.NameServerError, "NameServer peer error");
        });
        np.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectFailed, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.NameServerConnectFailed, "NameServer peer connect failed. " + _this.nameServerAddress);
        });
        np.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.timeout, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.NameServerTimeout, "NameServer peer timeout");
        });
        np.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connecting, function () {});
        np.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connect, function () {
          np._logger.info("Connected");

          _this.changeState(LoadBalancingClient.State.ConnectedToNameServer); // connectToRegionMaster inited connection


          if (_this.connectOptions.region != undefined) {
            np.opAuth(_this.appId, _this.appVersion, _this.userAuthType, _this.userAuthParameters, _this.userAuthData, _this.userId, _this.connectOptions.region);
          }
        });
        np.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.disconnect, function () {
          if (np == _this.nameServerPeer) {
            _this._cleanupNameServerPeerData();

            np._logger.info("Disconnected");
          }
        });
        np.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectClosed, function () {
          np._logger.info("Server closed connection");

          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.NameServerConnectClosed, "NameServer server closed connection");
        }); // events
        // responses - check operation result. data.errCode

        np.addResponseListener(LoadBalancing.Constants.OperationCode.GetRegions, function (data) {
          np._logger.debug("resp GetRegions", data);

          var regions = {};

          if (data.errCode == 0) {
            var r = data.vals[LoadBalancing.Constants.ParameterCode.Region];
            var a = data.vals[LoadBalancing.Constants.ParameterCode.Address];

            for (var i in r) {
              regions[r[i]] = a[i];
            }
          } else {
            np._logger.error("GetRegions request error.", data.errCode);
          }

          _this.onGetRegionsResult(data.errCode, data.errMsg, regions);
        });
        np.addResponseListener(LoadBalancing.Constants.OperationCode.Authenticate, function (data) {
          np._logger.debug("resp Authenticate", data);

          if (data.errCode == 0) {
            np._logger.info("Authenticated");

            np.disconnect();

            _this.updateUserIdAndNickname(data.vals, np._logger);

            _this.masterServerAddress = data.vals[LoadBalancing.Constants.ParameterCode.Address];

            np._logger.info("Connecting to Master server", _this.masterServerAddress, "...");

            _this.connectOptions.userAuthSecret = data.vals[LoadBalancing.Constants.ParameterCode.Secret];

            _this.connect(_this.connectOptions);
          } else {
            _this.changeState(LoadBalancingClient.State.Error);

            _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.NameServerAuthenticationFailed, "NameServer authentication failed: " + data.errCode + " " + data.errMsg);
          }
        });
      }; // protected


      LoadBalancingClient.prototype.initMasterPeer = function (mp) {
        var _this = this;

        mp.setLogLevel(this.logger.getLevel()); // errors

        mp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.error, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.MasterError, "Master peer error");
        });
        mp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectFailed, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.MasterConnectFailed, "Master peer connect failed: " + _this.masterServerAddress);
        });
        mp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.timeout, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.MasterTimeout, "Master peer error timeout");
        });
        mp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connecting, function () {}); // status

        mp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connect, function () {
          //TODO: encryption phase
          mp._logger.info("Connected");

          var op = []; // if NameSever gave us secret

          if (_this.connectOptions.userAuthSecret) {
            op.push(LoadBalancing.Constants.ParameterCode.Secret, _this.connectOptions.userAuthSecret);
            mp.sendOperation(LoadBalancing.Constants.OperationCode.Authenticate, op);

            mp._logger.info("Authenticate with secret...");
          } else {
            op.push(LoadBalancing.Constants.ParameterCode.ApplicationId);
            op.push(_this.appId);
            op.push(LoadBalancing.Constants.ParameterCode.AppVersion);
            op.push(_this.appVersion);

            if (_this.userAuthType != LoadBalancing.Constants.CustomAuthenticationType.None) {
              op.push(LoadBalancing.Constants.ParameterCode.ClientAuthenticationType, Photon.TypeExt.Byte(_this.userAuthType));
              op.push(LoadBalancing.Constants.ParameterCode.ClientAuthenticationParams, _this.userAuthParameters);

              if (_this.userAuthData) {
                op.push(LoadBalancing.Constants.ParameterCode.ClientAuthenticationData, _this.userAuthData);
              }
            }

            if (_this.userId) {
              op.push(LoadBalancing.Constants.ParameterCode.UserId, _this.userId);
            }

            if (_this.connectOptions.lobbyStats) {
              op.push(LoadBalancing.Constants.ParameterCode.LobbyStats, true);
            }

            mp.sendOperation(LoadBalancing.Constants.OperationCode.Authenticate, op);

            mp._logger.info("Authenticate...");
          }
        });
        mp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.disconnect, function () {
          if (mp == _this.masterPeer) {
            _this._cleanupMasterPeerData();

            mp._logger.info("Disconnected");
          }
        });
        mp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectClosed, function () {
          mp._logger.info("Server closed connection");

          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.MasterConnectClosed, "Master server closed connection");
        }); //events

        mp.addEventListener(LoadBalancing.Constants.EventCode.GameList, function (data) {
          var gameList = data.vals[LoadBalancing.Constants.ParameterCode.GameList];

          _this.clearRooms();

          for (var g in gameList) {
            var r = new RoomInfo(g);

            r._updateFromProps(gameList[g]);

            _this.addRoom(r);
          }

          _this.onRoomList(_this.roomInfos);

          mp._logger.debug("ev GameList", _this.roomInfos, gameList);
        });
        mp.addEventListener(LoadBalancing.Constants.EventCode.GameListUpdate, function (data) {
          var gameList = data.vals[LoadBalancing.Constants.ParameterCode.GameList];
          var roomsUpdated = new Array();
          var roomsAdded = new Array();
          var roomsRemoved = new Array();

          for (var g in gameList) {
            var exist = _this.roomInfos.filter(function (x) {
              return x.name == g;
            });

            if (exist.length > 0) {
              var r = exist[0];

              r._updateFromProps(gameList[g]);

              if (r.removed) {
                roomsRemoved.push(r);
              } else {
                roomsUpdated.push(r);
              }
            } else {
              var ri = new RoomInfo(g);

              ri._updateFromProps(gameList[g]);

              _this.addRoom(ri);

              roomsAdded.push(ri);
            }
          }

          _this.purgeRemovedRooms();

          _this.onRoomListUpdate(_this.roomInfos, roomsUpdated, roomsAdded, roomsRemoved);

          mp._logger.debug("ev GameListUpdate:", _this.roomInfos, "u:", roomsUpdated, "a:", roomsAdded, "r:", roomsRemoved, gameList);
        }); // responses - check operation result: data.errCode

        mp.addResponseListener(LoadBalancing.Constants.OperationCode.Authenticate, function (data) {
          mp._logger.debug("resp Authenticate", data);

          if (!data.errCode) {
            mp._logger.info("Authenticated");

            _this.updateUserIdAndNickname(data.vals, mp._logger);

            if (data.vals[LoadBalancing.Constants.ParameterCode.Secret] != undefined) {
              _this.connectOptions.userAuthSecret = data.vals[LoadBalancing.Constants.ParameterCode.Secret];
            }

            _this.changeState(LoadBalancingClient.State.ConnectedToMaster);

            var op = [];

            if (_this.connectOptions.lobbyName) {
              op.push(LoadBalancing.Constants.ParameterCode.LobbyName);
              op.push(_this.connectOptions.lobbyName);

              if (_this.connectOptions.lobbyType != undefined) {
                op.push(LoadBalancing.Constants.ParameterCode.LobbyType);
                op.push(_this.connectOptions.lobbyType);
              }
            }

            if (_this.autoJoinLobby) {
              mp.sendOperation(LoadBalancing.Constants.OperationCode.JoinLobby, op);

              mp._logger.info("Join Lobby", _this.connectOptions.lobbyName, _this.connectOptions.lobbyType, "...");
            }
          } else {
            _this.changeState(LoadBalancingClient.State.Error);

            _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.MasterAuthenticationFailed, "Master authentication failed: " + data.errCode + " " + data.errMsg);
          }
        });
        mp.addResponseListener(LoadBalancing.Constants.OperationCode.JoinLobby, function (data) {
          mp._logger.debug("resp JoinLobby", data);

          if (!data.errCode) {
            mp._logger.info("Joined to Lobby");

            _this.changeState(LoadBalancingClient.State.JoinedLobby);
          }

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.JoinLobby, data);
        });
        mp.addResponseListener(LoadBalancing.Constants.OperationCode.CreateGame, function (data) {
          mp._logger.debug("resp CreateGame", data);

          if (!data.errCode) {
            _this.currentRoom._updateFromMasterResponse(data.vals);

            mp._logger.debug("Created/Joined " + _this.currentRoom.name);

            _this.connectToGameServer(LoadBalancing.Constants.OperationCode.CreateGame);
          }

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.CreateGame, data);
        });
        mp.addResponseListener(LoadBalancing.Constants.OperationCode.JoinGame, function (data) {
          mp._logger.debug("resp JoinGame", data);

          if (!data.errCode) {
            _this.currentRoom._updateFromMasterResponse(data.vals);

            mp._logger.debug("Joined " + _this.currentRoom.name);

            _this.connectToGameServer(LoadBalancing.Constants.OperationCode.JoinGame);
          }

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.JoinGame, data);
        });
        mp.addResponseListener(LoadBalancing.Constants.OperationCode.JoinRandomGame, function (data) {
          mp._logger.debug("resp JoinRandomGame", data);

          if (!data.errCode) {
            _this.currentRoom._updateFromMasterResponse(data.vals);

            mp._logger.debug("Joined " + _this.currentRoom.name);

            _this.connectToGameServer(LoadBalancing.Constants.OperationCode.JoinRandomGame);
          }

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.JoinRandomGame, data);
        });
        mp.addResponseListener(LoadBalancing.Constants.OperationCode.FindFriends, function (data) {
          mp._logger.debug("resp FindFriends", data);

          var res = {};

          if (!data.errCode) {
            var onlines = data.vals[LoadBalancing.Constants.ParameterCode.FindFriendsResponseOnlineList] || {};
            var roomIds = data.vals[LoadBalancing.Constants.ParameterCode.FindFriendsResponseRoomIdList] || {};

            for (var i = 0; i < _this.findFriendsRequestList.length; ++i) {
              var name = _this.findFriendsRequestList[i];

              if (name) {
                res[name] = {
                  online: onlines[i],
                  roomId: roomIds[i]
                };
              }
            }
          } else {
            mp._logger.error("FindFriends request error:", data.errCode);
          }

          _this.onFindFriendsResult(data.errCode, data.errMsg, res);
        });
        mp.addResponseListener(LoadBalancing.Constants.OperationCode.LobbyStats, function (data) {
          mp._logger.debug("resp LobbyStats", data);

          var res = new Array();

          if (!data.errCode) {
            var names = data.vals[LoadBalancing.Constants.ParameterCode.LobbyName]; // not inited intentionally

            var types = data.vals[LoadBalancing.Constants.ParameterCode.LobbyType] || {};
            var peers = data.vals[LoadBalancing.Constants.ParameterCode.PeerCount] || {};
            var games = data.vals[LoadBalancing.Constants.ParameterCode.GameCount] || {};

            if (names) {
              for (var i = 0; i < names.length; ++i) {
                res[i] = {
                  lobbyName: names[i],
                  lobbyType: types[i],
                  peerCount: peers[i],
                  gameCount: games[i]
                };
              }
            } else {
              for (var i = 0; i < _this.lobbyStatsRequestList.length; ++i) {
                var l = _this.lobbyStatsRequestList[i];
                res[i] = {
                  lobbyName: l[0],
                  lobbyType: l[1],
                  peerCount: peers[i],
                  gameCount: games[i]
                };
              }
            }
          } else {
            mp._logger.error("LobbyStats request error:", data.errCode);
          }

          _this.onLobbyStats(data.errCode, data.errMsg, res);
        });
        mp.addEventListener(LoadBalancing.Constants.EventCode.LobbyStats, function (data) {
          mp._logger.debug("ev LobbyStats", data);

          var res = new Array();
          var names = data.vals[LoadBalancing.Constants.ParameterCode.LobbyName]; // not inited intentionally

          var types = data.vals[LoadBalancing.Constants.ParameterCode.LobbyType] || {};
          var peers = data.vals[LoadBalancing.Constants.ParameterCode.PeerCount] || {};
          var games = data.vals[LoadBalancing.Constants.ParameterCode.GameCount] || {};

          if (names) {
            for (var i = 0; i < names.length; ++i) {
              res[i] = {
                lobbyName: names[i],
                lobbyType: types[i],
                peerCount: peers[i],
                gameCount: games[i]
              };
            }
          }

          _this.onLobbyStats(0, "", res);
        });
        mp.addEventListener(LoadBalancing.Constants.EventCode.AppStats, function (data) {
          mp._logger.debug("ev AppStats", data);

          var res = {
            peerCount: data.vals[LoadBalancing.Constants.ParameterCode.PeerCount],
            masterPeerCount: data.vals[LoadBalancing.Constants.ParameterCode.MasterPeerCount],
            gameCount: data.vals[LoadBalancing.Constants.ParameterCode.GameCount]
          };

          _this.onAppStats(0, "", res);
        });
        mp.addResponseListener(LoadBalancing.Constants.OperationCode.Rpc, mp.webRpcHandler(this));
      };

      LoadBalancingClient.prototype.connectToGameServer = function (masterOpCode) {
        if (!this.connectOptions.keepMasterConnection) {
          this.masterPeer.disconnect();
        }

        if (this.checkNextState(LoadBalancingClient.State.ConnectingToGameserver, true)) {
          this.logger.info("Connecting to Game", this.currentRoom.address);
          if (this.gamePeer) this.gamePeer.Destroy();
          this.gamePeer = new GamePeer(this, this.connectionProtocol, this.currentRoom.address, "");
          this.gamePeerWaitingForDisconnect = false;
          this.initGamePeer(this.gamePeer, masterOpCode);
          this.gamePeer.connect(this.appId);
          this.changeState(LoadBalancingClient.State.ConnectingToGameserver);
          return true;
        } else {
          return false;
        }
      };

      LoadBalancingClient.prototype.initGamePeer = function (gp, masterOpCode) {
        var _this = this;

        gp.setLogLevel(this.logger.getLevel()); // errors

        gp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.error, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.GameError, "Game peer error");
        });
        gp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectFailed, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.GameConnectFailed, "Game peer connect failed: " + _this.currentRoom.address);
        });
        gp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.timeout, function () {
          _this.changeState(LoadBalancingClient.State.Error);

          _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.GameTimeout, "Game peer timeout");
        }); // status

        gp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connect, function () {
          gp._logger.info("Connected"); //TODO: encryption phase


          var op = [];
          op.push(LoadBalancing.Constants.ParameterCode.ApplicationId);
          op.push(_this.appId);
          op.push(LoadBalancing.Constants.ParameterCode.AppVersion);
          op.push(_this.appVersion);

          if (_this.connectOptions.userAuthSecret != undefined) {
            op.push(LoadBalancing.Constants.ParameterCode.Secret);
            op.push(_this.connectOptions.userAuthSecret);
          }

          if (_this.userAuthType != LoadBalancing.Constants.CustomAuthenticationType.None) {
            op.push(LoadBalancing.Constants.ParameterCode.ClientAuthenticationType);
            op.push(Photon.TypeExt.Byte(_this.userAuthType));
          }

          if (_this.userId) {
            op.push(LoadBalancing.Constants.ParameterCode.UserId, _this.userId);
          }

          gp.sendOperation(LoadBalancing.Constants.OperationCode.Authenticate, op);

          gp._logger.info("Authenticate...");
        });
        gp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.disconnect, function () {
          if (gp == _this.gamePeer) {
            _this._cleanupGamePeerData();

            gp._logger.info("Disconnected");
          }
        });
        gp.addPeerStatusListener(Photon.PhotonPeer.StatusCodes.connectClosed, function () {
          gp._logger.info("Server closed connection");

          if (!_this.gamePeerWaitingForDisconnect) {
            _this.changeState(LoadBalancingClient.State.Error);

            _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.MasterConnectClosed, "Game server closed connection");
          }
        }); // responses

        gp.addResponseListener(LoadBalancing.Constants.OperationCode.Authenticate, function (data) {
          gp._logger.debug("resp Authenticate", data);

          if (!data.errCode) {
            gp._logger.info("Authenticated");

            gp._logger.info("Connected");

            if (masterOpCode == LoadBalancing.Constants.OperationCode.CreateGame) {
              _this.createRoomInternal(gp, _this.createRoomOptions);
            } else {
              var op = [];
              op.push(LoadBalancing.Constants.ParameterCode.RoomName);
              op.push(_this.currentRoom.name);
              op.push(LoadBalancing.Constants.ParameterCode.Broadcast);
              op.push(true);
              op.push(LoadBalancing.Constants.ParameterCode.PlayerProperties);
              op.push(_this._myActor._getAllProperties());

              if (masterOpCode == LoadBalancing.Constants.OperationCode.JoinGame) {
                if (_this.joinRoomOptions.createIfNotExists) {
                  op.push(LoadBalancing.Constants.ParameterCode.JoinMode, LoadBalancingClient.JoinMode.CreateIfNotExists);

                  _this.fillCreateRoomOptions(op, _this.createRoomOptions);
                }

                if (_this.joinRoomOptions.rejoin) {
                  op.push(LoadBalancing.Constants.ParameterCode.JoinMode, LoadBalancingClient.JoinMode.RejoinOnly);
                }
              }

              gp.sendOperation(LoadBalancing.Constants.OperationCode.JoinGame, op);
            }

            _this.changeState(LoadBalancingClient.State.ConnectedToGameserver);
          } else {
            _this.changeState(LoadBalancingClient.State.Error);

            _this._onErrorInternal(LoadBalancingClient.PeerErrorCode.GameAuthenticationFailed, "Game authentication failed: " + data.errCode + " " + data.errMsg);
          }
        });
        gp.addResponseListener(LoadBalancing.Constants.OperationCode.CreateGame, function (data) {
          gp._logger.debug("resp CreateGame", data);

          if (!data.errCode) {
            _this._myActor._updateMyActorFromResponse(data.vals);

            gp._logger.info("myActor: ", _this._myActor);

            _this.currentRoom._updateFromProps(data.vals[LoadBalancing.Constants.ParameterCode.GameProperties]);

            _this.clearActors();

            _this.addActor(_this._myActor);

            _this.changeState(LoadBalancingClient.State.Joined);

            _this.onJoinRoom(true);
          }

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.CreateGame, data);
        });
        gp.addResponseListener(LoadBalancing.Constants.OperationCode.JoinGame, function (data) {
          gp._logger.debug("resp JoinGame", data);

          if (!data.errCode) {
            _this._myActor._updateMyActorFromResponse(data.vals);

            gp._logger.info("myActor: ", _this._myActor);

            _this.clearActors();

            _this.addActor(_this._myActor);

            var actorList = data.vals[LoadBalancing.Constants.ParameterCode.ActorList];
            var actorProps = data.vals[LoadBalancing.Constants.ParameterCode.PlayerProperties];

            if (actorList !== undefined) {
              for (var i = 0; i < actorList.length; i++) {
                var actorNr = actorList[i];
                var props;
                if (actorProps !== undefined) props = actorProps[actorNr];
                var name;

                if (props !== undefined) {
                  name = props[LoadBalancing.Constants.ActorProperties.PlayerName];
                }

                var a;
                if (actorNr == _this._myActor.actorNr) a = _this._myActor;else {
                  a = _this.actorFactoryInternal(name, actorNr);

                  _this.addActor(a);
                }

                if (props !== undefined) {
                  a._updateCustomProperties(props);
                }
              }
            }

            _this.currentRoom._updateFromProps(data.vals[LoadBalancing.Constants.ParameterCode.GameProperties]);

            _this.changeState(LoadBalancingClient.State.Joined);

            _this.onJoinRoom(false);
          }

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.JoinGame, data);
        });
        gp.addResponseListener(LoadBalancing.Constants.OperationCode.SetProperties, function (data) {
          gp._logger.debug("resp SetProperties", data);

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.SetProperties, data);
        });
        gp.addResponseListener(LoadBalancing.Constants.OperationCode.Leave, function (data) {
          gp._logger.debug("resp Leave", data);

          gp.disconnect();

          _this._onOperationResponseInternal2(LoadBalancing.Constants.OperationCode.Leave, data);
        });
        gp.addResponseListener(LoadBalancing.Constants.OperationCode.Rpc, gp.webRpcHandler(this)); // events

        gp.addEventListener(LoadBalancing.Constants.EventCode.Join, function (data) {
          gp._logger.debug("ev Join", data);

          if (Actor._getActorNrFromResponse(data.vals) === _this._myActor.actorNr) {
            //this._myActor._updateMyActorFromResponse(data.vals);
            _this._myActor._updateFromResponse(data.vals); //                    this.addActor(this._myActor);


            _this.onActorJoin(_this._myActor); // let client read updated properties

          } else {
            var actor = _this.actorFactoryInternal();

            actor._updateFromResponse(data.vals);

            _this.addActor(actor);

            _this.onActorJoin(actor);
          }
        });
        gp.addEventListener(LoadBalancing.Constants.EventCode.Leave, function (data) {
          gp._logger.debug("ev Leave", data);

          _this.myRoom()._updateFromEvent(data.vals); // updating masterClientId


          var actorNr = Actor._getActorNrFromResponse(data.vals);

          if (actorNr && _this.actors[actorNr]) {
            var a = _this.actors[actorNr];

            if (data.vals[LoadBalancing.Constants.ParameterCode.IsInactive]) {
              a._setSuspended(true);

              _this.onActorSuspend(a);
            } else {
              _this.removeActor(actorNr);

              _this.onActorLeave(a, false);
            }
          }
        });
        gp.addEventListener(LoadBalancing.Constants.EventCode.Disconnect, function (data) {
          gp._logger.debug("ev Disconnect", data);

          var actorNr = Actor._getActorNrFromResponse(data.vals);

          if (actorNr && _this.actors[actorNr]) {
            var a = _this.actors[actorNr];

            a._setSuspended(true);

            _this.onActorSuspend(a);
          }
        });
        gp.addEventListener(LoadBalancing.Constants.EventCode.PropertiesChanged, function (data) {
          gp._logger.debug("ev PropertiesChanged", data);

          var targetActorNr = data.vals[LoadBalancing.Constants.ParameterCode.TargetActorNr];

          if (targetActorNr !== undefined && targetActorNr > 0) {
            if (_this.actors[targetActorNr] !== undefined) {
              var actor = _this.actors[targetActorNr];

              actor._updateCustomProperties(data.vals[LoadBalancing.Constants.ParameterCode.Properties]);

              _this.onActorPropertiesChange(actor);
            }
          } else {
            _this.currentRoom._updateFromProps(data.vals[LoadBalancing.Constants.ParameterCode.Properties]);

            _this.onMyRoomPropertiesChange();
          }
        });
      };

      LoadBalancingClient.prototype._cleanupNameServerPeerData = function () {};

      LoadBalancingClient.prototype._cleanupMasterPeerData = function () {};

      LoadBalancingClient.prototype._cleanupGamePeerData = function () {
        for (var i in this.actors) {
          this.onActorLeave(this.actors[i], true);
        }

        this.clearActors();
        this.addActor(this._myActor);
      };

      LoadBalancingClient.prototype._onOperationResponseInternal2 = function (code, data) {
        if (data.errCode) {
          this.logger.warn("Operation", code, "error:", data.errMsg, "(" + data.errCode + ")");
        }

        this.onOperationResponse(data.errCode, data.errMsg, code, data.vals);
      };

      LoadBalancingClient.prototype._onErrorInternal = function (errorCode, errorMsg) {
        this.logger.error("Error:", errorCode, errorMsg);
        this.onError(errorCode, errorMsg);
      }; //TODO: ugly way to init const table


      LoadBalancingClient.prototype.initValidNextState = function () {
        this.validNextState[LoadBalancingClient.State.Error] = [LoadBalancingClient.State.ConnectingToMasterserver, LoadBalancingClient.State.ConnectingToNameServer];
        this.validNextState[LoadBalancingClient.State.Uninitialized] = [LoadBalancingClient.State.ConnectingToMasterserver, LoadBalancingClient.State.ConnectingToNameServer];
        this.validNextState[LoadBalancingClient.State.ConnectedToNameServer] = [LoadBalancingClient.State.ConnectingToMasterserver];
        this.validNextState[LoadBalancingClient.State.Disconnected] = [LoadBalancingClient.State.ConnectingToMasterserver, LoadBalancingClient.State.ConnectingToNameServer];
        this.validNextState[LoadBalancingClient.State.ConnectedToMaster] = [LoadBalancingClient.State.JoinedLobby];
        this.validNextState[LoadBalancingClient.State.JoinedLobby] = [LoadBalancingClient.State.ConnectingToGameserver];
        this.validNextState[LoadBalancingClient.State.ConnectingToGameserver] = [LoadBalancingClient.State.ConnectedToGameserver];
        this.validNextState[LoadBalancingClient.State.ConnectedToGameserver] = [LoadBalancingClient.State.Joined];
      };

      LoadBalancingClient.prototype.checkNextState = function (nextState, dontThrow) {
        if (dontThrow === void 0) {
          dontThrow = false;
        }

        var valid = this.validNextState[this.state];
        var res = valid && valid.indexOf(nextState) >= 0;

        if (!res) {
          if (dontThrow) {
            this.logger.error("LoadBalancingPeer checkNextState fail: " + LoadBalancingClient.StateToName(this.state) + " -> " + LoadBalancingClient.StateToName(nextState));
          } else {
            this.logger.exception(501, "LoadBalancingPeer checkNextState fail: " + LoadBalancingClient.StateToName(this.state) + " -> " + LoadBalancingClient.StateToName(nextState));
          }
        }

        return res;
      };
      /**
          @summary Converts {@link Photon.LoadBalancing.LoadBalancingClient.State State} element to string name.
          @method Photon.LoadBalancing.LoadBalancingClient.StateToName
          @param {Photon.LoadBalancing.LoadBalancingClient.State} state Client state enum element.
          @returns {string} Specified element name or undefined if not found.
      */


      LoadBalancingClient.StateToName = function (value) {
        return Exitgames.Common.Util.getEnumKeyByValue(LoadBalancingClient.State, value);
      };

      LoadBalancingClient.JoinMode = {
        Default: 0,
        CreateIfNotExists: 1,
        //            JoinOrejoin: 2,
        RejoinOnly: 3
      }; // tsc looses all comments after first static member 
      // jsdoc reads comments from any place within class (and may be from any place in file)

      LoadBalancingClient.PeerErrorCode = {
        /**
            @summary Enum for client peers error codes.
            @member Photon.LoadBalancing.LoadBalancingClient.PeerErrorCode
            @readonly
            @property {number} Ok No Error.
            @property {number} MasterError General Master server peer error.
            @property {number} MasterConnectFailed Master server connection error.
            @property {number} MasterConnectClosed Disconnected from Master server.
            @property {number} MasterTimeout Disconnected from Master server for timeout.
            @property {number} MasterEncryptionEstablishError Master server encryption establishing failed.
            @property {number} MasterAuthenticationFailed Master server authentication failed.
            @property {number} GameError General Game server peer error.
            @property {number} GameConnectFailed Game server connection error.
            @property {number} GameConnectClosed Disconnected from Game server.
            @property {number} GameTimeout Disconnected from Game server for timeout.
            @property {number} GameEncryptionEstablishError Game server encryption establishing failed.
            @property {number} GameAuthenticationFailed Game server authentication failed.
            @property {number} NameServerError General NameServer peer error.
            @property {number} NameServerConnectFailed NameServer connection error.
            @property {number} NameServerConnectClosed Disconnected from NameServer.
            @property {number} NameServerTimeout Disconnected from NameServer for timeout.
            @property {number} NameServerEncryptionEstablishError NameServer encryption establishing failed.
            @property {number} NameServerAuthenticationFailed NameServer authentication failed.
         */
        Ok: 0,
        MasterError: 1001,
        MasterConnectFailed: 1002,
        MasterConnectClosed: 1003,
        MasterTimeout: 1004,
        MasterEncryptionEstablishError: 1005,
        MasterAuthenticationFailed: 1101,
        GameError: 2001,
        GameConnectFailed: 2002,
        GameConnectClosed: 2003,
        GameTimeout: 2004,
        GameEncryptionEstablishError: 2005,
        GameAuthenticationFailed: 2101,
        NameServerError: 3001,
        NameServerConnectFailed: 3002,
        NameServerConnectClosed: 3003,
        NameServerTimeout: 3004,
        NameServerEncryptionEstablishError: 3005,
        NameServerAuthenticationFailed: 3101
      };
      LoadBalancingClient.State = {
        /**
            @summary Enum for client states.
            @member Photon.LoadBalancing.LoadBalancingClient.State
            @readonly
            @property {number} Error Critical error occurred.
            @property {number} Uninitialized Client is created but not used yet.
            @property {number} ConnectingToNameServer Connecting to NameServer.
            @property {number} ConnectedToNameServer Connected to NameServer.
            @property {number} ConnectingToMasterserver Connecting to Master (includes connect, authenticate and joining the lobby).
            @property {number} ConnectedToMaster Connected to Master server.
            @property {number} JoinedLobby Connected to Master and joined lobby. Display room list and join/create rooms at will.
            @property {number} ConnectingToGameserver Connecting to Game server(client will authenticate and join/create game).
            @property {number} ConnectedToGameserver Connected to Game server (going to auth and join game).
            @property {number} Joined The client joined room.
            @property {number} Disconnected The client is no longer connected (to any server). Connect to Master to go on.
        */
        Error: -1,
        Uninitialized: 0,
        ConnectingToNameServer: 1,
        ConnectedToNameServer: 2,
        ConnectingToMasterserver: 3,
        ConnectedToMaster: 4,
        JoinedLobby: 5,
        ConnectingToGameserver: 6,
        ConnectedToGameserver: 7,
        Joined: 8,
        Disconnected: 10
      };
      return LoadBalancingClient;
    }();

    LoadBalancing.LoadBalancingClient = LoadBalancingClient; //TODO: internal

    var LbcPeer =
    /** @class */
    function (_super) {
      __extends(LbcPeer, _super);

      function LbcPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      LbcPeer.prototype.webRpc = function (uriPath, parameters, options) {
        var params = [];
        params.push(LoadBalancing.Constants.ParameterCode.UriPath, uriPath);
        params.push(LoadBalancing.Constants.ParameterCode.RpcCallParams, parameters);

        if (options) {
          if (options.sendAuthCookie) {
            params.push(LoadBalancing.Constants.ParameterCode.WebFlags, Photon.TypeExt.Byte(WebFlags.SendAuthCookie));
          }
        }

        this.sendOperation(LoadBalancing.Constants.OperationCode.Rpc, params);
      };

      LbcPeer.prototype.webRpcHandler = function (lbc) {
        var _this = this;

        return function (d) {
          _this._logger.debug("resp Rpc", d);

          var uriPath, message, data, resultCode;

          if (d.errCode == 0) {
            uriPath = d.vals[LoadBalancing.Constants.ParameterCode.UriPath];
            data = d.vals[LoadBalancing.Constants.ParameterCode.RpcCallRetData];
            resultCode = d.vals[LoadBalancing.Constants.ParameterCode.RpcCallRetCode];
          } else {
            _this._logger.error("WebRpc request error:", d.errCode);
          }

          lbc.onWebRpcResult(d.errCode, d.errMsg, uriPath, resultCode, data);
        };
      };

      return LbcPeer;
    }(Photon.PhotonPeer);

    LoadBalancing.LbcPeer = LbcPeer;

    var NameServerPeer =
    /** @class */
    function (_super) {
      __extends(NameServerPeer, _super);

      function NameServerPeer(client, protocol, address, subprotocol) {
        var _this = _super.call(this, protocol, address, subprotocol, client.logger.getPrefix() + " NameServer") || this;

        _this.client = client;
        return _this;
      } // overrides


      NameServerPeer.prototype.onUnhandledEvent = function (code, args) {
        this.client.onEvent(code, args.vals[LoadBalancing.Constants.ParameterCode.CustomEventContent], args.vals[LoadBalancing.Constants.ParameterCode.ActorNr]);
      };

      NameServerPeer.prototype.onUnhandledResponse = function (code, args) {
        this.client.onOperationResponse(args.errCode, args.errMsg, code, args.vals);
      };

      NameServerPeer.prototype.getRegions = function (appId) {
        var params = [];
        params.push(LoadBalancing.Constants.ParameterCode.ApplicationId, appId);
        this.sendOperation(LoadBalancing.Constants.OperationCode.GetRegions, params, true, 0);
      }; // this = LBC


      NameServerPeer.prototype.opAuth = function (appId, appVersion, userAuthType, userAuthParameters, userAuthData, userId, region) {
        var op = [];
        op.push(LoadBalancing.Constants.ParameterCode.ApplicationId, appId);
        op.push(LoadBalancing.Constants.ParameterCode.AppVersion, appVersion);

        if (userAuthType != LoadBalancing.Constants.CustomAuthenticationType.None) {
          op.push(LoadBalancing.Constants.ParameterCode.ClientAuthenticationType, Photon.TypeExt.Byte(userAuthType));
          op.push(LoadBalancing.Constants.ParameterCode.ClientAuthenticationParams, userAuthParameters);

          if (userAuthData) {
            op.push(LoadBalancing.Constants.ParameterCode.ClientAuthenticationData, userAuthData);
          }
        }

        if (userId) {
          op.push(LoadBalancing.Constants.ParameterCode.UserId, userId);
        } //    		if (this.connectOptions.lobbyStats) {
        //    			op.push(Constants.ParameterCode.LobbyStats, true);
        //    		}


        op.push(LoadBalancing.Constants.ParameterCode.Region, region);
        this.sendOperation(LoadBalancing.Constants.OperationCode.Authenticate, op, true, 0);

        this._logger.info("Authenticate...");
      };

      return NameServerPeer;
    }(LbcPeer);

    LoadBalancing.NameServerPeer = NameServerPeer; //TODO: internal

    var MasterPeer =
    /** @class */
    function (_super) {
      __extends(MasterPeer, _super);

      function MasterPeer(client, protocol, address, subprotocol) {
        var _this = _super.call(this, protocol, address, subprotocol, client.logger.getPrefix() + " Master") || this;

        _this.client = client;
        return _this;
      } // overrides


      MasterPeer.prototype.onUnhandledEvent = function (code, args) {
        this.client.onEvent(code, args.vals[LoadBalancing.Constants.ParameterCode.CustomEventContent], args.vals[LoadBalancing.Constants.ParameterCode.ActorNr]);
      };

      MasterPeer.prototype.onUnhandledResponse = function (code, args) {
        this.client.onOperationResponse(args.errCode, args.errMsg, code, args.vals);
      };

      MasterPeer.prototype.findFriends = function (friendsToFind) {
        var params = [];
        params.push(LoadBalancing.Constants.ParameterCode.FindFriendsRequestList);
        params.push(friendsToFind);
        this.sendOperation(LoadBalancing.Constants.OperationCode.FindFriends, params);
      };

      MasterPeer.prototype.requestLobbyStats = function (lobbiesToRequest) {
        var params = [];

        if (lobbiesToRequest && lobbiesToRequest.length > 0) {
          var n = new Array();
          var t = new Array();

          for (var i = 0; i < lobbiesToRequest.length; ++i) {
            n[i] = lobbiesToRequest[i][0];
            t[i] = lobbiesToRequest[i][1];
          }

          params.push(LoadBalancing.Constants.ParameterCode.LobbyName);
          params.push(n);
          params.push(LoadBalancing.Constants.ParameterCode.LobbyType);
          params.push(t);
        }

        this.sendOperation(LoadBalancing.Constants.OperationCode.LobbyStats, params);
      };

      return MasterPeer;
    }(LbcPeer);

    LoadBalancing.MasterPeer = MasterPeer; //TODO: internal

    var GamePeer =
    /** @class */
    function (_super) {
      __extends(GamePeer, _super);

      function GamePeer(client, protocol, address, subprotocol) {
        var _this = _super.call(this, protocol, address, subprotocol, client.logger.getPrefix() + " Game") || this;

        _this.client = client;
        return _this;
      } // overrides


      GamePeer.prototype.onUnhandledEvent = function (code, args) {
        this.client.onEvent(code, args.vals[LoadBalancing.Constants.ParameterCode.CustomEventContent], args.vals[LoadBalancing.Constants.ParameterCode.ActorNr]);
      }; // overrides


      GamePeer.prototype.onUnhandledResponse = function (code, args) {
        this.client.onOperationResponse(args.errCode, args.errMsg, code, args.vals);
      };

      GamePeer.prototype.raiseEvent = function (eventCode, data, options) {
        if (this.client.isJoinedToRoom()) {
          this._logger.debug("raiseEvent", eventCode, data, options);

          var params = [LoadBalancing.Constants.ParameterCode.Code, Photon.TypeExt.Byte(eventCode), LoadBalancing.Constants.ParameterCode.Data, data];

          if (options) {
            if (options.receivers != undefined && options.receivers !== LoadBalancing.Constants.ReceiverGroup.Others) {
              params.push(LoadBalancing.Constants.ParameterCode.ReceiverGroup);
              params.push(Photon.TypeExt.Byte(options.receivers));
            }

            if (options.cache != undefined && options.cache !== LoadBalancing.Constants.EventCaching.DoNotCache) {
              params.push(LoadBalancing.Constants.ParameterCode.Cache);
              params.push(Photon.TypeExt.Byte(options.cache));
            }

            if (options.interestGroup != undefined) {
              if (this.checkGroupNumber(options.interestGroup)) {
                params.push(LoadBalancing.Constants.ParameterCode.Group);
                params.push(Photon.TypeExt.Byte(options.interestGroup));
              } else {
                this._logger.exception(502, "raiseEvent - Group not a number: " + options.interestGroup);
              }
            }

            if (options.targetActors != undefined) {
              params.push(LoadBalancing.Constants.ParameterCode.ActorList);
              params.push(options.targetActors);
            }

            if (options.webForward) {
              params.push(LoadBalancing.Constants.ParameterCode.WebFlags);
              params.push(Photon.TypeExt.Byte(WebFlags.HttpForward));
            }
          }

          this.sendOperation(LoadBalancing.Constants.OperationCode.RaiseEvent, params);
        } else {
          throw new Error("raiseEvent - Not joined!");
        }
      };

      GamePeer.prototype.changeGroups = function (groupsToRemove, groupsToAdd) {
        var params = [];

        if (groupsToRemove != null && groupsToRemove != undefined) {
          this.checkGroupArray(groupsToRemove, "groupsToRemove");
          params.push(LoadBalancing.Constants.ParameterCode.Remove);
          params.push(Photon.TypeExt.Byte(groupsToRemove));
        }

        if (groupsToAdd != null && groupsToAdd != undefined) {
          this.checkGroupArray(groupsToAdd, "groupsToAdd");
          params.push(LoadBalancing.Constants.ParameterCode.Add);
          params.push(Photon.TypeExt.Byte(groupsToAdd));
        }

        this.sendOperation(LoadBalancing.Constants.OperationCode.ChangeGroups, params);
      };

      GamePeer.prototype.checkGroupNumber = function (g) {
        return !(typeof g != "number" || isNaN(g) || g === Infinity || g === -Infinity);
      };

      GamePeer.prototype.checkGroupArray = function (groups, groupsName) {
        if (Exitgames.Common.Util.isArray(groups)) {
          for (var i = 0; i < groups.length; ++i) {
            var g = groups[i];

            if (this.checkGroupNumber(g)) {} else {
              this._logger.exception(503, "changeGroups - " + groupsName + " (" + groups + ") not an array of numbers: element " + i + " = " + g);
            }
          }
        } else {
          this._logger.exception(504, "changeGroups - groupsToRemove not an array: " + groups);
        }
      };

      return GamePeer;
    }(LbcPeer);

    LoadBalancing.GamePeer = GamePeer;
  })(LoadBalancing = Photon.LoadBalancing || (Photon.LoadBalancing = {}));
})(Photon || (Photon = {}));
/**
    Photon Load Balancing API Constants
    @namespace Photon.LoadBalancing.Constants
*/


var Photon;

(function (Photon) {
  var Lite;

  (function (Lite) {
    var Constants;

    (function (Constants) {
      // Summary:
      //     Lite - keys for parameters of operation requests and responses (short: OpKey).
      //
      // Remarks:
      //     These keys match a definition in the Lite application (part of the server
      //     SDK).  If your game is built as extension of Lite, don't re-use these codes
      //     for your custom events.  These keys are defined per application, so Lite
      //     has different keys than MMO or your custom application. This is why these
      //     are not an enumeration.  Lite and Lite Lobby will use the keys 255 and lower,
      //     to give you room for your own codes.  Keys for operation-parameters could
      //     be assigned on a per operation basis, but it makes sense to have fixed keys
      //     for values which are used throughout the whole application.
      Constants.LiteOpKey = {
        // Summary:
        //     (252) Code for list of players in a room. Currently not used.
        ActorList: 252,
        //
        // Summary:
        //     (254) Code of the Actor of an operation. Used for property get and set.
        ActorNr: 254,
        //
        // Summary:
        //     (249) Code for property set (Hashtable).
        ActorProperties: 249,
        //
        // Summary:
        //     (238) The "Add" operation-parameter can be used to add something to some
        //     list or set. E.g. add groups to player's interest groups.
        Add: 238,
        //
        // Summary:
        //     (250) Code for broadcast parameter of OpSetProperties method.
        Broadcast: 250,
        //
        // Summary:
        //     (247) Code for caching events while raising them.
        Cache: 247,
        //
        // Summary:
        //     (244) Code used when sending some code-related parameter, like OpRaiseEvent's
        //     event-code.
        //
        // Remarks:
        //     This is not the same as the Operation's code, which is no longer sent as
        //     part of the parameter Dictionary in Photon 3.
        Code: 244,
        //
        // Summary:
        //     (245) Code of data of an event. Used in OpRaiseEvent.
        Data: 245,
        //
        // Summary:
        //     (255) Code of the game id (a unique room name). Used in OpJoin.
        GameId: 255,
        //
        // Summary:
        //     (248) Code for property set (Hashtable).
        GameProperties: 248,
        //
        // Summary:
        //     (240) Code for "group" operation-parameter (as used in Op RaiseEvent).
        Group: 240,
        //
        // Summary:
        //     (251) Code for property set (Hashtable). This key is used when sending only
        //     one set of properties.  If either ActorProperties or GameProperties are used
        //     (or both), check those keys.
        Properties: 251,
        //
        // Summary:
        //     (246) Code to select the receivers of events (used in Lite, Operation RaiseEvent).
        ReceiverGroup: 246,
        //
        // Summary:
        //     (239) The "Remove" operation-parameter can be used to remove something from
        //     a list. E.g. remove groups from player's interest groups.
        Remove: 239,
        //
        // Summary:
        //     (253) Code of the target Actor of an operation. Used for property set. Is
        //     0 for game.
        TargetActorNr: 253,
        //
        // Summary:
        //     (236) A parameter indicating how long a room instance should be keeped alive in the 
        //     room cache after all players left the room.
        /// <summary>
        EmptyRoomLiveTime: 236
      }; // Summary:
      //     Lite - Event codes.  These codes are defined by the Lite application's logic
      //     on the server side.  Other application's won't necessarily use these.
      //
      // Remarks:
      //     If your game is built as extension of Lite, don't re-use these codes for
      //     your custom events.

      Constants.LiteEventCode = {
        // Summary:
        //     (255) Event Join: someone joined the game
        Join: 255,
        //
        // Summary:
        //     (254) Event Leave: someone left the game
        Leave: 254,
        //
        // Summary:
        //     (253) Event PropertiesChanged
        PropertiesChanged: 253
      }; // Summary:
      //     Lite - Operation Codes.  This enumeration contains the codes that are given
      //     to the Lite Application's operations. Instead of sending "Join", this enables
      //     us to send the byte 255.
      //
      // Remarks:
      //     Other applications (the MMO demo or your own) could define other operations
      //     and other codes.  If your game is built as extension of Lite, don't re-use
      //     these codes for your custom events.

      Constants.LiteOpCode = {
        // Summary:
        //     (248) Operation code to change interest groups in Rooms (Lite application
        //     and extending ones).
        ChangeGroups: 248,
        //
        // Summary:
        //     (251) Operation code for OpGetProperties.
        GetProperties: 251,
        //
        // Summary:
        //     (255) Code for OpJoin, to get into a room.
        Join: 255,
        //
        // Summary:
        //     (254) Code for OpLeave, to get out of a room.
        Leave: 254,
        //
        // Summary:
        //     (253) Code for OpRaiseEvent (not same as eventCode).
        RaiseEvent: 253,
        //
        // Summary:
        //     (252) Code for OpSetProperties.
        SetProperties: 252
      };
    })(Constants = Lite.Constants || (Lite.Constants = {}));
  })(Lite = Photon.Lite || (Photon.Lite = {}));
})(Photon || (Photon = {}));

(function (Photon) {
  var LoadBalancing;

  (function (LoadBalancing) {
    var Constants;

    (function (Constants) {
      var LiteOpKey = Photon.Lite.Constants.LiteOpKey;
      var LiteOpCode = Photon.Lite.Constants.LiteOpCode;
      var LiteEventCode = Photon.Lite.Constants.LiteEventCode;
      /**
          @summary Master and Game servers error codes.
          @member Photon.LoadBalancing.Constants.ErrorCode
          @readonly
          @property {number} Ok No Error.
          @property {number} OperationNotAllowedInCurrentState Operation can't be executed yet.
          @property {number} InvalidOperationCode The operation you called is not implemented on the server (application) you connect to. Make sure you run the fitting applications.
          @property {number} InternalServerError Something went wrong in the server. Try to reproduce and contact Exit Games.
          @property {number} InvalidAuthentication Authentication failed. Possible cause: AppId is unknown to Photon (in cloud service).
          @property {number} GameIdAlreadyExists GameId (name) already in use (can't create another). Change name.
          @property {number} GameFull Game is full. This can when players took over while you joined the game.
          @property {number} GameClosed Game is closed and can't be joined. Join another game.
          @property {number} NoRandomMatchFound Random matchmaking only succeeds if a room exists thats neither closed nor full. Repeat in a few seconds or create a new room.
          @property {number} GameDoesNotExist Join can fail if the room (name) is not existing (anymore). This can happen when players leave while you join.
          @property {number} MaxCcuReached Authorization on the Photon Cloud failed becaus the concurrent users (CCU) limit of the app's subscription is reached.
          @property {number} InvalidRegion Authorization on the Photon Cloud failed because the app's subscription does not allow to use a particular region's server.
      */

      Constants.ErrorCode = {
        Ok: 0,
        // server - Photon low(er) level: <: 0
        /// <summary>
        /// (-3) Operation can't be executed yet (e.g. OpJoin can't be called before being authenticated, RaiseEvent cant be used before getting into a room).
        /// </summary>
        /// <remarks>
        /// Before you call any operations on the Cloud servers, the automated client workflow must complete its authorization.
        /// In PUN, wait until State is: JoinedLobby (with AutoJoinLobby : true) or ConnectedToMaster (AutoJoinLobby : false)
        /// </remarks>
        OperationNotAllowedInCurrentState: -3,
        /// <summary>(-2) The operation you called is not implemented on the server (application) you connect to. Make sure you run the fitting applications.</summary>
        InvalidOperationCode: -2,
        /// <summary>(-1) Something went wrong in the server. Try to reproduce and contact Exit Games.</summary>
        InternalServerError: -1,
        // server - PhotonNetwork: 0x7FFF and down
        // logic-level error codes start with short.max
        /// <summary>(32767) Authentication failed. Possible cause: AppId is unknown to Photon (in cloud service).</summary>
        InvalidAuthentication: 0x7FFF,
        /// <summary>(32766) GameId (name) already in use (can't create another). Change name.</summary>
        GameIdAlreadyExists: 0x7FFF - 1,
        /// <summary>(32765) Game is full. This can when players took over while you joined the game.</summary>
        GameFull: 0x7FFF - 2,
        /// <summary>(32764) Game is closed and can't be joined. Join another game.</summary>
        GameClosed: 0x7FFF - 3,
        // AlreadyMatched: 0x7FFF - 4,
        /// <summary>(32762) Not in use currently.</summary>
        // ServerFull: 0x7FFF - 5,
        /// <summary>(32761) Not in use currently.</summary>
        // UserBlocked: 0x7FFF - 6,
        /// <summary>(32760) Random matchmaking only succeeds if a room exists thats neither closed nor full. Repeat in a few seconds or create a new room.</summary>
        NoRandomMatchFound: 0x7FFF - 7,
        /// <summary>(32758) Join can fail if the room (name) is not existing (anymore). This can happen when players leave while you join.</summary>
        GameDoesNotExist: 0x7FFF - 9,
        /// <summary>(32757) Authorization on the Photon Cloud failed becaus the concurrent users (CCU) limit of the app's subscription is reached.</summary>
        /// <remarks>
        /// Unless you have a plan with "CCU Burst", clients might fail the authentication step during connect. 
        /// Affected client are unable to call operations. Please note that players who end a game and return 
        /// to the Master server will disconnect and re-connect, which means that they just played and are rejected 
        /// in the next minute / re-connect.
        /// This is a temporary measure. Once the CCU is below the limit, players will be able to connect an play again.
        /// 
        /// OpAuthorize is part of connection workflow but only on the Photon Cloud, this error can happen. 
        /// Self-hosted Photon servers with a CCU limited license won't let a client connect at all.
        /// </remarks>
        MaxCcuReached: 0x7FFF - 10,
        /// <summary>(32756) Authorization on the Photon Cloud failed because the app's subscription does not allow to use a particular region's server.</summary>
        /// <remarks>
        /// Some subscription plans for the Photon Cloud are region-bound. Servers of other regions can't be used then.
        /// Check your Master server address and compare it with your Photon Cloud Dashboard's info.
        /// 
        /// OpAuthorize is part of connection workflow but only on the Photon Cloud, this error can happen. 
        /// Self-hosted Photon servers with a CCU limited license won't let a client connect at all.
        /// </remarks>
        InvalidRegion: 0x7FFF - 11,
        /// <summary>
        /// (32755) Custom Authentication of the user failed due to setup reasons (see Cloud Dashboard) or the provided user data (like username or token). Check error message for details.
        /// </summary>
        CustomAuthenticationFailed: 0x7FFF - 12,
        /// <summary>(32753) The Authentication ticket expired. Usually, this is refreshed behind the scenes. Connect (and authorize) again.</summary>
        AuthenticationTicketExpired: 0x7FF1,
        /// <summary>
        /// (32752) A server-side plugin (or webhook) failed to execute and reported an error. Check the OperationResponse.DebugMessage.
        /// </summary>
        PluginReportedError: 0x7FFF - 15,
        /// <summary>
        /// (32751) CreateGame/JoinGame/Join operation fails if expected plugin does not correspond to loaded one.
        /// </summary>
        PluginMismatch: 0x7FFF - 16,
        /// <summary>
        /// (32750) for join requests. Indicates the current peer already called join and is joined to the room.
        /// </summary>
        JoinFailedPeerAlreadyJoined: 32750,
        /// <summary>
        /// (32749)  for join requests. Indicates the list of InactiveActors already contains an actor with the requested ActorNr or UserId.
        /// </summary>
        JoinFailedFoundInactiveJoiner: 32749,
        /// <summary>
        /// (32748) for join requests. Indicates the list of Actors (active and inactive) did not contain an actor with the requested ActorNr or UserId.
        /// </summary>
        JoinFailedWithRejoinerNotFound: 32748,
        /// <summary>
        /// (32747) for join requests. Note: for future use - Indicates the requested UserId was found in the ExcludedList.
        /// </summary>
        JoinFailedFoundExcludedUserId: 32747,
        /// <summary>
        /// (32746) for join requests. Indicates the list of ActiveActors already contains an actor with the requested ActorNr or UserId.
        /// </summary>
        JoinFailedFoundActiveJoiner: 32746,
        /// <summary>
        /// (32745)  for SetProerties and Raisevent (if flag HttpForward is true) requests. Indicates the maximum allowed http requests per minute was reached.
        /// </summary>
        HttpLimitReached: 32745,
        /// <summary>
        /// (32744) for WebRpc requests. Indicates the the call to the external service failed.
        /// </summary>
        ExternalHttpCallFailed: 32744,
        /// <summary>
        /// (32742) Server error during matchmaking with slot reservation. E.g. the reserved slots can not exceed MaxPlayers.
        /// </summary>
        SlotError: 32742,
        /// <summary>
        /// (32741) Server will react with this error if invalid encryption parameters provided by token
        /// </summary>
        InvalidEncryptionParameters: 32741
      }; /// <summary>
      /// These  values define "well known" properties for an Actor / Player.
      /// </summary>
      /// <remarks>
      /// "Custom properties" have to use a string-type as key. They can be assigned at will.
      /// </remarks>

      Constants.ActorProperties = {
        /// <summary>(255) Name of a player/actor.</summary>
        PlayerName: 255
      };
      /** End user doesn't need this */
      /// <summary>
      /// These  values are for "well known" room/game properties used in Photon Loadbalancing.
      /// </summary>
      /// <remarks>
      /// "Custom properties" have to use a string-type as key. They can be assigned at will.
      /// </remarks>

      Constants.GameProperties = {
        /// <summary>(255) Max number of players that "fit" into this room. 0 is for "unlimited".</summary>
        MaxPlayers: 255,
        /// <summary>(254) Makes this room listed or not in the lobby on Master.</summary>
        IsVisible: 254,
        /// <summary>(253) Allows more players to join a room (or not).</summary>
        IsOpen: 253,
        /// <summary>(252) Current count od players in the room. Used only in the lobby on Master.</summary>
        PlayerCount: 252,
        /// <summary>(251) True if the room is to be removed from room listing (used in update to room list in lobby on Master)</summary>
        Removed: 251,
        /// <summary>(250) A list of the room properties to pass to the RoomInfo list in a lobby. This is used in CreateRoom, which defines this list once per room.</summary>
        PropsListedInLobby: 250,
        /// <summary>Equivalent of Operation Join parameter CleanupCacheOnLeave.</summary>
        CleanupCacheOnLeave: 249,
        /// <summary>(248) Code for MasterClientId, which is synced by server. When sent as op-parameter this is (byte)203. As room property this is (byte)248.</summary>
        /// <remarks>Tightly related to ParameterCode.MasterClientId.</remarks>
        MasterClientId: 248,
        /// <summary>(246) Player Time To Live. How long any player can be inactive (due to disconnect or leave) before the user gets removed from the playerlist (freeing a slot).</summary>
        PlayerTtl: 246,
        /// <summary>(245) Room Time To Live. How long a room stays available (and in server-memory), after the last player becomes inactive. After this time, the room gets persisted or destroyed.</summary>
        EmptyRoomTtl: 245
      };
      /** End user doesn't need this */
      /// <summary>
      /// These values are for events defined by Photon Loadbalancing.
      /// </summary>
      /// <remarks>They start at 255 and go DOWN. Your own in-game events can start at 0.</remarks>

      Constants.EventCode = {
        /// <summary>(230) Initial list of RoomInfos (in lobby on Master)</summary>
        GameList: 230,
        /// <summary>(229) Update of RoomInfos to be merged into "initial" list (in lobby on Master)</summary>
        GameListUpdate: 229,
        /// <summary>(228) Currently not used. State of queueing in case of server-full</summary>
        QueueState: 228,
        /// <summary>(227) Currently not used. Event for matchmaking</summary>
        // Match: 227,
        /// <summary>(226) Event with stats about this application (players, rooms, etc)</summary>
        AppStats: 226,
        /// <summary>(210) Internally used in case of hosting by Azure</summary>
        AzureNodeInfo: 210,
        /// <summary>(255) Event Join: someone joined the game. The new actorNumber is provided as well as the properties of that actor (if set in OpJoin).</summary>
        Join: LiteEventCode.Join,
        /// <summary>(254) Event Leave: The player who left the game can be identified by the actorNumber.</summary>
        Leave: LiteEventCode.Leave,
        /// <summary>(253) When you call OpSetProperties with the broadcast option "on", this event is fired. It contains the properties being set.</summary>
        PropertiesChanged: LiteEventCode.PropertiesChanged,
        /// <summary>(252) When player left game unexpecable and playerTtl > 0 this event is fired</summary>
        Disconnect: 252,
        LobbyStats: 224
      };
      /** End user doesn't need this */
      /// <summary>Codes for parameters of Operations and Events.</summary>

      Constants.ParameterCode = {
        /// <summary>(230) Address of a (Game) server to use.</summary>
        Address: 230,
        /// <summary>(229) Count of players in this application in a rooms (used in stats event)</summary>
        PeerCount: 229,
        /// <summary>(228) Count of games in this application (used in stats event)</summary>
        GameCount: 228,
        /// <summary>(227) Count of players on the Master server (in this app, looking for rooms)</summary>
        MasterPeerCount: 227,
        /// <summary>(225) User's ID</summary>
        UserId: 225,
        /// <summary>(224) Your application's ID: a name on your own Photon or a GUID on the Photon Cloud</summary>
        ApplicationId: 224,
        /// <summary>(223) Not used currently (as "Position"). If you get queued before connect, this is your position</summary>
        Position: 223,
        /// <summary>(223) Modifies the matchmaking algorithm used for OpJoinRandom. Allowed parameter values are defined in enum MatchmakingMode.</summary>
        MatchMakingType: 223,
        /// <summary>(222) List of RoomInfos about open / listed rooms</summary>
        GameList: 222,
        /// <summary>(221) Internally used to establish encryption</summary>
        Secret: 221,
        /// <summary>(220) Version of your application</summary>
        AppVersion: 220,
        /// <summary>(210) Internally used in case of hosting by Azure</summary>
        AzureNodeInfo: 210,
        /// <summary>(209) Internally used in case of hosting by Azure</summary>
        AzureLocalNodeId: 209,
        /// <summary>(208) Internally used in case of hosting by Azure</summary>
        AzureMasterNodeId: 208,
        /// <summary>(255) Code for the gameId/roomName (a unique name per room). Used in OpJoin and similar.</summary>
        RoomName: LiteOpKey.GameId,
        /// <summary>(250) Code for broadcast parameter of OpSetProperties method.</summary>
        Broadcast: LiteOpKey.Broadcast,
        /// <summary>(252) Code for list of players in a room. Currently not used.</summary>
        ActorList: LiteOpKey.ActorList,
        /// <summary>(254) Code of the Actor of an operation. Used for property get and set.</summary>
        ActorNr: LiteOpKey.ActorNr,
        /// <summary>(249) Code for property set (Hashtable).</summary>
        PlayerProperties: LiteOpKey.ActorProperties,
        /// <summary>(245) Code of data/custom content of an event. Used in OpRaiseEvent.</summary>
        CustomEventContent: LiteOpKey.Data,
        /// <summary>(245) Code of data of an event. Used in OpRaiseEvent.</summary>
        Data: LiteOpKey.Data,
        /// <summary>(244) Code used when sending some code-related parameter, like OpRaiseEvent's event-code.</summary>
        /// <remarks>This is not the same as the Operation's code, which is no longer sent as part of the parameter Dictionary in Photon 3.</remarks>
        Code: LiteOpKey.Code,
        /// <summary>(248) Code for property set (Hashtable).</summary>
        GameProperties: LiteOpKey.GameProperties,
        /// <summary>
        /// (251) Code for property-set (Hashtable). This key is used when sending only one set of properties.
        /// If either ActorProperties or GameProperties are used (or both), check those keys.
        /// </summary>
        Properties: LiteOpKey.Properties,
        /// <summary>(253) Code of the target Actor of an operation. Used for property set. Is 0 for game</summary>
        TargetActorNr: LiteOpKey.TargetActorNr,
        /// <summary>(246) Code to select the receivers of events (used in Lite, Operation RaiseEvent).</summary>
        ReceiverGroup: LiteOpKey.ReceiverGroup,
        /// <summary>(247) Code for caching events while raising them.</summary>
        Cache: LiteOpKey.Cache,
        /// <summary>(241) Boolean parameter of CreateGame Operation. If true, server cleans up roomcache of leaving players (their cached events get removed).</summary>
        CleanupCacheOnLeave: 241,
        /// <summary>(240) Code for "group" operation-parameter (as used in Op RaiseEvent).</summary>
        Group: LiteOpKey.Group,
        /// <summary>(239) The "Remove" operation-parameter can be used to remove something from a list. E.g. remove groups from player's interest groups.</summary>
        Remove: LiteOpKey.Remove,
        /// <summary>(238) The "Add" operation-parameter can be used to add something to some list or set. E.g. add groups to player's interest groups.</summary>
        Add: LiteOpKey.Add,
        /// <summary>(236) A parameter indicating how long a room instance should be keeped alive in the room cache after all players left the room.</summary>
        EmptyRoomTTL: LiteOpKey.EmptyRoomLiveTime,
        PlayerTTL: 235,
        Plugins: 204,
        /// <summary>(217) This key's (byte) value defines the target custom authentication type/service the client connects with. Used in OpAuthenticate.</summary>
        ClientAuthenticationType: 217,
        /// <summary>(216) This key's (string) value provides parameters sent to the custom authentication type/service the client connects with. Used in OpAuthenticate.</summary>
        ClientAuthenticationParams: 216,
        ClientAuthenticationData: 214,
        /// <summary>(215) The JoinMode enum defines which variant of joining a room will be executed: Join only if available, create if not exists or re -join.</summary >
        /// <remarks>Replaces CreateIfNotExists which was only a bool -value.</remarks >
        JoinMode: 215,
        /// <summary>(203) Code for MasterClientId, which is synced by server. When sent as op-parameter this is code 203.</summary>
        /// <remarks>Tightly related to GamePropertyKey.MasterClientId.</remarks>
        MasterClientId: 203,
        /// <summary>(1) Used in Op FindFriends request. Value must be string[] of friends to look up.</summary>
        FindFriendsRequestList: 1,
        /// <summary>(1) Used in Op FindFriends response. Contains boolean[] list of online states (false if not online).</summary>
        FindFriendsResponseOnlineList: 1,
        /// <summary>(2) Used in Op FindFriends response. Contains string[] of room names ("" where not known or no room joined).</summary>
        FindFriendsResponseRoomIdList: 2,
        /// <summary>(213) Used in matchmaking-related methods and when creating a room to name a lobby (to join or to attach a room to).</summary>
        LobbyName: 213,
        /// <summary>(212) Used in matchmaking-related methods and when creating a room to define the type of a lobby. Combined with the lobby name this identifies the lobby.</summary>
        LobbyType: 212,
        LobbyStats: 211,
        /// <summary>(210) Used for region values in OpAuth and OpGetRegions.</summary >
        Region: 210,
        IsInactive: 233,
        CheckUserOnJoin: 232,
        /// <summary>(231) Code for "Check And Swap" (CAS) when changing properties.</summary>
        ExpectedValues: 231,
        UriPath: 209,
        RpcCallParams: 208,
        RpcCallRetCode: 207,
        RpcCallRetMessage: 206,
        RpcCallRetData: 208,
        WebFlags: 234,
        // Used by the server in Operation Responses, when it sends the nickname of the client (the user's nickname).
        Nickname: 202
      };
      /**
          @summary Codes for parameters and events used in Photon Load Balancing API.
          @member Photon.LoadBalancing.Constants.OperationCode
          @readonly
          @property {number} Authenticate Authenticates this peer and connects to a virtual application.
          @property {number} JoinLobby Joins lobby (on Master).
          @property {number} LeaveLobby Leaves lobby (on Master).
          @property {number} CreateGame Creates a game (or fails if name exists).
          @property {number} JoinGame Joins room (by name).
          @property {number} JoinRandomGame Joins random room (on Master).
          @property {number} Leave Leaves the room.
          @property {number} RaiseEvent Raises event (in a room, for other actors/players).
          @property {number} SetProperties Sets Properties (of room or actor/player).
          @property {number} GetProperties Gets Properties.
          @property {number} ChangeGroups Changes interest groups in room.
          @property {number} FindFriends Requests Master server for actors online status and joined rooms.
          @property {number} LobbyStats Requests Master server for lobbies statistics.
      */

      Constants.OperationCode = {
        /// <summary>(230) Authenticates this peer and connects to a virtual application</summary>
        Authenticate: 230,
        /// <summary>(229) Joins lobby (on Master)</summary>
        JoinLobby: 229,
        /// <summary>(228) Leaves lobby (on Master)</summary>
        LeaveLobby: 228,
        /// <summary>(227) Creates a game (or fails if name exists)</summary>
        CreateGame: 227,
        /// <summary>(226) Join game (by name)</summary>
        JoinGame: 226,
        /// <summary>(225) Joins random game (on Master)</summary>
        JoinRandomGame: 225,
        // CancelJoinRandom : 224, // obsolete, cause JoinRandom no longer is a "process". now provides result immediately
        /// <summary>(254) Code for OpLeave, to get out of a room.</summary>
        Leave: LiteOpCode.Leave,
        /// <summary>(253) Raise event (in a room, for other actors/players)</summary>
        RaiseEvent: LiteOpCode.RaiseEvent,
        /// <summary>(252) Set Properties (of room or actor/player)</summary>
        SetProperties: LiteOpCode.SetProperties,
        /// <summary>(251) Get Properties</summary>
        GetProperties: LiteOpCode.GetProperties,
        /// <summary>(248) Operation code to change interest groups in Rooms (Lite application and extending ones).</summary>
        ChangeGroups: LiteOpCode.ChangeGroups,
        /// <summary>(222) Request the rooms and online status for a list of friends (by name, which should be unique).</summary>
        FindFriends: 222,
        LobbyStats: 221,
        /// <summary>(220) Gets list of regional servers from a NameServer.</summary>
        GetRegions: 220,
        /// <summary>(219) Rpc Operation.</summary>
        Rpc: 219
      };
      /**
          @summary Options for matchmaking rules for joinRandomGame.
          @member Photon.LoadBalancing.Constants.MatchmakingMode
          @readonly
          @property {number} FillRoom Default. FillRoom Fills up rooms (oldest first) to get players together as fast as possible. Makes most sense with MaxPlayers > 0 and games that can only start with more players.
          @property {number} SerialMatching Distributes players across available rooms sequentially but takes filter into account. Without filter, rooms get players evenly distributed.
          @property {number} RandomMatching Joins a (fully) random room. Expected properties must match but aside from this, any available room might be selected.
      */

      Constants.MatchmakingMode = {
        /// <summary>Fills up rooms (oldest first) to get players together as fast as possible. Default.</summary>
        /// <remarks>Makes most sense with MaxPlayers > 0 and games that can only start with more players.</remarks>
        FillRoom: 0,
        /// <summary>Distributes players across available rooms sequentially but takes filter into account. Without filter, rooms get players evenly distributed.</summary>
        SerialMatching: 1,
        /// <summary>Joins a (fully) random room. Expected properties must match but aside from this, any available room might be selected.</summary>
        RandomMatching: 2
      };
      /**
          @summary Caching options for events.
          @member Photon.LoadBalancing.Constants.EventCaching
          @readonly
          @property {number} DoNotCache Default. Do not cache.
          @property {number} MergeCache Will merge this event's keys with those already cached.
          @property {number} ReplaceCache Replaces the event cache for this eventCode with this event's content.
          @property {number} RemoveCache Removes this event (by eventCode) from the cache.
          @property {number} AddToRoomCache Adds an event to the room's cache.
          @property {number} AddToRoomCacheGlobal Adds this event to the cache for actor 0 (becoming a "globally owned" event in the cache).
          @property {number} RemoveFromRoomCache Remove fitting event from the room's cache.
          @property {number} RemoveFromRoomCacheForActorsLeft Removes events of players who already left the room (cleaning up).
      */

      Constants.EventCaching = {
        // Summary:
        //     Default value (not sent).
        DoNotCache: 0,
        //
        // Summary:
        //     Will merge this event's keys with those already cached.
        MergeCache: 1,
        //
        // Summary:
        //     Replaces the event cache for this eventCode with this event's content.
        ReplaceCache: 2,
        //
        // Summary:
        //     Removes this event (by eventCode) from the cache.
        RemoveCache: 3,
        //
        // Summary:
        //     Adds an event to the room's cache.
        AddToRoomCache: 4,
        //
        // Summary:
        //     Adds this event to the cache for actor 0 (becoming a "globally owned" event
        //     in the cache).
        AddToRoomCacheGlobal: 5,
        //
        // Summary:
        //     Remove fitting event from the room's cache.
        RemoveFromRoomCache: 6,
        //
        // Summary:
        //     Removes events of players who already left the room (cleaning up).
        RemoveFromRoomCacheForActorsLeft: 7
      };
      /**
          @summary Options for choosing room's actors who should receive events.
          @member Photon.LoadBalancing.Constants.ReceiverGroup
          @readonly
          @property {number} Others Default. Anyone else gets my event.
          @property {number} All Everyone in the current room (including this peer) will get this event.
          @property {number} MasterClient The "master client" does not have special rights but is the one who is in this room the longest time.
      */

      Constants.ReceiverGroup = {
        // Summary:
        //     Default value (not sent). Anyone else gets my event.
        Others: 0,
        //
        // Summary:
        //     Everyone in the current room (including this peer) will get this event.
        All: 1,
        //
        // Summary:
        //     The server sends this event only to the actor with the lowest actorNumber.
        //
        // Remarks:
        //     The "master client" does not have special rights but is the one who is in
        //     this room the longest time.
        MasterClient: 2
      };
      /**
          @summary Options for optional "Custom Authentication" services used with Photon.
          @member Photon.LoadBalancing.Constants.CustomAuthenticationType
          @readonly
          @property {number} Custom Default. Use a custom authentification service.
          @property {number} Steam Authenticates users by their Steam Account. Set auth values accordingly.
          @property {number} Facebook Authenticates users by their Facebook Account. Set auth values accordingly.
          @property {number} None Disables custom authentification.
      */

      Constants.CustomAuthenticationType = {
        Custom: 0,
        Steam: 1,
        Facebook: 2,
        None: 255
      };
      /**
          @summary Options of lobby types available. Lobby types might be implemented in certain Photon versions and won't be available on older servers.
          @member Photon.LoadBalancing.Constants.LobbyType
          @readonly
          @property {number} Default This lobby is used unless another is defined by game or JoinRandom. Room-lists will be sent and JoinRandomRoom can filter by matching properties.
          @property {number} SqlLobby This lobby type lists rooms like Default but JoinRandom has a parameter for SQL-like "where" clauses for filtering. This allows bigger, less, or and and combinations.
      **/

      Constants.LobbyType = {
        Default: 0,
        SqlLobby: 2
      };
    })(Constants = LoadBalancing.Constants || (LoadBalancing.Constants = {}));
  })(LoadBalancing = Photon.LoadBalancing || (Photon.LoadBalancing = {}));
})(Photon || (Photon = {})); /// <reference path="photon-common.ts"/>

/**
    Photon Chat API Constants
    @namespace Photon.Chat.Constants
*/


var Photon;

(function (Photon) {
  var Chat;

  (function (Chat) {
    var Constants;

    (function (Constants) {
      Constants.ParameterCode = {
        Channels: 0,
        Channel: 1,
        Messages: 2,
        Message: 3,
        Senders: 4,
        Sender: 5,
        ChannelUserCount: 6,
        UserId: 225,
        MsgId: 8,
        MsgIds: 9,
        SubscribeResults: 15,
        Status: 10,
        Friends: 11,
        SkipMessage: 12,
        HistoryLength: 14,
        WebFlags: 21
      }; //- Codes for parameters and events used in Photon Chat API.

      Constants.OperationCode = {
        Subscribe: 0,
        Unsubscribe: 1,
        Publish: 2,
        SendPrivate: 3,
        ChannelHistory: 4,
        UpdateStatus: 5,
        AddFriendds: 6,
        RemoveFriends: 7 // Removes users from the list that should update you of their status.

      };
      Constants.EventCode = {
        ChatMessages: 0,
        Users: 1,
        PrivateMessage: 2,
        FriendsList: 3,
        StatusUpdate: 4,
        Subscribe: 5,
        Unsubscribe: 6
      };
      /**
          @summary Contains commonly used status values for {@link Photon.Chat.ChatClient#setUserStatus}.You can define your own.<br/>
          While "online"(Online and up), the status message will be sent to anyone who has you on his friend list.<br/>
          Define custom online status values as you like with these rules:<br/>
          0: Means "offline".It will be used when you are not connected. In this status, there is no status message.<br/>
          1: Means "invisible" and is sent to friends as "offline". They see status 0, no message but you can chat.<br/>
          2: And any higher value will be treated as "online". Status can be set.<br/>
          @readonly
          @property {number} Offline Offline.
          @property {number} Invisible Offline. Be invisible to everyone. Sends no message.
          @property {number} Online Online and available.
          @property {number} Away Online but not available.
          @property {number} Dnd Do not disturb.
          @property {number} Lfg Looking For Game / Group. Could be used when you want to be invited or do matchmaking.
          @property {number} Playing Could be used when in a room, playing.
          @member Photon.Chat.Constants.UserStatus
      */

      Constants.UserStatus = {
        Offline: 0,
        Invisible: 1,
        Online: 2,
        Away: 3,
        Dnd: 4,
        Lfg: 5,
        Playing: 6
      };
      /**
          @summary Converts {@link Photon.Chat.Constants.UserStatus} element to string name.
          @param {Photon.Chat.Constants.UserStatus} status User status enum element.
          @returns {string} Specified element name or undefined if not found.
          @method Photon.Chat.Constants.UserStatusToName
      */

      function UserStatusToName(status) {
        return Exitgames.Common.Util.getEnumKeyByValue(Constants.UserStatus, status);
      }

      Constants.UserStatusToName = UserStatusToName;
    })(Constants = Chat.Constants || (Chat.Constants = {}));
  })(Chat = Photon.Chat || (Photon.Chat = {}));
})(Photon || (Photon = {})); /// <reference path="photon-loadbalancing.ts"/>
/// <reference path="photon-chat-constants.ts"/>

/**
    Photon Chat API
    @namespace Photon.Chat
*/


var Photon;

(function (Photon) {
  var Chat;

  (function (Chat) {
    var WebFlags = {
      HttpForward: 0x01,
      SendAuthCookie: 0x02,
      SendSync: 0x04,
      SendState: 0x08
    };
    /**
        @class Photon.Chat.Message
        @classdesc Encapsulates chat message data.
    */

    var Message =
    /** @class */
    function () {
      function Message(sender, content) {
        this.sender = sender;
        this.content = content;
      }
      /**
          @summary Returns message sender.
          @return {string} Message sender.
          @method Photon.Chat.Message#getSender
      */


      Message.prototype.getSender = function () {
        return this.sender;
      };
      /**
          @summary Returns message content.
          @return {any} Message content.
          @method Photon.Chat.Message#getContent
      */


      Message.prototype.getContent = function () {
        return this.content;
      };

      return Message;
    }();

    Chat.Message = Message;
    /**
        @class Photon.Chat.Channel
        @classdesc Represents chat channel.
    */

    var Channel =
    /** @class */
    function () {
      function Channel(name, isPrivat) {
        this.name = name;
        this.isPrivat = isPrivat;
        this.messages = [];
      }
      /**
          @summary Returns channel name (counterpart user id for private channel).
          @return {string} Channel name.
          @method Photon.Chat.Channel#getName
      */


      Channel.prototype.getName = function () {
        return this.name;
      };
      /**
          @summary Returns true if channel is private.
          @return {boolean} Channel private status.
          @method Photon.Chat.Channel#isPrivate
      */


      Channel.prototype.isPrivate = function () {
        return this.isPrivat;
      };
      /**
          @summary Returns messages cache.
          @return {{@link Photon.Chat.Message}[]} Array of messages.
          @method Photon.Chat.Channel#getMessages
      */


      Channel.prototype.getMessages = function () {
        return this.messages;
      };
      /**
          @summary Returns ID of the last message received.
          @return {number} Last message ID.
          @method Photon.Chat.Channel#getLastId
      */


      Channel.prototype.getLastId = function () {
        return this.lastId;
      };
      /**
          @summary Clears messages cache.
          @method Photon.Chat.Channel#clearMessages
      */


      Channel.prototype.clearMessages = function () {
        this.messages.splice(0);
      }; // internal


      Channel.prototype.addMessages = function (senders, messages) {
        var newMessages = [];

        for (var i in senders) {
          if (parseInt(i) < messages.length) {
            var m = new Message(senders[i], messages[i]);
            this.messages.push(m);
            newMessages.push(m);
          }
        }

        return newMessages;
      };

      return Channel;
    }();

    Chat.Channel = Channel;

    var ChatClient =
    /** @class */
    function (_super) {
      __extends(ChatClient, _super);
      /**
          @classdesc Implements the Photon Chat API workflow.<br/>
          This class should be extended to handle system or custom events and operation responses.<br/>
          
          @borrows Photon.LoadBalancing.LoadBalancingClient#setCustomAuthentication
          @borrows Photon.LoadBalancing.LoadBalancingClient#connectToNameServer
          @borrows Photon.LoadBalancing.LoadBalancingClient#getRegions
          @borrows Photon.LoadBalancing.LoadBalancingClient#onGetRegionsResult
          @borrows Photon.LoadBalancing.LoadBalancingClient#isConnectedToNameServer
          @borrows Photon.LoadBalancing.LoadBalancingClient#disconnect
          @borrows Photon.LoadBalancing.LoadBalancingClient#setLogLevel
                @constructor Photon.Chat.ChatClient
          @param {Photon.ConnectionProtocol} protocol Connecton protocol.
          @param {string} appId Cloud application ID.
          @param {string} appVersion Cloud application version.
      */


      function ChatClient(protocol, appId, appVersion) {
        var _this = _super.call(this, protocol, appId, appVersion) || this;

        _this.publicChannels = {};
        _this.privateChannels = {};
        _this.subscribeRequests = [];
        _this.unsubscribeRequests = [];
        _this.autoJoinLobby = false;
        return _this;
      }
      /**
          @summary Called on client state change. Override to handle it.
          @method Photon.Chat.ChatClient#onStateChange
          @param {Photon.Chat.ChatClient.ChatState} state New client state.
      */


      ChatClient.prototype.onStateChange = function (state) {};
      /**
          @summary Called if client error occures. Override to handle it.
          @method Chat.ChatClient#onError
          @param {Chat.ChatClient.ChatPeerErrorCode} errorCode Client error code.
          @param {string} errorMsg Error message.
      */


      ChatClient.prototype.onError = function (errorCode, errorMsg) {};
      /**
          @summary Called when {@link Photon.Chat.ChatClient#subscribe subscribe} request completed.<br/ >
          Override to handle request results.
          @param {object} results Object with channel names as keys and boolean results as values.
          @method Photon.Chat.ChatClient#onSubscribeResult
      */


      ChatClient.prototype.onSubscribeResult = function (results) {};
      /**
          @summary Called when {@link Photon.Chat.ChatClient#unsubscribe unsubscribe} request completed.<br/ >
          Override to handle request results.
          @param {object} results Object with channel names as keys and boolean results as values.
          @method Photon.Chat.ChatClient#onUnsubscribeResult
      */


      ChatClient.prototype.onUnsubscribeResult = function (results) {};
      /**
          @summary Called when new chat messages received.<br/ >
          Override to handle messages receive event.
          @param {string} channelName Chat channel name.
          @param {{@link Photon.Chat.Message}[]} messages Array of received messages.
          @method Photon.Chat.ChatClient#onChatMessages
      */


      ChatClient.prototype.onChatMessages = function (channelName, messages) {};
      /**
          @summary Called when new private message received.<br/ >
          Override to handle message receive event.
          @param {string} channelName Private channel name(counterpart user id).
          @param {Photon.Chat.Message} message Received message.
          @method Photon.Chat.ChatClient#onPrivateMessage
      */


      ChatClient.prototype.onPrivateMessage = function (channelName, message) {};
      /**
          @summary Called when user from friend list changes state.<br/ >
          Override to handle change state event.
          @param {string} userId User id.
          @param {number} status New User status. Predefined {@link Photon.chat.Constants.UserStatus Constants.UserStatus} or custom.
          @param {boolean} gotMessage True if status message updated.
          @param {string} statusMessage Optional status message (may be null even if gotMessage = true).
          @method Photon.Chat.ChatClient#onUserStatusUpdate
      */


      ChatClient.prototype.onUserStatusUpdate = function (userId, status, gotMessage, statusMessage) {};
      /**
          @summary Connects to a specific region's Master server, using the NameServer to find the IP.
          Override {@link Photon.Chat.ChatClient#onWebRpcResult onWebRpcResult} to handle request results.<br/>
          @method Photon.Chat.ChatClient#connectToRegionFrontEnd
          @param {string} region Region connect to Master server of.
          @returns {boolean} True if current client state allows connection.
      **/


      ChatClient.prototype.connectToRegionFrontEnd = function (region) {
        return this.connectToRegionMaster(region);
      };
      /**
          @summary Returns true if client connected to Front End.When connected, client can send messages, subscribe to channels and so on.
          @return {boolean} True if connected.
          @method Photon.Chat.ChatClient#isConnectedToFrontEnd
      */


      ChatClient.prototype.isConnectedToFrontEnd = function () {
        return this.state == ChatClient.ChatState.ConnectedToFrontEnd;
      };
      /**
          @summary Sends operation to subscribe to a list of channels by name.<br/>
          Override {@link Photon.Chat.ChatClient#onSubscribeResult onSubscribeResult} to handle request results.
          @param {string[]} channelNames Array of channel names to subscribe to.
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {number} [options.historyLength] Controls messages history sent on subscription. Not specified or 0: no history. 1 and higher: number of messages in history. -1: all history.
          @property {number[]} [options.lastIds] Array of IDs of last messages received per channel. Useful when resubscribing to receive only messages we missed.
          @return {boolean} True if operation sent.
          @method Photon.Chat.ChatClient#subscribe
      */


      ChatClient.prototype.subscribe = function (channelNames, options) {
        // backward compatibility
        if (typeof options == "number") {
          options = {
            historyLength: options
          };
        }

        if (this.isConnectedToFrontEnd()) {
          this.logger.debug("Subscribe channels:", channelNames);
          var params = [];
          params.push(Chat.Constants.ParameterCode.Channels, Photon.TypeExt.String(channelNames));

          if (options) {
            if (options.historyLength) {
              params.push(Chat.Constants.ParameterCode.HistoryLength, Photon.TypeExt.Int(options.historyLength));
            }

            if (options.lastIds) {
              params.push(Chat.Constants.ParameterCode.MsgIds, Photon.TypeExt.Int(options.lastIds));

              if (options.historyLength === undefined) {
                params.push(Chat.Constants.ParameterCode.HistoryLength, Photon.TypeExt.Int(-1));
              }
            }
          }

          this.masterPeer.sendOperation(Chat.Constants.OperationCode.Subscribe, params);
          return true;
        } else {
          this.logger.error("subscribe request error:", "Not connected to Front End");
          return false;
        }
      };
      /**
          @summary Sends operation to unsubscribe from a list of channels by name.<br/ >
          Override {@link Photon.Chat.ChatClient#onUnsubscribeResult onUnsubscribeResult} to handle request results.
          @param {string[]} channelNames Array of channel names to unsubscribe from.
          @return {boolean} True if operation sent.
          @method Photon.Chat.ChatClient#unsubscribe
      */


      ChatClient.prototype.unsubscribe = function (channelNames) {
        if (this.isConnectedToFrontEnd()) {
          this.logger.debug("Unsubscribe channels:", channelNames);
          var params = [];
          params.push(Chat.Constants.ParameterCode.Channels, Photon.TypeExt.String(channelNames));
          this.masterPeer.sendOperation(Chat.Constants.OperationCode.Unsubscribe, params);
          return true;
        } else {
          this.logger.error("unsubscribe request error:", "Not connected to Front End");
          return false;
        }
      };
      /**
          @summary Sends a message to a public channel.<br/>
          Channel should be subscribed before publishing to it.
          Everyone in that channel will get the message.
          @param {string} channelName Channel name to send message to.
          @param {any} content Text string or arbitrary data to send.
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {boolean} [options.webForward] Optionally, private messages can be forwarded as webhooks. Configure webhooks for your Chat app to use this.
          @return {boolean} True if message sent.
          @method Photon.Chat.ChatClient#publishMessage
      */


      ChatClient.prototype.publishMessage = function (channelName, content, options) {
        if (this.isConnectedToFrontEnd()) {
          var params = [];
          params.push(Chat.Constants.ParameterCode.Channel, channelName);
          params.push(Chat.Constants.ParameterCode.Message, content);

          if (options) {
            if (options.webForward) {
              params.push(Chat.Constants.ParameterCode.WebFlags);
              params.push(Photon.TypeExt.Byte(WebFlags.HttpForward));
            }
          }

          this.masterPeer.sendOperation(Chat.Constants.OperationCode.Publish, params);
          return true;
        } else {
          this.logger.error("publishMessage request error:", "Not connected to Front End");
          return false;
        }
      };
      /**
          @summary Sends a private message to a single target user.<br/>
          @param {string} userId User id to send this message to.
          @param {any} content Text string or arbitrary data to send.
          @param {object} [options] Additional options
          @property {object} options Additional options
          @property {boolean} [options.webForward] Optionally, private messages can be forwarded as webhooks. Configure webhooks for your Chat app to use this.
          @return {boolean} True if message sent.
          @method Photon.Chat.ChatClient#sendPrivateMessage
      */


      ChatClient.prototype.sendPrivateMessage = function (userId, content, options) {
        if (this.isConnectedToFrontEnd()) {
          var params = [];
          params.push(Chat.Constants.ParameterCode.UserId, userId);
          params.push(Chat.Constants.ParameterCode.Message, content);

          if (options) {
            if (options.webForward) {
              params.push(Chat.Constants.ParameterCode.WebFlags);
              params.push(Photon.TypeExt.Byte(WebFlags.HttpForward));
            }
          }

          this.masterPeer.sendOperation(Chat.Constants.OperationCode.SendPrivate, params);
          return true;
        } else {
          this.logger.error("sendPrivateMessage request error:", "Not connected to Front End");
          return false;
        }
      };
      /**
          @summary Sets the user's status (pre-defined or custom) and an optional message.<br/>
          The predefined status values can be found in {@link Photon.Chat.Constants.UserStatus Constants.UserStatus}.<br/>
          State UserStatus.Invisible will make you offline for everyone and send no message.
          @param {number} status User status to set.
          @param {string} [message=null] State message.
          @param {boolean} [skipMessage=false] If true { client does not send state message.
          @return {boolean} True if command sent.
          @method Photon.Chat.ChatClient#setUserStatus
      */


      ChatClient.prototype.setUserStatus = function (status, statusMessage, skipMessage) {
        if (statusMessage === void 0) {
          statusMessage = null;
        }

        if (skipMessage === void 0) {
          skipMessage = false;
        }

        if (this.isConnectedToFrontEnd()) {
          var params = [];
          params.push(Chat.Constants.ParameterCode.Status, Photon.TypeExt.Int(status));
          if (skipMessage) params.push(Chat.Constants.ParameterCode.SkipMessage, true);else params.push(Chat.Constants.ParameterCode.Message, statusMessage);
          this.masterPeer.sendOperation(Chat.Constants.OperationCode.UpdateStatus, params);
          return true;
        } else {
          this.logger.error("setUserStatus request error:", "Not connected to Front End");
          return false;
        }
      };
      /**
          @summary Adds users to the list on the Chat Server which will send you status updates for those.
          @tparam string[] userIds Array of user ids.
          @return {boolean} True if command sent.
      */


      ChatClient.prototype.addFriends = function (userIds) {
        if (this.isConnectedToFrontEnd()) {
          var params = [];
          params.push(Chat.Constants.ParameterCode.Friends, Photon.TypeExt.String(userIds));
          this.masterPeer.sendOperation(Chat.Constants.OperationCode.AddFriendds, params);
          return true;
        } else {
          this.logger.error("addFriends request error:", "Not connected to Front End");
          return false;
        }
      };
      /**
          @summary Removes users from the list on the Chat Server which will send you status updates for those.
          @tparam string[] friends Array of user ids.
          @return {boolean} True if command sent.
      */


      ChatClient.prototype.removeFriends = function (userIds) {
        if (this.isConnectedToFrontEnd()) {
          var params = [];
          params.push(Chat.Constants.ParameterCode.Friends, Photon.TypeExt.String(userIds));
          this.masterPeer.sendOperation(Chat.Constants.OperationCode.RemoveFriends, params);
          return true;
        } else {
          this.logger.error("removeFriends request error:", "Not connected to Front End");
          return false;
        }
      };
      /**
          @summary Returns list of public channels client subscribed to.
          @return Channel[] Array of public channels.
      */


      ChatClient.prototype.getPublicChannels = function () {
        return this.publicChannels;
      };
      /**
          @summary Returns list of channels representing current private conversation.
          @return Channel[] Array of private channels.
      */


      ChatClient.prototype.getPrivateChannels = function () {
        return this.privateChannels;
      }; // private


      ChatClient.prototype.getOrAddChannel = function (channels, name, isPrivate) {
        if (channels[name] == undefined) {
          channels[name] = new Channel(name, isPrivate);
        }

        return channels[name];
      }; // internal


      ChatClient.prototype.initMasterPeer = function (mp) {
        var _this = this;

        _super.prototype.initMasterPeer.call(this, mp); // onOperationResponse called if no listener exists
        //mp.addResponseListener(Constants.OperationCode.Publish, (data: any) => {
        //    mp._logger.debug("resp Publish", data.errCode, data.errMsg);
        //});
        //mp.addResponseListener(Constants.OperationCode.SendPrivate, (data: any) => {
        //    mp._logger.debug("resp SendPrivate", data.errCode, data.errMsg);
        //});
        //mp.addResponseListener(Constants.OperationCode.UpdateStatus, (data: any) => {
        //    mp._logger.debug("resp UpdateStatus", data.errCode, data.errMsg);
        //});
        //mp.addResponseListener(Constants.OperationCode.FriendList, (data: any) => {
        //    mp._logger.debug("resp FriendList", data.errCode, data.errMsg);
        //});


        mp.addEventListener(Chat.Constants.EventCode.ChatMessages, function (data) {
          var senders = data.vals[Chat.Constants.ParameterCode.Senders];
          var messages = data.vals[Chat.Constants.ParameterCode.Messages];
          var channelName = data.vals[Chat.Constants.ParameterCode.Channel];
          var ch = _this.publicChannels[channelName];

          if (ch) {
            var newMessages = ch.addMessages(senders, messages);
            ch.lastId = data.vals[Chat.Constants.ParameterCode.MsgId];

            _this.onChatMessages(channelName, newMessages);
          } else {
            mp._logger.warn("ev ChatMessages: Got message from unsubscribed channel ", channelName);
          }
        });
        mp.addEventListener(Chat.Constants.EventCode.PrivateMessage, function (data) {
          var sender = data.vals[Chat.Constants.ParameterCode.Sender];
          var message = data.vals[Chat.Constants.ParameterCode.Message];
          var userId = data.vals[Chat.Constants.ParameterCode.UserId];
          var channelName = "";
          if (_this.getUserId() == sender) channelName = userId;else channelName = sender;

          var ch = _this.getOrAddChannel(_this.privateChannels, channelName, true);

          ch.lastId = data.vals[Chat.Constants.ParameterCode.MsgId];

          _this.onPrivateMessage(channelName, new Message(sender, message));
        });
        mp.addEventListener(Chat.Constants.EventCode.StatusUpdate, function (data) {
          var sender = data.vals[Chat.Constants.ParameterCode.Sender];
          var status = data.vals[Chat.Constants.ParameterCode.Status];
          var message = data.vals[Chat.Constants.ParameterCode.Message];
          var gotMessage = message !== undefined;

          _this.onUserStatusUpdate(sender, status, gotMessage, message);
        });
        mp.addEventListener(Chat.Constants.EventCode.Subscribe, function (data) {
          mp._logger.debug("ev Subscribe", data);

          var res = {};
          var channels = data.vals[Chat.Constants.ParameterCode.Channels] || [];
          var results = data.vals[Chat.Constants.ParameterCode.SubscribeResults] || [];

          for (var i in channels) {
            var ch = channels[i];
            res[ch] = false;

            if (i < results.length && results[i]) {
              _this.getOrAddChannel(_this.publicChannels, ch, false);

              res[ch] = true;
            }
          }

          _this.onSubscribeResult(res);
        });
        mp.addEventListener(Chat.Constants.EventCode.Unsubscribe, function (data) {
          mp._logger.debug("ev Unsubscribe", data);

          var res = {};
          var channels = data.vals[Chat.Constants.ParameterCode.Channels] || [];

          for (var i in channels) {
            var ch = channels[i];
            delete _this.publicChannels[ch];
            res[ch] = true;
          }

          _this.onUnsubscribeResult(res);
        });
      };
      /**
          @summary Converts {@link Photon.Chat.ChatClient.ChatState ChatState} element to string name.
          @method Photon.Chat.ChatClient.StateToName
          @param {Photon.Chat.ChatClient.ChatState} state Client state.
          @returns {string} Specified element name or undefined if not found.
      */


      ChatClient.StateToName = function (value) {
        var x = Exitgames.Common.Util.getEnumKeyByValue(ChatClient.ChatState, value);

        if (x === undefined) {
          // Super class states support - useless since all states overridden but may help somehow when debugging
          return Exitgames.Common.Util.getEnumKeyByValue(ChatClient.State, value);
        } else {
          return x;
        }
      };

      ChatClient.ChatPeerErrorCode = {
        /**
            @summary Enum for client peers error codes.
            @member Photon.Chat.ChatClient.ChatPeerErrorCode
            @readonly
            @property {number} Ok No Error.
            @property {number} FrontEndError General FrontEnd server peer error.
            @property {number} FrontEndConnectFailed FrontEnd server connection error.
            @property {number} FrontEndConnectClosed Disconnected from FrontEnd server.
            @property {number} FrontEndTimeout Disconnected from FrontEnd server for timeout.
            @property {number} FrontEndEncryptionEstablishError FrontEnd server encryption establishing failed.
            @property {number} FrontEndAuthenticationFailed FrontEnd server authentication failed.
            @property {number} NameServerError General NameServer peer error.
            @property {number} NameServerConnectFailed NameServer connection error.
            @property {number} NameServerConnectClosed Disconnected from NameServer.
            @property {number} NameServerTimeout Disconnected from NameServer for timeout.
            @property {number} NameServerEncryptionEstablishError NameServer encryption establishing failed.
            @property {number} NameServerAuthenticationFailed NameServer authentication failed.
         */
        Ok: 0,
        FrontEndError: 1001,
        FrontEndConnectFailed: 1002,
        FrontEndConnectClosed: 1003,
        FrontEndTimeout: 1004,
        FrontEndEncryptionEstablishError: 1005,
        FrontEndAuthenticationFailed: 1101,
        NameServerError: 3001,
        NameServerConnectFailed: 3002,
        NameServerConnectClosed: 3003,
        NameServerTimeout: 3004,
        NameServerEncryptionEstablishError: 300,
        NameServerAuthenticationFailed: 3101
      };
      ChatClient.ChatState = {
        /**
            @summary Enum for client states.
            @member Photon.Chat.ChatClient.ChatState
            @readonly
            @property {number} Error Critical error occurred.
            @property {number} Uninitialized Client is created but not used yet.
            @property {number} ConnectingToNameServer Connecting to NameServer.
            @property {number} ConnectedToNameServer Connected to NameServer.
            @property {number} ConnectingToFrontEnd Connecting to FrontEnd server.
            @property {number} ConnectedToFrontEnd Connected to FrontEnd server.
            @property {number} Disconnected The client is no longer connected (to any server).
        */
        Error: -1,
        Uninitialized: 0,
        ConnectingToNameServer: 1,
        ConnectedToNameServer: 2,
        ConnectingToFrontEnd: 3,
        ConnectedToFrontEnd: 4,
        Disconnected: 10
      };
      return ChatClient;
    }(Photon.LoadBalancing.LoadBalancingClient);

    Chat.ChatClient = ChatClient;
  })(Chat = Photon.Chat || (Photon.Chat = {}));
})(Photon || (Photon = {}));

module.exports = Photon;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/lineFrames.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '39601ETg/9KGoLPsbyMzon/', 'lineFrames');
// scripts/lineFrames.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;
// 0 3 6  9 12
// 1 4 7 10 13
// 2 5 8 11 14
var lineFrames = {
  1: [1, 4, 7, 10, 13],
  2: [0, 3, 6, 9, 12],
  3: [2, 5, 8, 11, 14],
  4: [0, 4, 8, 10, 12],
  5: [2, 4, 6, 10, 14],
  6: [0, 3, 7, 9, 12],
  7: [2, 5, 7, 11, 14],
  8: [1, 5, 8, 11, 13],
  9: [1, 3, 6, 9, 13]
};
var _default = lineFrames;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbGluZUZyYW1lcy5qcyJdLCJuYW1lcyI6WyJsaW5lRnJhbWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUEsSUFBTUEsVUFBVSxHQUFHO0FBQ2pCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLEVBQWMsRUFBZCxDQURjO0FBRWpCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsRUFBYixDQUZjO0FBR2pCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLEVBQWMsRUFBZCxDQUhjO0FBSWpCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLEVBQWMsRUFBZCxDQUpjO0FBS2pCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLEVBQWMsRUFBZCxDQUxjO0FBTWpCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsRUFBYixDQU5jO0FBT2pCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLEVBQWMsRUFBZCxDQVBjO0FBUWpCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLEVBQWMsRUFBZCxDQVJjO0FBU2pCLEtBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsRUFBYjtBQVRjLENBQW5CO2VBWWVBIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyAwIDMgNiAgOSAxMlxyXG4vLyAxIDQgNyAxMCAxM1xyXG4vLyAyIDUgOCAxMSAxNFxyXG5cclxuY29uc3QgbGluZUZyYW1lcyA9IHtcclxuICAxOiBbMSwgNCwgNywgMTAsIDEzXSxcclxuICAyOiBbMCwgMywgNiwgOSwgMTJdLFxyXG4gIDM6IFsyLCA1LCA4LCAxMSwgMTRdLFxyXG4gIDQ6IFswLCA0LCA4LCAxMCwgMTJdLFxyXG4gIDU6IFsyLCA0LCA2LCAxMCwgMTRdLFxyXG4gIDY6IFswLCAzLCA3LCA5LCAxMl0sXHJcbiAgNzogWzIsIDUsIDcsIDExLCAxNF0sXHJcbiAgODogWzEsIDUsIDgsIDExLCAxM10sXHJcbiAgOTogWzEsIDMsIDYsIDksIDEzXVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbGluZUZyYW1lcztcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/mainController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1446fW+futK1KApvESDrZxQ', 'mainController');
// scripts/mainController.js

"use strict";

var _co = _interopRequireDefault(require("./co.cc"));

var _connectToServer = _interopRequireDefault(require("./connectToServer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var PublicSetUp = require('PublicSetUp');

cc.Class({
  "extends": cc.Component,
  properties: {
    MusicClip: {
      "default": null,
      type: cc.AudioClip
    },
    AudioClip: {
      "default": [],
      type: [cc.AudioClip]
    }
  },
  onLoad: function onLoad() {
    // co.enableAutoTick(30);
    PublicSetUp.audio1 = this.AudioClip[0];
    PublicSetUp.MusicClip = this.MusicClip;
    cc.store = {
      type: 0,
      minBet: 0,
      maxBet: 0,
      currentBet: 0,
      freeGameCnts: 0,
      FreeTotalPoint: 0,
      soundEnabled: true,
      gameResult: {},
      gameResultGotStatus: 0,
      isGameResultGot: function isGameResultGot() {
        return cc.store.gameResultGotStatus === 3;
      },
      playing: false,
      canPlay: function canPlay() {
        return true;
      },
      mainServer: null,
      lobbyServer: null,
      gameServer: null
    }; // cc.find('Canvas/Game').active = false;
  },
  start: function start() {
    cc.audioEngine.playMusic(this.MusicClip, true);
    cc.assetManager.loadBundle('mp4', function (error, bundle) {
      if (!error) {
        bundle.preloadDir('./', cc.VideoClip);
      }
    });
    console.log(PublicSetUp.account);
    cc.find('Canvas/Game').active = false;
    var getUrlString = location.href;
    var url = new URL(getUrlString);

    if (PublicSetUp.account == "") {
      PublicSetUp.account = url.searchParams.get('WebToken');
      (0, _connectToServer["default"])('213.139.235.73', 6380, url.searchParams.get('WebToken'), PublicSetUp.password, 2);
    } else {
      (0, _connectToServer["default"])('213.139.235.73', 6380, PublicSetUp.account, PublicSetUp.password, 0);
    }
  },
  update: function update() {
    _co["default"].performTick(cc.director._lastUpdate);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbWFpbkNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiUHVibGljU2V0VXAiLCJyZXF1aXJlIiwiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJNdXNpY0NsaXAiLCJ0eXBlIiwiQXVkaW9DbGlwIiwib25Mb2FkIiwiYXVkaW8xIiwic3RvcmUiLCJtaW5CZXQiLCJtYXhCZXQiLCJjdXJyZW50QmV0IiwiZnJlZUdhbWVDbnRzIiwiRnJlZVRvdGFsUG9pbnQiLCJzb3VuZEVuYWJsZWQiLCJnYW1lUmVzdWx0IiwiZ2FtZVJlc3VsdEdvdFN0YXR1cyIsImlzR2FtZVJlc3VsdEdvdCIsInBsYXlpbmciLCJjYW5QbGF5IiwibWFpblNlcnZlciIsImxvYmJ5U2VydmVyIiwiZ2FtZVNlcnZlciIsInN0YXJ0IiwiYXVkaW9FbmdpbmUiLCJwbGF5TXVzaWMiLCJhc3NldE1hbmFnZXIiLCJsb2FkQnVuZGxlIiwiZXJyb3IiLCJidW5kbGUiLCJwcmVsb2FkRGlyIiwiVmlkZW9DbGlwIiwiY29uc29sZSIsImxvZyIsImFjY291bnQiLCJmaW5kIiwiYWN0aXZlIiwiZ2V0VXJsU3RyaW5nIiwibG9jYXRpb24iLCJocmVmIiwidXJsIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwiZ2V0IiwicGFzc3dvcmQiLCJ1cGRhdGUiLCJjbyIsInBlcmZvcm1UaWNrIiwiZGlyZWN0b3IiLCJfbGFzdFVwZGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBLElBQUlBLFdBQVcsR0FBQ0MsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ0FDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLFVBQVUsRUFBRTtBQUNWQyxJQUFBQSxTQUFTLEVBQUU7QUFDVCxpQkFBUyxJQURBO0FBRVRDLE1BQUFBLElBQUksRUFBRUwsRUFBRSxDQUFDTTtBQUZBLEtBREQ7QUFNVkEsSUFBQUEsU0FBUyxFQUFFO0FBQ1QsaUJBQVMsRUFEQTtBQUVURCxNQUFBQSxJQUFJLEVBQUUsQ0FBQ0wsRUFBRSxDQUFDTSxTQUFKO0FBRkc7QUFORCxHQUhMO0FBZ0JQQyxFQUFBQSxNQWhCTyxvQkFnQkU7QUFDUDtBQUNBVCxJQUFBQSxXQUFXLENBQUNVLE1BQVosR0FBcUIsS0FBS0YsU0FBTCxDQUFlLENBQWYsQ0FBckI7QUFDQVIsSUFBQUEsV0FBVyxDQUFDTSxTQUFaLEdBQXNCLEtBQUtBLFNBQTNCO0FBQ0FKLElBQUFBLEVBQUUsQ0FBQ1MsS0FBSCxHQUFXO0FBQ1RKLE1BQUFBLElBQUksRUFBRSxDQURHO0FBRVRLLE1BQUFBLE1BQU0sRUFBRSxDQUZDO0FBR1RDLE1BQUFBLE1BQU0sRUFBRSxDQUhDO0FBSVRDLE1BQUFBLFVBQVUsRUFBRSxDQUpIO0FBS1RDLE1BQUFBLFlBQVksRUFBRSxDQUxMO0FBTVRDLE1BQUFBLGNBQWMsRUFBRSxDQU5QO0FBT1RDLE1BQUFBLFlBQVksRUFBRSxJQVBMO0FBU1RDLE1BQUFBLFVBQVUsRUFBRSxFQVRIO0FBVVRDLE1BQUFBLG1CQUFtQixFQUFFLENBVlo7QUFXVEMsTUFBQUEsZUFYUyw2QkFXUztBQUNoQixlQUFPbEIsRUFBRSxDQUFDUyxLQUFILENBQVNRLG1CQUFULEtBQWlDLENBQXhDO0FBQ0QsT0FiUTtBQWVURSxNQUFBQSxPQUFPLEVBQUUsS0FmQTtBQWdCVEMsTUFBQUEsT0FoQlMscUJBZ0JDO0FBQ1IsZUFBTyxJQUFQO0FBQ0QsT0FsQlE7QUFvQlRDLE1BQUFBLFVBQVUsRUFBRSxJQXBCSDtBQXFCVEMsTUFBQUEsV0FBVyxFQUFFLElBckJKO0FBc0JUQyxNQUFBQSxVQUFVLEVBQUU7QUF0QkgsS0FBWCxDQUpPLENBNkJQO0FBQ0QsR0E5Q007QUFnRFBDLEVBQUFBLEtBaERPLG1CQWdEQztBQUNOeEIsSUFBQUEsRUFBRSxDQUFDeUIsV0FBSCxDQUFlQyxTQUFmLENBQXlCLEtBQUt0QixTQUE5QixFQUF5QyxJQUF6QztBQUVBSixJQUFBQSxFQUFFLENBQUMyQixZQUFILENBQWdCQyxVQUFoQixDQUEyQixLQUEzQixFQUFrQyxVQUFDQyxLQUFELEVBQVFDLE1BQVIsRUFBbUI7QUFDbkQsVUFBSSxDQUFDRCxLQUFMLEVBQVk7QUFDVkMsUUFBQUEsTUFBTSxDQUFDQyxVQUFQLENBQWtCLElBQWxCLEVBQXdCL0IsRUFBRSxDQUFDZ0MsU0FBM0I7QUFDRDtBQUNGLEtBSkQ7QUFLQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlwQyxXQUFXLENBQUNxQyxPQUF4QjtBQUNBbkMsSUFBQUEsRUFBRSxDQUFDb0MsSUFBSCxDQUFRLGFBQVIsRUFBdUJDLE1BQXZCLEdBQWdDLEtBQWhDO0FBQ0EsUUFBSUMsWUFBWSxHQUFHQyxRQUFRLENBQUNDLElBQTVCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHLElBQUlDLEdBQUosQ0FBUUosWUFBUixDQUFWOztBQUNBLFFBQUd4QyxXQUFXLENBQUNxQyxPQUFaLElBQXFCLEVBQXhCLEVBQTJCO0FBQ3pCckMsTUFBQUEsV0FBVyxDQUFDcUMsT0FBWixHQUFvQk0sR0FBRyxDQUFDRSxZQUFKLENBQWlCQyxHQUFqQixDQUFxQixVQUFyQixDQUFwQjtBQUNBLHVDQUFnQixnQkFBaEIsRUFBa0MsSUFBbEMsRUFBd0NILEdBQUcsQ0FBQ0UsWUFBSixDQUFpQkMsR0FBakIsQ0FBcUIsVUFBckIsQ0FBeEMsRUFBMEU5QyxXQUFXLENBQUMrQyxRQUF0RixFQUErRixDQUEvRjtBQUNELEtBSEQsTUFHSztBQUNILHVDQUFnQixnQkFBaEIsRUFBa0MsSUFBbEMsRUFBd0MvQyxXQUFXLENBQUNxQyxPQUFwRCxFQUE2RHJDLFdBQVcsQ0FBQytDLFFBQXpFLEVBQWtGLENBQWxGO0FBQ0Q7QUFFRixHQW5FTTtBQXFFUEMsRUFBQUEsTUFyRU8sb0JBcUVFO0FBQ1BDLG1CQUFHQyxXQUFILENBQWVoRCxFQUFFLENBQUNpRCxRQUFILENBQVlDLFdBQTNCO0FBRUQ7QUF4RU0sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvIGZyb20gJy4vY28uY2MnO1xyXG5pbXBvcnQgY29ubmVjdFRvU2VydmVyIGZyb20gJy4vY29ubmVjdFRvU2VydmVyJztcclxubGV0IFB1YmxpY1NldFVwPXJlcXVpcmUoJ1B1YmxpY1NldFVwJyk7XHJcbmNjLkNsYXNzKHtcclxuICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gIHByb3BlcnRpZXM6IHtcclxuICAgIE11c2ljQ2xpcDoge1xyXG4gICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICB0eXBlOiBjYy5BdWRpb0NsaXAsXHJcbiAgfSxcclxuXHJcbiAgICBBdWRpb0NsaXA6IHtcclxuICAgICAgZGVmYXVsdDogW10sXHJcbiAgICAgIHR5cGU6IFtjYy5BdWRpb0NsaXBdLFxyXG4gIH0sXHJcblxyXG4gIH0sXHJcblxyXG4gIG9uTG9hZCgpIHtcclxuICAgIC8vIGNvLmVuYWJsZUF1dG9UaWNrKDMwKTtcclxuICAgIFB1YmxpY1NldFVwLmF1ZGlvMSA9IHRoaXMuQXVkaW9DbGlwWzBdO1xyXG4gICAgUHVibGljU2V0VXAuTXVzaWNDbGlwPXRoaXMuTXVzaWNDbGlwO1xyXG4gICAgY2Muc3RvcmUgPSB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIG1pbkJldDogMCxcclxuICAgICAgbWF4QmV0OiAwLFxyXG4gICAgICBjdXJyZW50QmV0OiAwLFxyXG4gICAgICBmcmVlR2FtZUNudHM6IDAsXHJcbiAgICAgIEZyZWVUb3RhbFBvaW50OiAwLFxyXG4gICAgICBzb3VuZEVuYWJsZWQ6IHRydWUsXHJcblxyXG4gICAgICBnYW1lUmVzdWx0OiB7fSxcclxuICAgICAgZ2FtZVJlc3VsdEdvdFN0YXR1czogMCxcclxuICAgICAgaXNHYW1lUmVzdWx0R290KCkge1xyXG4gICAgICAgIHJldHVybiBjYy5zdG9yZS5nYW1lUmVzdWx0R290U3RhdHVzID09PSAzO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcGxheWluZzogZmFsc2UsXHJcbiAgICAgIGNhblBsYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBtYWluU2VydmVyOiBudWxsLFxyXG4gICAgICBsb2JieVNlcnZlcjogbnVsbCxcclxuICAgICAgZ2FtZVNlcnZlcjogbnVsbFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBjYy5maW5kKCdDYW52YXMvR2FtZScpLmFjdGl2ZSA9IGZhbHNlO1xyXG4gIH0sXHJcblxyXG4gIHN0YXJ0KCkge1xyXG4gICAgY2MuYXVkaW9FbmdpbmUucGxheU11c2ljKHRoaXMuTXVzaWNDbGlwLCB0cnVlKTtcclxuXHJcbiAgICBjYy5hc3NldE1hbmFnZXIubG9hZEJ1bmRsZSgnbXA0JywgKGVycm9yLCBidW5kbGUpID0+IHtcclxuICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgIGJ1bmRsZS5wcmVsb2FkRGlyKCcuLycsIGNjLlZpZGVvQ2xpcCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coUHVibGljU2V0VXAuYWNjb3VudCk7XHJcbiAgICBjYy5maW5kKCdDYW52YXMvR2FtZScpLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgdmFyIGdldFVybFN0cmluZyA9IGxvY2F0aW9uLmhyZWY7XHJcbiAgICB2YXIgdXJsID0gbmV3IFVSTChnZXRVcmxTdHJpbmcpOyAgXHJcbiAgICBpZihQdWJsaWNTZXRVcC5hY2NvdW50PT1cIlwiKXtcclxuICAgICAgUHVibGljU2V0VXAuYWNjb3VudD11cmwuc2VhcmNoUGFyYW1zLmdldCgnV2ViVG9rZW4nKTtcclxuICAgICAgY29ubmVjdFRvU2VydmVyKCcyMTMuMTM5LjIzNS43MycsIDYzODAsIHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdXZWJUb2tlbicpLCBQdWJsaWNTZXRVcC5wYXNzd29yZCwyKTtcclxuICAgIH1lbHNle1xyXG4gICAgICBjb25uZWN0VG9TZXJ2ZXIoJzIxMy4xMzkuMjM1LjczJywgNjM4MCwgUHVibGljU2V0VXAuYWNjb3VudCwgUHVibGljU2V0VXAucGFzc3dvcmQsMCk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9LFxyXG5cclxuICB1cGRhdGUoKSB7XHJcbiAgICBjby5wZXJmb3JtVGljayhjYy5kaXJlY3Rvci5fbGFzdFVwZGF0ZSk7XHJcblxyXG4gIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/maxBetButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '425daQsnfJASJOUlZYhhJGG', 'maxBetButton');
// scripts/maxBetButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      var currentBetValue = cc.find('Canvas/Game/Machine/UI/BetPanel/Value').getComponent(cc.Label);
      var currentBet = parseInt(currentBetValue.string);

      if (currentBet !== cc.store.maxBet) {
        currentBetValue.string = cc.store.currentBet = cc.store.maxBet;
      }
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbWF4QmV0QnV0dG9uLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJvbkxvYWQiLCJidXR0b24iLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiQnV0dG9uIiwib24iLCJjdXJyZW50QmV0VmFsdWUiLCJmaW5kIiwiTGFiZWwiLCJjdXJyZW50QmV0IiwicGFyc2VJbnQiLCJzdHJpbmciLCJzdG9yZSIsIm1heEJldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDUCxhQUFTRCxFQUFFLENBQUNFLFNBREw7QUFHUEMsRUFBQUEsTUFITyxvQkFHRTtBQUNQLFFBQU1DLE1BQU0sR0FBRyxLQUFLQyxJQUFMLENBQVVDLFlBQVYsQ0FBdUJOLEVBQUUsQ0FBQ08sTUFBMUIsQ0FBZjtBQUNBSCxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUcsRUFBWixDQUFlLE9BQWYsRUFBd0IsWUFBTTtBQUM1QixVQUFNQyxlQUFlLEdBQUdULEVBQUUsQ0FBQ1UsSUFBSCxDQUFRLHVDQUFSLEVBQWlESixZQUFqRCxDQUE4RE4sRUFBRSxDQUFDVyxLQUFqRSxDQUF4QjtBQUNBLFVBQU1DLFVBQVUsR0FBR0MsUUFBUSxDQUFDSixlQUFlLENBQUNLLE1BQWpCLENBQTNCOztBQUNBLFVBQUlGLFVBQVUsS0FBS1osRUFBRSxDQUFDZSxLQUFILENBQVNDLE1BQTVCLEVBQW9DO0FBQ2xDUCxRQUFBQSxlQUFlLENBQUNLLE1BQWhCLEdBQXlCZCxFQUFFLENBQUNlLEtBQUgsQ0FBU0gsVUFBVCxHQUFzQlosRUFBRSxDQUFDZSxLQUFILENBQVNDLE1BQXhEO0FBQ0Q7QUFDRixLQU5EO0FBT0Q7QUFaTSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJjYy5DbGFzcyh7XHJcbiAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICBvbkxvYWQoKSB7XHJcbiAgICBjb25zdCBidXR0b24gPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbik7XHJcbiAgICBidXR0b24ubm9kZS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRCZXRWYWx1ZSA9IGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvVUkvQmV0UGFuZWwvVmFsdWUnKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpO1xyXG4gICAgICBjb25zdCBjdXJyZW50QmV0ID0gcGFyc2VJbnQoY3VycmVudEJldFZhbHVlLnN0cmluZyk7XHJcbiAgICAgIGlmIChjdXJyZW50QmV0ICE9PSBjYy5zdG9yZS5tYXhCZXQpIHtcclxuICAgICAgICBjdXJyZW50QmV0VmFsdWUuc3RyaW5nID0gY2Muc3RvcmUuY3VycmVudEJldCA9IGNjLnN0b3JlLm1heEJldDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/menuButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5d7a75w+adBHZkh/QGIIFoc', 'menuButton');
// scripts/menuButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      cc.find('Canvas/Game/Machine/UI/Menu').getComponent('menuController').dropDown();
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbWVudUJ1dHRvbi5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50Iiwib25Mb2FkIiwiYnV0dG9uIiwibm9kZSIsImdldENvbXBvbmVudCIsIkJ1dHRvbiIsIm9uIiwiZmluZCIsImRyb3BEb3duIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNQLGFBQVNELEVBQUUsQ0FBQ0UsU0FETDtBQUdQQyxFQUFBQSxNQUhPLG9CQUdFO0FBQ1AsUUFBTUMsTUFBTSxHQUFHLEtBQUtDLElBQUwsQ0FBVUMsWUFBVixDQUF1Qk4sRUFBRSxDQUFDTyxNQUExQixDQUFmO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRyxFQUFaLENBQWUsT0FBZixFQUF3QixZQUFNO0FBQzVCUixNQUFBQSxFQUFFLENBQUNTLElBQUgsQ0FBUSw2QkFBUixFQUF1Q0gsWUFBdkMsQ0FBb0QsZ0JBQXBELEVBQXNFSSxRQUF0RTtBQUNELEtBRkQ7QUFHRDtBQVJNLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gIG9uTG9hZCgpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcclxuICAgIGJ1dHRvbi5ub2RlLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgY2MuZmluZCgnQ2FudmFzL0dhbWUvTWFjaGluZS9VSS9NZW51JykuZ2V0Q29tcG9uZW50KCdtZW51Q29udHJvbGxlcicpLmRyb3BEb3duKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/menuController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '94c83znD15MILrkKX56KJvR', 'menuController');
// scripts/menuController.js

"use strict";

var _co = _interopRequireDefault(require("./co.cc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

cc.Class({
  "extends": cc.Component,
  properties: {},
  onLoad: function onLoad() {
    var _marked = /*#__PURE__*/regeneratorRuntime.mark(doDropDown);

    var settingsPanel = cc.find('SettingsPanel', this.node);
    settingsPanel.y = this.node.height;

    function doDropDown() {
      var speed, t0, dt, dy, sd, t1;
      return regeneratorRuntime.wrap(function doDropDown$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(droppingDown === 1 || droppingDown === 2)) {
                _context.next = 23;
                break;
              }

              _context.prev = 1;
              speed = 1.6;
              t0 = _co["default"].currentRuntime.lastTickTime;
              dt = 0;

            case 5:
              if (!true) {
                _context.next = 20;
                break;
              }

              dy = speed * dt;

              if (dy > dist) {
                dy = dist;
              }

              dist -= dy;
              sd = droppingDown === 1 ? -1 : +1;
              settingsPanel.y += dy * sd;
              _context.next = 13;
              return;

            case 13:
              if (!(dist <= 0)) {
                _context.next = 15;
                break;
              }

              return _context.abrupt("break", 20);

            case 15:
              t1 = _co["default"].currentRuntime.lastTickTime;
              dt = t1 - t0;
              t0 = t1;
              _context.next = 5;
              break;

            case 20:
              _context.prev = 20;
              coRunning = null;
              return _context.finish(20);

            case 23:
            case "end":
              return _context.stop();
          }
        }
      }, _marked, null, [[1,, 20, 23]]);
    }

    var droppingDown = 0;
    var maxDist = this.node.height;
    var dist = 0;
    var coRunning = null;

    this.dropDown = function () {
      if (droppingDown === 1) {
        droppingDown = 2;
      } else if (droppingDown === 0 || droppingDown === 2) {
        droppingDown = 1;
      }

      dist = dist === 0 ? maxDist : maxDist - dist;

      if (coRunning === null) {
        coRunning = _co["default"].start(doDropDown);
      }
    };
  },
  start: function start() {
    var settingsPanel = cc.find('SettingsPanel', this.node);

    if (cc.store.soundEnabled === true) {
      var soundOnButton = cc.find('SoundOnButton', settingsPanel);
      soundOnButton.active = false;
      soundOnButton.getComponent(cc.Button).interactable = false;
      var soundOffButton = cc.find('SoundOffButton', settingsPanel);
      soundOffButton.active = true;
      soundOffButton.getComponent(cc.Button).interactable = true;
    } else {
      var _soundOnButton = cc.find('SoundOnButton', settingsPanel);

      _soundOnButton.active = true;
      _soundOnButton.getComponent(cc.Button).interactable = true;

      var _soundOffButton = cc.find('SoundOffButton', settingsPanel);

      _soundOffButton.active = false;
      _soundOffButton.getComponent(cc.Button).interactable = false;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbWVudUNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkxvYWQiLCJkb0Ryb3BEb3duIiwic2V0dGluZ3NQYW5lbCIsImZpbmQiLCJub2RlIiwieSIsImhlaWdodCIsImRyb3BwaW5nRG93biIsInNwZWVkIiwidDAiLCJjbyIsImN1cnJlbnRSdW50aW1lIiwibGFzdFRpY2tUaW1lIiwiZHQiLCJkeSIsImRpc3QiLCJzZCIsInQxIiwiY29SdW5uaW5nIiwibWF4RGlzdCIsImRyb3BEb3duIiwic3RhcnQiLCJzdG9yZSIsInNvdW5kRW5hYmxlZCIsInNvdW5kT25CdXR0b24iLCJhY3RpdmUiLCJnZXRDb21wb25lbnQiLCJCdXR0b24iLCJpbnRlcmFjdGFibGUiLCJzb3VuZE9mZkJ1dHRvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUVBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNQLGFBQVNELEVBQUUsQ0FBQ0UsU0FETDtBQUdQQyxFQUFBQSxVQUFVLEVBQUUsRUFITDtBQUtQQyxFQUFBQSxNQUxPLG9CQUtFO0FBQUEsdURBSUdDLFVBSkg7O0FBQ1AsUUFBTUMsYUFBYSxHQUFHTixFQUFFLENBQUNPLElBQUgsQ0FBUSxlQUFSLEVBQXlCLEtBQUtDLElBQTlCLENBQXRCO0FBQ0FGLElBQUFBLGFBQWEsQ0FBQ0csQ0FBZCxHQUFrQixLQUFLRCxJQUFMLENBQVVFLE1BQTVCOztBQUVBLGFBQVVMLFVBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsb0JBQ01NLFlBQVksS0FBSyxDQUFqQixJQUFzQkEsWUFBWSxLQUFLLENBRDdDO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBR1lDLGNBQUFBLEtBSFosR0FHb0IsR0FIcEI7QUFLVUMsY0FBQUEsRUFMVixHQUtlQyxlQUFHQyxjQUFILENBQWtCQyxZQUxqQztBQU1VQyxjQUFBQSxFQU5WLEdBTWUsQ0FOZjs7QUFBQTtBQUFBLG1CQVFhLElBUmI7QUFBQTtBQUFBO0FBQUE7O0FBU2NDLGNBQUFBLEVBVGQsR0FTbUJOLEtBQUssR0FBR0ssRUFUM0I7O0FBVVEsa0JBQUlDLEVBQUUsR0FBR0MsSUFBVCxFQUFlO0FBQ2JELGdCQUFBQSxFQUFFLEdBQUdDLElBQUw7QUFDRDs7QUFDREEsY0FBQUEsSUFBSSxJQUFJRCxFQUFSO0FBRU1FLGNBQUFBLEVBZmQsR0FlbUJULFlBQVksS0FBSyxDQUFqQixHQUFxQixDQUFDLENBQXRCLEdBQTBCLENBQUMsQ0FmOUM7QUFnQlFMLGNBQUFBLGFBQWEsQ0FBQ0csQ0FBZCxJQUFtQlMsRUFBRSxHQUFHRSxFQUF4QjtBQWhCUjtBQWtCUTs7QUFsQlI7QUFBQSxvQkFvQllELElBQUksSUFBSSxDQXBCcEI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUF3QmNFLGNBQUFBLEVBeEJkLEdBd0JtQlAsZUFBR0MsY0FBSCxDQUFrQkMsWUF4QnJDO0FBeUJRQyxjQUFBQSxFQUFFLEdBQUdJLEVBQUUsR0FBR1IsRUFBVjtBQUNBQSxjQUFBQSxFQUFFLEdBQUdRLEVBQUw7QUExQlI7QUFBQTs7QUFBQTtBQUFBO0FBNkJNQyxjQUFBQSxTQUFTLEdBQUcsSUFBWjtBQTdCTjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFrQ0EsUUFBSVgsWUFBWSxHQUFHLENBQW5CO0FBQ0EsUUFBTVksT0FBTyxHQUFHLEtBQUtmLElBQUwsQ0FBVUUsTUFBMUI7QUFDQSxRQUFJUyxJQUFJLEdBQUcsQ0FBWDtBQUNBLFFBQUlHLFNBQVMsR0FBRyxJQUFoQjs7QUFFQSxTQUFLRSxRQUFMLEdBQWdCLFlBQU07QUFDcEIsVUFBSWIsWUFBWSxLQUFLLENBQXJCLEVBQXdCO0FBQ3RCQSxRQUFBQSxZQUFZLEdBQUcsQ0FBZjtBQUNELE9BRkQsTUFFTyxJQUFJQSxZQUFZLEtBQUssQ0FBakIsSUFBc0JBLFlBQVksS0FBSyxDQUEzQyxFQUE4QztBQUNuREEsUUFBQUEsWUFBWSxHQUFHLENBQWY7QUFDRDs7QUFDRFEsTUFBQUEsSUFBSSxHQUFHQSxJQUFJLEtBQUssQ0FBVCxHQUFhSSxPQUFiLEdBQXVCQSxPQUFPLEdBQUdKLElBQXhDOztBQUNBLFVBQUlHLFNBQVMsS0FBSyxJQUFsQixFQUF3QjtBQUN0QkEsUUFBQUEsU0FBUyxHQUFHUixlQUFHVyxLQUFILENBQVNwQixVQUFULENBQVo7QUFDRDtBQUNGLEtBVkQ7QUFXRCxHQTNETTtBQTZEUG9CLEVBQUFBLEtBN0RPLG1CQTZEQztBQUNOLFFBQU1uQixhQUFhLEdBQUdOLEVBQUUsQ0FBQ08sSUFBSCxDQUFRLGVBQVIsRUFBeUIsS0FBS0MsSUFBOUIsQ0FBdEI7O0FBQ0EsUUFBSVIsRUFBRSxDQUFDMEIsS0FBSCxDQUFTQyxZQUFULEtBQTBCLElBQTlCLEVBQW9DO0FBQ2xDLFVBQU1DLGFBQWEsR0FBRzVCLEVBQUUsQ0FBQ08sSUFBSCxDQUFRLGVBQVIsRUFBeUJELGFBQXpCLENBQXRCO0FBQ0FzQixNQUFBQSxhQUFhLENBQUNDLE1BQWQsR0FBdUIsS0FBdkI7QUFDQUQsTUFBQUEsYUFBYSxDQUFDRSxZQUFkLENBQTJCOUIsRUFBRSxDQUFDK0IsTUFBOUIsRUFBc0NDLFlBQXRDLEdBQXFELEtBQXJEO0FBRUEsVUFBTUMsY0FBYyxHQUFHakMsRUFBRSxDQUFDTyxJQUFILENBQVEsZ0JBQVIsRUFBMEJELGFBQTFCLENBQXZCO0FBQ0EyQixNQUFBQSxjQUFjLENBQUNKLE1BQWYsR0FBd0IsSUFBeEI7QUFDQUksTUFBQUEsY0FBYyxDQUFDSCxZQUFmLENBQTRCOUIsRUFBRSxDQUFDK0IsTUFBL0IsRUFBdUNDLFlBQXZDLEdBQXNELElBQXREO0FBQ0QsS0FSRCxNQVFPO0FBQ0wsVUFBTUosY0FBYSxHQUFHNUIsRUFBRSxDQUFDTyxJQUFILENBQVEsZUFBUixFQUF5QkQsYUFBekIsQ0FBdEI7O0FBQ0FzQixNQUFBQSxjQUFhLENBQUNDLE1BQWQsR0FBdUIsSUFBdkI7QUFDQUQsTUFBQUEsY0FBYSxDQUFDRSxZQUFkLENBQTJCOUIsRUFBRSxDQUFDK0IsTUFBOUIsRUFBc0NDLFlBQXRDLEdBQXFELElBQXJEOztBQUVBLFVBQU1DLGVBQWMsR0FBR2pDLEVBQUUsQ0FBQ08sSUFBSCxDQUFRLGdCQUFSLEVBQTBCRCxhQUExQixDQUF2Qjs7QUFDQTJCLE1BQUFBLGVBQWMsQ0FBQ0osTUFBZixHQUF3QixLQUF4QjtBQUNBSSxNQUFBQSxlQUFjLENBQUNILFlBQWYsQ0FBNEI5QixFQUFFLENBQUMrQixNQUEvQixFQUF1Q0MsWUFBdkMsR0FBc0QsS0FBdEQ7QUFDRDtBQUNGO0FBaEZNLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbyBmcm9tICcuL2NvLmNjJztcclxuXHJcbmNjLkNsYXNzKHtcclxuICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gIHByb3BlcnRpZXM6IHt9LFxyXG5cclxuICBvbkxvYWQoKSB7XHJcbiAgICBjb25zdCBzZXR0aW5nc1BhbmVsID0gY2MuZmluZCgnU2V0dGluZ3NQYW5lbCcsIHRoaXMubm9kZSk7XHJcbiAgICBzZXR0aW5nc1BhbmVsLnkgPSB0aGlzLm5vZGUuaGVpZ2h0O1xyXG5cclxuICAgIGZ1bmN0aW9uKiBkb0Ryb3BEb3duKCkge1xyXG4gICAgICBpZiAoZHJvcHBpbmdEb3duID09PSAxIHx8IGRyb3BwaW5nRG93biA9PT0gMikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBzcGVlZCA9IDEuNjtcclxuXHJcbiAgICAgICAgICBsZXQgdDAgPSBjby5jdXJyZW50UnVudGltZS5sYXN0VGlja1RpbWU7XHJcbiAgICAgICAgICBsZXQgZHQgPSAwO1xyXG5cclxuICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5ID0gc3BlZWQgKiBkdDtcclxuICAgICAgICAgICAgaWYgKGR5ID4gZGlzdCkge1xyXG4gICAgICAgICAgICAgIGR5ID0gZGlzdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkaXN0IC09IGR5O1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2QgPSBkcm9wcGluZ0Rvd24gPT09IDEgPyAtMSA6ICsxO1xyXG4gICAgICAgICAgICBzZXR0aW5nc1BhbmVsLnkgKz0gZHkgKiBzZDtcclxuXHJcbiAgICAgICAgICAgIHlpZWxkO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpc3QgPD0gMCkge1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0MSA9IGNvLmN1cnJlbnRSdW50aW1lLmxhc3RUaWNrVGltZTtcclxuICAgICAgICAgICAgZHQgPSB0MSAtIHQwO1xyXG4gICAgICAgICAgICB0MCA9IHQxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICBjb1J1bm5pbmcgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBkcm9wcGluZ0Rvd24gPSAwO1xyXG4gICAgY29uc3QgbWF4RGlzdCA9IHRoaXMubm9kZS5oZWlnaHQ7XHJcbiAgICBsZXQgZGlzdCA9IDA7XHJcbiAgICBsZXQgY29SdW5uaW5nID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLmRyb3BEb3duID0gKCkgPT4ge1xyXG4gICAgICBpZiAoZHJvcHBpbmdEb3duID09PSAxKSB7XHJcbiAgICAgICAgZHJvcHBpbmdEb3duID0gMjtcclxuICAgICAgfSBlbHNlIGlmIChkcm9wcGluZ0Rvd24gPT09IDAgfHwgZHJvcHBpbmdEb3duID09PSAyKSB7XHJcbiAgICAgICAgZHJvcHBpbmdEb3duID0gMTtcclxuICAgICAgfVxyXG4gICAgICBkaXN0ID0gZGlzdCA9PT0gMCA/IG1heERpc3QgOiBtYXhEaXN0IC0gZGlzdDtcclxuICAgICAgaWYgKGNvUnVubmluZyA9PT0gbnVsbCkge1xyXG4gICAgICAgIGNvUnVubmluZyA9IGNvLnN0YXJ0KGRvRHJvcERvd24pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIHN0YXJ0KCkge1xyXG4gICAgY29uc3Qgc2V0dGluZ3NQYW5lbCA9IGNjLmZpbmQoJ1NldHRpbmdzUGFuZWwnLCB0aGlzLm5vZGUpO1xyXG4gICAgaWYgKGNjLnN0b3JlLnNvdW5kRW5hYmxlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICBjb25zdCBzb3VuZE9uQnV0dG9uID0gY2MuZmluZCgnU291bmRPbkJ1dHRvbicsIHNldHRpbmdzUGFuZWwpO1xyXG4gICAgICBzb3VuZE9uQnV0dG9uLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICBzb3VuZE9uQnV0dG9uLmdldENvbXBvbmVudChjYy5CdXR0b24pLmludGVyYWN0YWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgY29uc3Qgc291bmRPZmZCdXR0b24gPSBjYy5maW5kKCdTb3VuZE9mZkJ1dHRvbicsIHNldHRpbmdzUGFuZWwpO1xyXG4gICAgICBzb3VuZE9mZkJ1dHRvbi5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICBzb3VuZE9mZkJ1dHRvbi5nZXRDb21wb25lbnQoY2MuQnV0dG9uKS5pbnRlcmFjdGFibGUgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3Qgc291bmRPbkJ1dHRvbiA9IGNjLmZpbmQoJ1NvdW5kT25CdXR0b24nLCBzZXR0aW5nc1BhbmVsKTtcclxuICAgICAgc291bmRPbkJ1dHRvbi5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICBzb3VuZE9uQnV0dG9uLmdldENvbXBvbmVudChjYy5CdXR0b24pLmludGVyYWN0YWJsZSA9IHRydWU7XHJcblxyXG4gICAgICBjb25zdCBzb3VuZE9mZkJ1dHRvbiA9IGNjLmZpbmQoJ1NvdW5kT2ZmQnV0dG9uJywgc2V0dGluZ3NQYW5lbCk7XHJcbiAgICAgIHNvdW5kT2ZmQnV0dG9uLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICBzb3VuZE9mZkJ1dHRvbi5nZXRDb21wb25lbnQoY2MuQnV0dG9uKS5pbnRlcmFjdGFibGUgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/pauseButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6130716dp1L2KxcVD41hLFh', 'pauseButton');
// scripts/pauseButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      if (cc.store.playing === true) {
        cc.store.playing = false;
      }
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccGF1c2VCdXR0b24uanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsIm9uTG9hZCIsImJ1dHRvbiIsIm5vZGUiLCJnZXRDb21wb25lbnQiLCJCdXR0b24iLCJvbiIsInN0b3JlIiwicGxheWluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDUCxhQUFTRCxFQUFFLENBQUNFLFNBREw7QUFHUEMsRUFBQUEsTUFITyxvQkFHRTtBQUNQLFFBQU1DLE1BQU0sR0FBRyxLQUFLQyxJQUFMLENBQVVDLFlBQVYsQ0FBdUJOLEVBQUUsQ0FBQ08sTUFBMUIsQ0FBZjtBQUNBSCxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUcsRUFBWixDQUFlLE9BQWYsRUFBd0IsWUFBTTtBQUM1QixVQUFJUixFQUFFLENBQUNTLEtBQUgsQ0FBU0MsT0FBVCxLQUFxQixJQUF6QixFQUErQjtBQUM3QlYsUUFBQUEsRUFBRSxDQUFDUyxLQUFILENBQVNDLE9BQVQsR0FBbUIsS0FBbkI7QUFDRDtBQUNGLEtBSkQ7QUFLRDtBQVZNLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gIG9uTG9hZCgpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcclxuICAgIGJ1dHRvbi5ub2RlLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgaWYgKGNjLnN0b3JlLnBsYXlpbmcgPT09IHRydWUpIHtcclxuICAgICAgICBjYy5zdG9yZS5wbGF5aW5nID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/playEffect.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '905532h4/pGgooz7sOid5re', 'playEffect');
// scripts/playEffect.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _co = _interopRequireDefault(require("./co.cc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var playEffect = function () {
  var cachedEffectSpriteFrame = {};
  return /*#__PURE__*/regeneratorRuntime.mark(function playEffect(node, duration, loop) {
    var playNode, playSprite, effectSource, t0, done, p, i, effectName, spriteFrame;
    return regeneratorRuntime.wrap(function playEffect$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (loop === void 0) {
              loop = true;
            }

            playNode = node.getChildByName('Effect');

            if (playNode === null) {
              playNode = new cc.Node('Effect');
              playNode.active = false;
              node.addChild(playNode);
            }

            playSprite = playNode.getComponent(cc.Sprite);

            if (playSprite === null) {
              playSprite = playNode.addComponent(cc.Sprite);
            }

            if (!(playNode.active === true)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return");

          case 7:
            effectSource = cc.find('Canvas/Game/Machine/Performance/Effect');
            _context.prev = 8;
            playNode.active = true;

          case 10:
            if (!true) {
              _context.next = 29;
              break;
            }

            t0 = _co["default"].currentRuntime.lastTickTime;
            done = false;

          case 13:
            if (!(done === false)) {
              _context.next = 25;
              break;
            }

            p = (_co["default"].currentRuntime.lastTickTime - t0) / duration;
            i = Math.floor(effectSource.childrenCount * p);

            if (i >= effectSource.childrenCount) {
              i = effectSource.childrenCount - 1;
              done = true;
            }

            effectName = "SlotEffect_" + i.toString().padStart(5, '0');
            spriteFrame = cachedEffectSpriteFrame[effectName];

            if (spriteFrame === undefined) {
              cachedEffectSpriteFrame[effectName] = spriteFrame = effectSource.getChildByName(effectName).getComponent(cc.Sprite).spriteFrame;
            }

            playSprite.spriteFrame = spriteFrame;
            _context.next = 23;
            return;

          case 23:
            _context.next = 13;
            break;

          case 25:
            if (!(loop !== true)) {
              _context.next = 27;
              break;
            }

            return _context.abrupt("break", 29);

          case 27:
            _context.next = 10;
            break;

          case 29:
            _context.prev = 29;
            playNode.active = false;
            return _context.finish(29);

          case 32:
          case "end":
            return _context.stop();
        }
      }
    }, playEffect, null, [[8,, 29, 32]]);
  });
}();

var _default = playEffect;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccGxheUVmZmVjdC5qcyJdLCJuYW1lcyI6WyJwbGF5RWZmZWN0IiwiY2FjaGVkRWZmZWN0U3ByaXRlRnJhbWUiLCJub2RlIiwiZHVyYXRpb24iLCJsb29wIiwicGxheU5vZGUiLCJnZXRDaGlsZEJ5TmFtZSIsImNjIiwiTm9kZSIsImFjdGl2ZSIsImFkZENoaWxkIiwicGxheVNwcml0ZSIsImdldENvbXBvbmVudCIsIlNwcml0ZSIsImFkZENvbXBvbmVudCIsImVmZmVjdFNvdXJjZSIsImZpbmQiLCJ0MCIsImNvIiwiY3VycmVudFJ1bnRpbWUiLCJsYXN0VGlja1RpbWUiLCJkb25lIiwicCIsImkiLCJNYXRoIiwiZmxvb3IiLCJjaGlsZHJlbkNvdW50IiwiZWZmZWN0TmFtZSIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJzcHJpdGVGcmFtZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUVBLElBQU1BLFVBQVUsR0FBSSxZQUFZO0FBQzlCLE1BQU1DLHVCQUF1QixHQUFHLEVBQWhDO0FBRUEsOENBQU8sU0FBVUQsVUFBVixDQUFxQkUsSUFBckIsRUFBMkJDLFFBQTNCLEVBQXFDQyxJQUFyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxnQkFBcUNBLElBQXJDO0FBQXFDQSxjQUFBQSxJQUFyQyxHQUE0QyxJQUE1QztBQUFBOztBQUNEQyxZQUFBQSxRQURDLEdBQ1VILElBQUksQ0FBQ0ksY0FBTCxDQUFvQixRQUFwQixDQURWOztBQUVMLGdCQUFJRCxRQUFRLEtBQUssSUFBakIsRUFBdUI7QUFDckJBLGNBQUFBLFFBQVEsR0FBRyxJQUFJRSxFQUFFLENBQUNDLElBQVAsQ0FBWSxRQUFaLENBQVg7QUFDQUgsY0FBQUEsUUFBUSxDQUFDSSxNQUFULEdBQWtCLEtBQWxCO0FBQ0FQLGNBQUFBLElBQUksQ0FBQ1EsUUFBTCxDQUFjTCxRQUFkO0FBQ0Q7O0FBRUdNLFlBQUFBLFVBUkMsR0FRWU4sUUFBUSxDQUFDTyxZQUFULENBQXNCTCxFQUFFLENBQUNNLE1BQXpCLENBUlo7O0FBU0wsZ0JBQUlGLFVBQVUsS0FBSyxJQUFuQixFQUF5QjtBQUN2QkEsY0FBQUEsVUFBVSxHQUFHTixRQUFRLENBQUNTLFlBQVQsQ0FBc0JQLEVBQUUsQ0FBQ00sTUFBekIsQ0FBYjtBQUNEOztBQVhJLGtCQWFEUixRQUFRLENBQUNJLE1BQVQsS0FBb0IsSUFibkI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFpQkNNLFlBQUFBLFlBakJELEdBaUJnQlIsRUFBRSxDQUFDUyxJQUFILENBQVEsd0NBQVIsQ0FqQmhCO0FBQUE7QUFvQkhYLFlBQUFBLFFBQVEsQ0FBQ0ksTUFBVCxHQUFrQixJQUFsQjs7QUFwQkc7QUFBQSxpQkFzQkksSUF0Qko7QUFBQTtBQUFBO0FBQUE7O0FBdUJLUSxZQUFBQSxFQXZCTCxHQXVCVUMsZUFBR0MsY0FBSCxDQUFrQkMsWUF2QjVCO0FBeUJRQyxZQUFBQSxJQXpCUixHQXlCZSxLQXpCZjs7QUFBQTtBQUFBLGtCQXlCc0JBLElBQUksS0FBSyxLQXpCL0I7QUFBQTtBQUFBO0FBQUE7O0FBMEJPQyxZQUFBQSxDQTFCUCxHQTBCVyxDQUFDSixlQUFHQyxjQUFILENBQWtCQyxZQUFsQixHQUFpQ0gsRUFBbEMsSUFBd0NkLFFBMUJuRDtBQTJCS29CLFlBQUFBLENBM0JMLEdBMkJTQyxJQUFJLENBQUNDLEtBQUwsQ0FBV1YsWUFBWSxDQUFDVyxhQUFiLEdBQTZCSixDQUF4QyxDQTNCVDs7QUE0QkMsZ0JBQUlDLENBQUMsSUFBSVIsWUFBWSxDQUFDVyxhQUF0QixFQUFxQztBQUNuQ0gsY0FBQUEsQ0FBQyxHQUFHUixZQUFZLENBQUNXLGFBQWIsR0FBNkIsQ0FBakM7QUFDQUwsY0FBQUEsSUFBSSxHQUFHLElBQVA7QUFDRDs7QUFFS00sWUFBQUEsVUFqQ1AsbUJBaUNrQ0osQ0FBQyxDQUFDSyxRQUFGLEdBQWFDLFFBQWIsQ0FBc0IsQ0FBdEIsRUFBeUIsR0FBekIsQ0FqQ2xDO0FBa0NLQyxZQUFBQSxXQWxDTCxHQWtDbUI3Qix1QkFBdUIsQ0FBQzBCLFVBQUQsQ0FsQzFDOztBQW1DQyxnQkFBSUcsV0FBVyxLQUFLQyxTQUFwQixFQUErQjtBQUM3QjlCLGNBQUFBLHVCQUF1QixDQUFDMEIsVUFBRCxDQUF2QixHQUFzQ0csV0FBVyxHQUFHZixZQUFZLENBQUNULGNBQWIsQ0FBNEJxQixVQUE1QixFQUF3Q2YsWUFBeEMsQ0FBcURMLEVBQUUsQ0FBQ00sTUFBeEQsRUFBZ0VpQixXQUFwSDtBQUNEOztBQUNEbkIsWUFBQUEsVUFBVSxDQUFDbUIsV0FBWCxHQUF5QkEsV0FBekI7QUF0Q0Q7QUF3Q0M7O0FBeENEO0FBQUE7QUFBQTs7QUFBQTtBQUFBLGtCQTJDRzFCLElBQUksS0FBSyxJQTNDWjtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQWdESEMsWUFBQUEsUUFBUSxDQUFDSSxNQUFULEdBQWtCLEtBQWxCO0FBaERHOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFVVCxVQUFWO0FBQUEsR0FBUDtBQW1ERCxDQXREa0IsRUFBbkI7O2VBd0RlQSIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvIGZyb20gJy4vY28uY2MnO1xyXG5cclxuY29uc3QgcGxheUVmZmVjdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgY29uc3QgY2FjaGVkRWZmZWN0U3ByaXRlRnJhbWUgPSB7fTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKiBwbGF5RWZmZWN0KG5vZGUsIGR1cmF0aW9uLCBsb29wID0gdHJ1ZSkge1xyXG4gICAgbGV0IHBsYXlOb2RlID0gbm9kZS5nZXRDaGlsZEJ5TmFtZSgnRWZmZWN0Jyk7XHJcbiAgICBpZiAocGxheU5vZGUgPT09IG51bGwpIHtcclxuICAgICAgcGxheU5vZGUgPSBuZXcgY2MuTm9kZSgnRWZmZWN0Jyk7XHJcbiAgICAgIHBsYXlOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICBub2RlLmFkZENoaWxkKHBsYXlOb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcGxheVNwcml0ZSA9IHBsYXlOb2RlLmdldENvbXBvbmVudChjYy5TcHJpdGUpO1xyXG4gICAgaWYgKHBsYXlTcHJpdGUgPT09IG51bGwpIHtcclxuICAgICAgcGxheVNwcml0ZSA9IHBsYXlOb2RlLmFkZENvbXBvbmVudChjYy5TcHJpdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwbGF5Tm9kZS5hY3RpdmUgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVmZmVjdFNvdXJjZSA9IGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvUGVyZm9ybWFuY2UvRWZmZWN0Jyk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgcGxheU5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgdDAgPSBjby5jdXJyZW50UnVudGltZS5sYXN0VGlja1RpbWU7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGRvbmUgPSBmYWxzZTsgZG9uZSA9PT0gZmFsc2U7ICkge1xyXG4gICAgICAgICAgY29uc3QgcCA9IChjby5jdXJyZW50UnVudGltZS5sYXN0VGlja1RpbWUgLSB0MCkgLyBkdXJhdGlvbjtcclxuICAgICAgICAgIGxldCBpID0gTWF0aC5mbG9vcihlZmZlY3RTb3VyY2UuY2hpbGRyZW5Db3VudCAqIHApO1xyXG4gICAgICAgICAgaWYgKGkgPj0gZWZmZWN0U291cmNlLmNoaWxkcmVuQ291bnQpIHtcclxuICAgICAgICAgICAgaSA9IGVmZmVjdFNvdXJjZS5jaGlsZHJlbkNvdW50IC0gMTtcclxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3QgZWZmZWN0TmFtZSA9IGBTbG90RWZmZWN0XyR7aS50b1N0cmluZygpLnBhZFN0YXJ0KDUsICcwJyl9YDtcclxuICAgICAgICAgIGxldCBzcHJpdGVGcmFtZSA9IGNhY2hlZEVmZmVjdFNwcml0ZUZyYW1lW2VmZmVjdE5hbWVdO1xyXG4gICAgICAgICAgaWYgKHNwcml0ZUZyYW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2FjaGVkRWZmZWN0U3ByaXRlRnJhbWVbZWZmZWN0TmFtZV0gPSBzcHJpdGVGcmFtZSA9IGVmZmVjdFNvdXJjZS5nZXRDaGlsZEJ5TmFtZShlZmZlY3ROYW1lKS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHBsYXlTcHJpdGUuc3ByaXRlRnJhbWUgPSBzcHJpdGVGcmFtZTtcclxuXHJcbiAgICAgICAgICB5aWVsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsb29wICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHBsYXlOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwbGF5RWZmZWN0O1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/observable.cc.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6051cnGfspElqNWqRW7U1y5', 'observable.cc');
// scripts/observable.cc.js

// @ts-nocheck
'use strict';

var _excluded = ["type"];

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var co = require('./co.cc');

var valueTypes_cc = require('./value-types.cc');

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var co__default = /*#__PURE__*/_interopDefaultLegacy(co); //   return function* dispatch({ getStates }) {
//   };
// }


var emptyArray = Object.freeze([]);

function createActiveScheduler(_ref, options) {
  var dispatch = _ref.dispatch,
      unsubscribe = _ref.unsubscribe,
      complete = _ref.complete;
  var states = [];

  var getStates = function getStates() {
    var result;

    if (states.length === 0) {
      result = emptyArray;
    } else {
      result = states;
      states = [];
    }

    return result;
  };

  options.coroutineGroup.start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return dispatch({
              getStates: getStates
            });

          case 3:
            _context.next = 8;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context["catch"](0);
            console.error("[observable.createActiveScheduler] error: " + valueTypes_cc.errorToString(_context.t0));

          case 8:
            if (states.length > 0) {
              states = [];
            }

            unsubscribe();
            complete();

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 5]]);
  }));
  return {
    schedule: function schedule(state) {
      states.push(state);
    }
  };
} //   return function* dispatch(state) {
//   };
// }


function createAsyncScheduler(_ref2, options) {
  var dispatch = _ref2.dispatch,
      unsubscribe = _ref2.unsubscribe,
      isUnsubscribed = _ref2.isUnsubscribed,
      complete = _ref2.complete;

  var _options$maxConcurren;

  var maxConcurrentLimit = Math.max((_options$maxConcurren = options.maxConcurrentLimit) != null ? _options$maxConcurren : 0, 0);
  var states = [];
  var running = 0;
  var end = false;

  var dispatchOne = function dispatchOne(state) {
    end = end || state.end === true;
    ++running;
    options.coroutineGroup.start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return dispatch(state);

            case 3:
              _context.next = 8;
              break;

            case 5:
              _context.prev = 5;
              _context.t0 = _context["catch"](0);
              console.error("[observable.AsyncScheduler] error: " + valueTypes_cc.errorToString(_context.t0));

            case 8:
              --running;
              dispatchNext();

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 5]]);
    }));
  };

  var dispatchNext = function dispatchNext() {
    if (states.length === 0) {
      if (running === 0 && (end || isUnsubscribed())) {
        unsubscribe();
        complete();
      }
    } else if ((running < maxConcurrentLimit || maxConcurrentLimit === 0) && (states[0].end === false || running === 0)) {
      dispatchOne(states.shift());
    }
  };

  return {
    schedule: function schedule(state) {
      states.push(state);
      dispatchNext();
    }
  };
} //   return function dispatch(state) {
//   };
// }


function createImmediateScheduler(_ref3) {
  var dispatch = _ref3.dispatch,
      unsubscribe = _ref3.unsubscribe,
      isUnsubscribed = _ref3.isUnsubscribed,
      complete = _ref3.complete;
  return {
    schedule: function schedule(state) {
      var end = state.end === true;

      try {
        dispatch(state);
      } catch (e) {
        console.error("[observable.ImmediateScheduler] error: " + valueTypes_cc.errorToString(e));
      }

      if (end || isUnsubscribed()) {
        unsubscribe();
        complete();
      }
    }
  };
} //   return function* dispatch(state) {
//   };
// }


function createQueueScheduler(_ref4, options) {
  var dispatch = _ref4.dispatch,
      unsubscribe = _ref4.unsubscribe,
      isUnsubscribed = _ref4.isUnsubscribed,
      complete = _ref4.complete;
  var states = [];
  var coroutine = options.coroutineGroup.start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var i, end, imax, state;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            i = 0;
            end = false;
            _context.prev = 3;
            imax = states.length;

          case 5:
            if (!(i < imax)) {
              _context.next = 12;
              break;
            }

            state = states[i++];
            end = end || state.end === true;
            _context.next = 10;
            return dispatch(state);

          case 10:
            _context.next = 5;
            break;

          case 12:
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);
            console.error("[observable.QueueScheduler] error: " + valueTypes_cc.errorToString(_context.t0));

          case 17:
            if (i > 0) {
              states.splice(0, i);
            }

            if (!(states.length === 0)) {
              _context.next = 26;
              break;
            }

            if (!(end || isUnsubscribed())) {
              _context.next = 23;
              break;
            }

            unsubscribe();
            complete();
            return _context.abrupt("break", 28);

          case 23:
            coroutine.suspend();
            _context.next = 26;
            return;

          case 26:
            _context.next = 0;
            break;

          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 14]]);
  }));
  return {
    schedule: function schedule(state) {
      states.push(state);
      coroutine.resume();
    }
  };
}

var schedulers = {
  active: createActiveScheduler,
  immediate: createImmediateScheduler,
  queue: createQueueScheduler,
  async: createAsyncScheduler
};

function createScheduler(type) {
  var _schedulers$type;

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return (_schedulers$type = schedulers[type]) == null ? void 0 : _schedulers$type.call.apply(_schedulers$type, [schedulers].concat(args));
}

function createSubscribeableChild(observable, subscribeableParent, subscriber, options) {
  var _options$scheduler, _options$scheduler2, _options$scheduler2$t, _options$scheduler3, _options$scheduler3$c;

  (_options$scheduler = options.scheduler) != null ? _options$scheduler : options.scheduler = {};
  (_options$scheduler2$t = (_options$scheduler2 = options.scheduler).type) != null ? _options$scheduler2$t : _options$scheduler2.type = 'queue';
  (_options$scheduler3$c = (_options$scheduler3 = options.scheduler).coroutineGroup) != null ? _options$scheduler3$c : _options$scheduler3.coroutineGroup = observable.coroutineGroup;
  var subscribeable = createSubscribeable(observable, subscribeableParent);
  var dispatch = subscriber({
    unsubscribe: subscribeable.unsubscribe,
    isUnsubscribed: subscribeable.isUnsubscribed,
    getSubscribedCount: subscribeable.getSubscribedCount,
    next: subscribeable.next,
    complete: subscribeable.complete
  });

  var _options$scheduler4 = options.scheduler,
      schedulerType = _options$scheduler4.type,
      schedulerOptions = _objectWithoutPropertiesLoose(_options$scheduler4, _excluded);

  var scheduler = createScheduler(schedulerType, {
    dispatch: dispatch,
    unsubscribe: subscribeable.unsubscribe,
    isUnsubscribed: subscribeable.isUnsubscribed,
    complete: subscribeable.complete
  }, schedulerOptions);

  if (scheduler === undefined) {
    throw new Error("not supported scheduler: " + schedulerType);
  }

  subscribeable.push = function (state) {
    if (!subscribeable.isUnsubscribed()) {
      scheduler.schedule(state);
    }
  };

  return subscribeable;
}

function createSubscribeable(observable, subscribeableParent) {
  if (subscribeableParent === void 0) {
    subscribeableParent = null;
  }

  var subscribeableChildren = new Set();
  var unsubscribed = false;
  var completed = false;

  var subscribe = function subscribe(subscriber, options) {
    if (options === void 0) {
      options = {};
    }

    var subscribeableChild = createSubscribeableChild(observable, subscribeable, subscriber, options);

    if (!subscribeableChild.isUnsubscribed()) {
      subscribeableChildren.add(subscribeableChild);

      if (completed === true) {
        subscribeableChild.push({
          end: true
        });
      }
    }

    return {
      subscribe: subscribeableChild.subscribe
    };
  };

  var unsubscribe = function unsubscribe() {
    if (unsubscribed === false) {
      unsubscribed = true;

      if (subscribeableParent !== null) {
        subscribeableParent.unsubscribeChild(subscribeable);
      }
    }
  };

  var unsubscribeChild = function unsubscribeChild(subscribeableChild) {
    if (subscribeableChildren.has(subscribeableChild) && subscribeableChild.isUnsubscribed()) {
      subscribeableChildren["delete"](subscribeableChild);
    }
  };

  var isUnsubscribed = function isUnsubscribed() {
    return unsubscribed === true;
  };

  var getSubscribedCount = function getSubscribedCount() {
    return subscribeableChildren.size;
  };

  var next = function next(value) {
    if (completed === false) {
      notify({
        value: value,
        end: false
      });
    }
  };

  var complete = function complete(error) {
    if (completed === false) {
      completed = true;
      notify({
        error: error,
        end: true
      });
    }
  };

  var notify = function notify(state) {
    return void subscribeableChildren.forEach(function (subscribeableChild) {
      return void subscribeableChild.push(state);
    });
  };

  var subscribeable = {
    subscribe: subscribe,
    unsubscribe: unsubscribe,
    unsubscribeChild: unsubscribeChild,
    isUnsubscribed: isUnsubscribed,
    getSubscribedCount: getSubscribedCount,
    next: next,
    complete: complete
  };
  return subscribeable;
} // }
// (1) function createObservable(observer)
// (2) function createObservable(observer, coroutineGroup)
// (3) function createObservable(coroutineGroup)


function createObservable(observer, coroutineGroup) {
  if (coroutineGroup === void 0) {
    coroutineGroup = co__default["default"].mainGroup;
  }

  if (observer && co__default["default"].isCoroutineGroup(observer)) {
    coroutineGroup = observer;
    observer = undefined;
  }

  var subscribeable = createSubscribeable({
    coroutineGroup: coroutineGroup
  });

  if (observer === undefined) {
    return {
      subscribe: subscribeable.subscribe,
      getSubscribedCount: subscribeable.getSubscribedCount,
      next: subscribeable.next,
      complete: subscribeable.complete
    };
  }

  coroutineGroup.start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return observer({
              getSubscribedCount: subscribeable.getSubscribedCount,
              next: subscribeable.next,
              complete: subscribeable.complete
            });

          case 3:
            _context.next = 8;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context["catch"](0);
            console.error("[observable.Observable] error: " + valueTypes_cc.errorToString(_context.t0));

          case 8:
            subscribeable.complete();

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 5]]);
  }));
  return {
    subscribe: subscribeable.subscribe
  };
}

var toObservable = function () {
  var to;
  {
    to = function toObservable() {
      throw new Error('not implemented');
    };
  }
  return to;
}(); // }


function createTask(worker, coroutineGroup) {
  if (coroutineGroup === void 0) {
    coroutineGroup = co__default["default"].mainGroup;
  }

  var observable = createObservable(coroutineGroup);
  var coroutine;

  var subscribe = function subscribe(subscriber) {
    return observable.subscribe(subscriber);
  };

  var start = function start() {
    if (coroutine === undefined) {
      coroutine = coroutineGroup.start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return worker({
                  getSubscribedCount: observable.getSubscribedCount,
                  next: observable.next,
                  complete: observable.complete
                });

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
                _context.prev = 4;
                observable.complete();
                return _context.finish(4);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0,, 4, 7]]);
      }));
    }

    return {
      get result() {
        return coroutine.result;
      },

      get exception() {
        return coroutine.exception;
      },

      subscribe: subscribe,
      wait: wait,
      cancel: cancel,
      isCanceling: isCanceling,
      isCanceled: isCanceled,
      isDone: isDone
    };
  };

  var wait = /*#__PURE__*/regeneratorRuntime.mark(function wait(timeout) {
    if (timeout === void 0) {
      timeout = -1;
    }

    var runtime, time0;
    return regeneratorRuntime.wrap(function wait$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            runtime = co__default["default"].currentRuntime;
            time0 = timeout > 0 ? runtime.lastTickTime : 0;

          case 2:
            if (!coroutine.isDone()) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("break", 14);

          case 5:
            if (!(timeout > 0 && timeout < runtime.lastTickTime - time0)) {
              _context2.next = 10;
              break;
            }

            coroutine.stop(TaskTimeout); // yield co.waitUntil(() => coroutine.isStopped());

            _context2.next = 9;
            return co__default["default"].waitUntil(function () {
              return coroutine.isDone();
            });

          case 9:
            return _context2.abrupt("break", 14);

          case 10:
            _context2.next = 12;
            return;

          case 12:
            _context2.next = 2;
            break;

          case 14:
            if (!(coroutine.exception !== undefined)) {
              _context2.next = 16;
              break;
            }

            throw coroutine.exception;

          case 16:
            return _context2.abrupt("return", coroutine.result);

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, wait);
  });

  var cancel = function cancel() {
    return void coroutine.stop();
  };

  var isCanceling = function isCanceling() {
    return coroutine.isStopping();
  };

  var isCanceled = function isCanceled() {
    return coroutine.isStopped();
  };

  var isDone = function isDone() {
    return coroutine.isDone();
  };

  return {
    subscribe: subscribe,
    start: start
  };
}

function TaskTimeout() {}

function createEventEmitter() {
  var currentListenerId = 0;
  var freeListenerId = -1;
  var listeners = new Map();
  var listenerIdToEventNameMapping = new Map();
  var onceListeners = new Set();

  var addListener = function addListener(eventName, listener) {
    if (freeListenerId > 0) {
      currentListenerId = freeListenerId;
      freeListenerId = -1;
    } else {
      ++currentListenerId;
    }

    if (!listeners.has(eventName)) {
      listeners.set(eventName, new Map([[currentListenerId, listener]]));
    } else {
      listeners.get(eventName).set(currentListenerId, listener);
    }

    listenerIdToEventNameMapping.set(currentListenerId, eventName);
    return currentListenerId;
  };

  var addOnceListener = function addOnceListener(eventName, listener) {
    var listenerId = addListener(eventName, listener);
    onceListeners.add(listener);
    return listenerId;
  };

  var removeListener = function removeListener(listenerId) {
    if (listenerIdToEventNameMapping.has(listenerId)) {
      var eventName = listenerIdToEventNameMapping.get(listenerId);
      listenerIdToEventNameMapping["delete"](listenerId);
      var eventListeners = listeners.get(eventName);

      if (eventListeners.has(listenerId)) {
        eventListeners["delete"](listenerId);
        freeListenerId = listenerId;
        return true;
      }
    }

    return false;
  };

  var removeAllListeners = function removeAllListeners(eventName) {
    if (listeners.has(eventName)) {
      listeners.get(eventName).clear();
    }
  };

  var getListeners = function getListeners(eventName) {
    if (listeners.has(eventName)) {
      var eventListeners = [];
      listeners.get(eventName).forEach(function (listener) {
        return void eventListeners.push(listener);
      });
      return eventListeners;
    }
  };

  var getListenerCount = function getListenerCount(eventName) {
    return listeners.has(eventName) ? listeners.get(eventName).size : 0;
  };

  var getEventNames = function getEventNames() {
    var eventNames = [];
    listeners.forEach(function (listeners, eventName) {
      return void eventNames.push(eventName);
    });
    return eventNames;
  };

  var emit = function emit(eventName) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    if (listeners.has(eventName)) {
      listeners.get(eventName).forEach(function (listener, listenerId) {
        return void invokeListener(listener, listenerId, args);
      });
    }
  };

  var invokeListener = function invokeListener(listener, listenerId, args) {
    try {
      listener.apply(void 0, args);
    } catch (e) {
      console.error("[observable.EventEmitter] error: " + valueTypes_cc.errorToString(e));
    } finally {
      if (onceListeners.has(listener)) {
        onceListeners["delete"](listener);
        removeListener(listenerId);
      }
    }
  };

  return {
    addListener: addListener,
    addOnceListener: addOnceListener,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    getListeners: getListeners,
    getListenerCount: getListenerCount,
    getEventNames: getEventNames,
    emit: emit,
    on: addListener,
    once: addOnceListener,
    off: removeListener,
    offAll: removeAllListeners
  };
}

function mapEventListener(eventEmitter, eventName) {
  var _ref5;

  return _ref5 = {}, _ref5["add" + eventName + "Listener"] = function addListener(listener) {
    return eventEmitter.addListener(eventName, listener);
  }, _ref5["add" + eventName + "OnceListener"] = function addOnceListener(listener) {
    return eventEmitter.addOnceListener(eventName, listener);
  }, _ref5["remove" + eventName + "Listener"] = eventEmitter.removeListener, _ref5["removeAll" + eventName + "Listeners"] = function removeAllListeners() {
    return eventEmitter.removeAllListeners(eventName);
  }, _ref5["get" + eventName + "ListenerCount"] = function getListenerCount() {
    return eventEmitter.getListenerCount(eventName);
  }, _ref5["get" + eventName + "Listeners"] = function getListeners() {
    return eventEmitter.getListeners(eventName);
  }, _ref5["emit" + eventName] = function emit() {
    return eventEmitter.emit(eventName);
  }, _ref5;
}

var Observable = createObservable;
Observable.from = toObservable;
exports.EventEmitter = createEventEmitter;
exports.Observable = Observable;
exports.Task = createTask;
exports.TaskTimeout = TaskTimeout;
exports.mapEventListener = mapEventListener;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/playAll.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '09f22Z8iyxG6rlCefOne9ya', 'playAll');
// scripts/playAll.js

"use strict";

exports.__esModule = true;
exports["default"] = playAll;

var _co = _interopRequireDefault(require("./co.cc"));

var _playLine = _interopRequireDefault(require("./playLine"));

var _playSymbolCol = _interopRequireDefault(require("./playSymbolCol"));

var _playVideo = _interopRequireDefault(require("./playVideo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(playAll);

var PublicSetUp = require('PublicSetUp');

function playAll() {
  var cols, _loop, i, _cc$store$gameResult, iLine, iFrame, WinPointLine, WinTotalPoint, lastLine, _i, _i2, lines, _loop2, _i3;

  return regeneratorRuntime.wrap(function playAll$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          // 1
          cols = [];

          _loop = function _loop(i) {
            cols.push(_co["default"].start( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return (0, _playSymbolCol["default"])(i, 3.0);

                    case 2:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            })));
          };

          for (i = 0; i < 5; i++) {
            _loop(i);
          }

          _context3.next = 5;
          return _co["default"].waitForAll(cols);

        case 5:
          _cc$store$gameResult = cc.store.gameResult, iLine = _cc$store$gameResult.iLine, iFrame = _cc$store$gameResult.iFrame, WinPointLine = _cc$store$gameResult.WinPointLine, WinTotalPoint = _cc$store$gameResult.WinTotalPoint; // 2

          lastLine = -1;
          _i = 9 - 1;

        case 8:
          if (!(_i >= 0)) {
            _context3.next = 15;
            break;
          }

          if (!(iLine[_i] === 1)) {
            _context3.next = 12;
            break;
          }

          lastLine = _i;
          return _context3.abrupt("break", 15);

        case 12:
          _i--;
          _context3.next = 8;
          break;

        case 15:
          if (!(lastLine > -1)) {
            _context3.next = 38;
            break;
          }

          _i2 = 0;

        case 17:
          if (!(_i2 < 9)) {
            _context3.next = 25;
            break;
          }

          if (!(iLine[_i2] === 1)) {
            _context3.next = 22;
            break;
          }

          cc.find('Canvas/Game/Machine/UI/GameScore/Value').getComponent(cc.Label).string = cc.store.gameResult.WinPointLine[_i2];
          _context3.next = 22;
          return (0, _playLine["default"])(_i2, iFrame[_i2], true, _i2 === lastLine, 4.5, 3200);

        case 22:
          _i2++;
          _context3.next = 17;
          break;

        case 25:
          // 3
          lines = [];

          _loop2 = function _loop2(_i3) {
            if (iLine[_i3] === 1) {
              lines.push(_co["default"].start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return (0, _playLine["default"])(_i3, iFrame[_i3], false, false, 4.5, 3700);

                      case 2:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })));
            }
          };

          for (_i3 = 0; _i3 < 9; _i3++) {
            _loop2(_i3);
          }

          cc.find('Canvas/Game/Machine/UI/GameScore/Value').getComponent(cc.Label).string = cc.store.gameResult.WinTotalPoint;
          _context3.next = 31;
          return _co["default"].waitForAll(lines);

        case 31:
          if (!(lines.length >= 2)) {
            _context3.next = 38;
            break;
          }

          _context3.next = 34;
          return (0, _playVideo["default"])('random');

        case 34:
          cc.find('Canvas/Game/Machine/Particle_coin').active = false;
          cc.find('Canvas/Game/Machine/VideoFrame').active = false;
          cc.audioEngine.stopAll(PublicSetUp.audio1, false);
          cc.audioEngine.playMusic(PublicSetUp.MusicClip, true);

        case 38:
          cc.find('Canvas/Game/Machine/UI/GameScore/Value').getComponent(cc.Label).string = 0; // update user points

          cc.find('Canvas/Game/Machine/UI/GamePoint/Value').getComponent(cc.Label).string = cc.store.userPoints;

        case 40:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked);
}

module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccGxheUFsbC5qcyJdLCJuYW1lcyI6WyJwbGF5QWxsIiwiUHVibGljU2V0VXAiLCJyZXF1aXJlIiwiY29scyIsImkiLCJwdXNoIiwiY28iLCJzdGFydCIsIndhaXRGb3JBbGwiLCJjYyIsInN0b3JlIiwiZ2FtZVJlc3VsdCIsImlMaW5lIiwiaUZyYW1lIiwiV2luUG9pbnRMaW5lIiwiV2luVG90YWxQb2ludCIsImxhc3RMaW5lIiwiZmluZCIsImdldENvbXBvbmVudCIsIkxhYmVsIiwic3RyaW5nIiwibGluZXMiLCJsZW5ndGgiLCJhY3RpdmUiLCJhdWRpb0VuZ2luZSIsInN0b3BBbGwiLCJhdWRpbzEiLCJwbGF5TXVzaWMiLCJNdXNpY0NsaXAiLCJ1c2VyUG9pbnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O21EQUV5QkE7O0FBRHpCLElBQUlDLFdBQVcsR0FBQ0MsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ2UsU0FBVUYsT0FBVjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2I7QUFDTUcsVUFBQUEsSUFGTyxHQUVBLEVBRkE7O0FBQUEsaUNBR0pDLENBSEk7QUFJWEQsWUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQ0VDLGVBQUdDLEtBQUgsdUNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRVAsNkJBQU0sK0JBQWNILENBQWQsRUFBaUIsR0FBakIsQ0FBTjs7QUFGTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUFULEVBREY7QUFKVzs7QUFHYixlQUFTQSxDQUFULEdBQWEsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLENBQXBCLEVBQXVCQSxDQUFDLEVBQXhCLEVBQTRCO0FBQUEsa0JBQW5CQSxDQUFtQjtBQVEzQjs7QUFYWTtBQVliLGlCQUFNRSxlQUFHRSxVQUFILENBQWNMLElBQWQsQ0FBTjs7QUFaYTtBQUFBLGlDQWEwQ00sRUFBRSxDQUFDQyxLQUFILENBQVNDLFVBYm5ELEVBYUxDLEtBYkssd0JBYUxBLEtBYkssRUFhRUMsTUFiRix3QkFhRUEsTUFiRixFQWFVQyxZQWJWLHdCQWFVQSxZQWJWLEVBYXdCQyxhQWJ4Qix3QkFhd0JBLGFBYnhCLEVBZWI7O0FBQ0lDLFVBQUFBLFFBaEJTLEdBZ0JFLENBQUMsQ0FoQkg7QUFpQkpaLFVBQUFBLEVBakJJLEdBaUJBLElBQUksQ0FqQko7O0FBQUE7QUFBQSxnQkFpQk9BLEVBQUMsSUFBSSxDQWpCWjtBQUFBO0FBQUE7QUFBQTs7QUFBQSxnQkFrQlBRLEtBQUssQ0FBQ1IsRUFBRCxDQUFMLEtBQWEsQ0FsQk47QUFBQTtBQUFBO0FBQUE7O0FBbUJUWSxVQUFBQSxRQUFRLEdBQUdaLEVBQVg7QUFuQlM7O0FBQUE7QUFpQmVBLFVBQUFBLEVBQUMsRUFqQmhCO0FBQUE7QUFBQTs7QUFBQTtBQUFBLGdCQXVCVFksUUFBUSxHQUFHLENBQUMsQ0F2Qkg7QUFBQTtBQUFBO0FBQUE7O0FBd0JGWixVQUFBQSxHQXhCRSxHQXdCRSxDQXhCRjs7QUFBQTtBQUFBLGdCQXdCS0EsR0FBQyxHQUFHLENBeEJUO0FBQUE7QUFBQTtBQUFBOztBQUFBLGdCQXlCTFEsS0FBSyxDQUFDUixHQUFELENBQUwsS0FBYSxDQXpCUjtBQUFBO0FBQUE7QUFBQTs7QUEwQlBLLFVBQUFBLEVBQUUsQ0FBQ1EsSUFBSCxDQUFRLHdDQUFSLEVBQWtEQyxZQUFsRCxDQUErRFQsRUFBRSxDQUFDVSxLQUFsRSxFQUF5RUMsTUFBekUsR0FBa0ZYLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTQyxVQUFULENBQW9CRyxZQUFwQixDQUFpQ1YsR0FBakMsQ0FBbEY7QUExQk87QUEyQlAsaUJBQU0sMEJBQVNBLEdBQVQsRUFBWVMsTUFBTSxDQUFDVCxHQUFELENBQWxCLEVBQXVCLElBQXZCLEVBQTZCQSxHQUFDLEtBQUtZLFFBQW5DLEVBQTZDLEdBQTdDLEVBQWtELElBQWxELENBQU47O0FBM0JPO0FBd0JZWixVQUFBQSxHQUFDLEVBeEJiO0FBQUE7QUFBQTs7QUFBQTtBQWdDWDtBQUNNaUIsVUFBQUEsS0FqQ0ssR0FpQ0csRUFqQ0g7O0FBQUEsbUNBa0NGakIsR0FsQ0U7QUFtQ1QsZ0JBQUlRLEtBQUssQ0FBQ1IsR0FBRCxDQUFMLEtBQWEsQ0FBakIsRUFBb0I7QUFDbEJpQixjQUFBQSxLQUFLLENBQUNoQixJQUFOLENBQ0VDLGVBQUdDLEtBQUgsdUNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1AsK0JBQU0sMEJBQVNILEdBQVQsRUFBWVMsTUFBTSxDQUFDVCxHQUFELENBQWxCLEVBQXVCLEtBQXZCLEVBQThCLEtBQTlCLEVBQXFDLEdBQXJDLEVBQTBDLElBQTFDLENBQU47O0FBRE87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFBVCxFQURGO0FBTUQ7QUExQ1E7O0FBa0NYLGVBQVNBLEdBQVQsR0FBYSxDQUFiLEVBQWdCQSxHQUFDLEdBQUcsQ0FBcEIsRUFBdUJBLEdBQUMsRUFBeEIsRUFBNEI7QUFBQSxtQkFBbkJBLEdBQW1CO0FBUzNCOztBQUNESyxVQUFBQSxFQUFFLENBQUNRLElBQUgsQ0FBUSx3Q0FBUixFQUFrREMsWUFBbEQsQ0FBK0RULEVBQUUsQ0FBQ1UsS0FBbEUsRUFBeUVDLE1BQXpFLEdBQWtGWCxFQUFFLENBQUNDLEtBQUgsQ0FBU0MsVUFBVCxDQUFvQkksYUFBdEc7QUE1Q1c7QUE4Q1gsaUJBQU1ULGVBQUdFLFVBQUgsQ0FBY2EsS0FBZCxDQUFOOztBQTlDVztBQUFBLGdCQWlEUEEsS0FBSyxDQUFDQyxNQUFOLElBQWdCLENBakRUO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBa0RULGlCQUFNLDJCQUFVLFFBQVYsQ0FBTjs7QUFsRFM7QUFtRFRiLFVBQUFBLEVBQUUsQ0FBQ1EsSUFBSCxDQUFRLG1DQUFSLEVBQTZDTSxNQUE3QyxHQUFvRCxLQUFwRDtBQUNBZCxVQUFBQSxFQUFFLENBQUNRLElBQUgsQ0FBUSxnQ0FBUixFQUEwQ00sTUFBMUMsR0FBaUQsS0FBakQ7QUFDQWQsVUFBQUEsRUFBRSxDQUFDZSxXQUFILENBQWVDLE9BQWYsQ0FBdUJ4QixXQUFXLENBQUN5QixNQUFuQyxFQUEyQyxLQUEzQztBQUNBakIsVUFBQUEsRUFBRSxDQUFDZSxXQUFILENBQWVHLFNBQWYsQ0FBeUIxQixXQUFXLENBQUMyQixTQUFyQyxFQUFnRCxJQUFoRDs7QUF0RFM7QUEyRGJuQixVQUFBQSxFQUFFLENBQUNRLElBQUgsQ0FBUSx3Q0FBUixFQUFrREMsWUFBbEQsQ0FBK0RULEVBQUUsQ0FBQ1UsS0FBbEUsRUFBeUVDLE1BQXpFLEdBQWtGLENBQWxGLENBM0RhLENBNkRiOztBQUNBWCxVQUFBQSxFQUFFLENBQUNRLElBQUgsQ0FBUSx3Q0FBUixFQUFrREMsWUFBbEQsQ0FBK0RULEVBQUUsQ0FBQ1UsS0FBbEUsRUFBeUVDLE1BQXpFLEdBQWtGWCxFQUFFLENBQUNDLEtBQUgsQ0FBU21CLFVBQTNGOztBQTlEYTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvIGZyb20gJy4vY28uY2MnO1xyXG5pbXBvcnQgcGxheUxpbmUgZnJvbSAnLi9wbGF5TGluZSc7XHJcbmltcG9ydCBwbGF5U3ltYm9sQ29sIGZyb20gJy4vcGxheVN5bWJvbENvbCc7XHJcbmltcG9ydCBwbGF5VmlkZW8gZnJvbSAnLi9wbGF5VmlkZW8nO1xyXG5sZXQgUHVibGljU2V0VXA9cmVxdWlyZSgnUHVibGljU2V0VXAnKTtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHBsYXlBbGwoKSB7XHJcbiAgLy8gMVxyXG4gIGNvbnN0IGNvbHMgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgY29scy5wdXNoKFxyXG4gICAgICBjby5zdGFydChmdW5jdGlvbiogKCkge1xyXG5cclxuICAgICAgICB5aWVsZCBwbGF5U3ltYm9sQ29sKGksIDMuMCk7XHJcblxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgeWllbGQgY28ud2FpdEZvckFsbChjb2xzKTtcclxuICBjb25zdCB7IGlMaW5lLCBpRnJhbWUsIFdpblBvaW50TGluZSwgV2luVG90YWxQb2ludCB9ID0gY2Muc3RvcmUuZ2FtZVJlc3VsdDtcclxuXHJcbiAgLy8gMlxyXG4gIGxldCBsYXN0TGluZSA9IC0xO1xyXG4gIGZvciAobGV0IGkgPSA5IC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgIGlmIChpTGluZVtpXSA9PT0gMSkge1xyXG4gICAgICBsYXN0TGluZSA9IGk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAobGFzdExpbmUgPiAtMSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyBpKyspIHtcclxuICAgICAgaWYgKGlMaW5lW2ldID09PSAxKSB7XHJcbiAgICAgICAgY2MuZmluZCgnQ2FudmFzL0dhbWUvTWFjaGluZS9VSS9HYW1lU2NvcmUvVmFsdWUnKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IGNjLnN0b3JlLmdhbWVSZXN1bHQuV2luUG9pbnRMaW5lW2ldO1xyXG4gICAgICAgIHlpZWxkIHBsYXlMaW5lKGksIGlGcmFtZVtpXSwgdHJ1ZSwgaSA9PT0gbGFzdExpbmUsIDQuNSwgMzIwMCk7XHJcblxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gM1xyXG4gICAgY29uc3QgbGluZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgaSsrKSB7XHJcbiAgICAgIGlmIChpTGluZVtpXSA9PT0gMSkge1xyXG4gICAgICAgIGxpbmVzLnB1c2goXHJcbiAgICAgICAgICBjby5zdGFydChmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICB5aWVsZCBwbGF5TGluZShpLCBpRnJhbWVbaV0sIGZhbHNlLCBmYWxzZSwgNC41LCAzNzAwKTtcclxuXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvVUkvR2FtZVNjb3JlL1ZhbHVlJykuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBjYy5zdG9yZS5nYW1lUmVzdWx0LldpblRvdGFsUG9pbnQ7XHJcblxyXG4gICAgeWllbGQgY28ud2FpdEZvckFsbChsaW5lcyk7XHJcblxyXG4gICAgLy8gNFxyXG4gICAgaWYgKGxpbmVzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIHlpZWxkIHBsYXlWaWRlbygncmFuZG9tJyk7XHJcbiAgICAgIGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvUGFydGljbGVfY29pbicpLmFjdGl2ZT1mYWxzZTtcclxuICAgICAgY2MuZmluZCgnQ2FudmFzL0dhbWUvTWFjaGluZS9WaWRlb0ZyYW1lJykuYWN0aXZlPWZhbHNlO1xyXG4gICAgICBjYy5hdWRpb0VuZ2luZS5zdG9wQWxsKFB1YmxpY1NldFVwLmF1ZGlvMSwgZmFsc2UpO1xyXG4gICAgICBjYy5hdWRpb0VuZ2luZS5wbGF5TXVzaWMoUHVibGljU2V0VXAuTXVzaWNDbGlwLCB0cnVlKTtcclxuICAgICAgXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYy5maW5kKCdDYW52YXMvR2FtZS9NYWNoaW5lL1VJL0dhbWVTY29yZS9WYWx1ZScpLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gMDtcclxuXHJcbiAgLy8gdXBkYXRlIHVzZXIgcG9pbnRzXHJcbiAgY2MuZmluZCgnQ2FudmFzL0dhbWUvTWFjaGluZS9VSS9HYW1lUG9pbnQvVmFsdWUnKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IGNjLnN0b3JlLnVzZXJQb2ludHM7XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/playSymbolCol.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2eb7deXGDJNl6WX8kLesyPk', 'playSymbolCol');
// scripts/playSymbolCol.js

"use strict";

exports.__esModule = true;
exports["default"] = playSymbolCol;

var _co = _interopRequireDefault(require("./co.cc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(playSymbolCol);

function playSymbolCol(colIndex, speed) {
  var cols, col, spacing, dist0, dist, t0, dt, dy, newDist, movedDist, t1;
  return regeneratorRuntime.wrap(function playSymbolCol$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          cols = cc.find('Canvas/Game/Machine/Performance/Cols');
          col = cols.getChildByName("" + (colIndex + 1));
          spacing = col.children[1].y - col.children[0].y;
          dist0 = col.children[col.childrenCount - 3].y - col.children[0].y;
          dist = dist0;
          t0 = _co["default"].currentRuntime.lastTickTime;
          dt = 0;

        case 7:
          if (!true) {
            _context.next = 22;
            break;
          }

          dy = speed * dt;

          if (dy >= spacing) {
            dy = speed * (1 / 60 * 1000);
          }

          if (dy >= dist) {
            if (cc.store.isGameResultGot() === true) {
              if (col.redist > 0) {
                col.y = col.baseY;
                dy -= dist;
                dist0 = col.children[col.redist].y - col.children[0].y;
                dist = dist0;
                col.redist = 0;
              } else {
                dy = dist;
              }
            } else {
              col.y = col.baseY;
              dy -= dist;
              dist = dist0;
            }
          } else {
            if (col.redist2 > 0) {
              // dist0 = (col.children[col.redist2].y - col.children[0].y) - Math.abs(col.y - col.baseY);
              newDist = col.children[col.redist2].y - col.children[0].y;
              movedDist = dist0 - dist;
              dist0 = newDist - movedDist;
              dist = dist0;
              col.redist2 = 0;
            }
          }

          dist -= dy;
          col.y -= dy;
          _context.next = 15;
          return;

        case 15:
          if (!(dist <= 0)) {
            _context.next = 17;
            break;
          }

          return _context.abrupt("break", 22);

        case 17:
          t1 = _co["default"].currentRuntime.lastTickTime;
          dt = t1 - t0;
          t0 = t1;
          _context.next = 7;
          break;

        case 22:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccGxheVN5bWJvbENvbC5qcyJdLCJuYW1lcyI6WyJwbGF5U3ltYm9sQ29sIiwiY29sSW5kZXgiLCJzcGVlZCIsImNvbHMiLCJjYyIsImZpbmQiLCJjb2wiLCJnZXRDaGlsZEJ5TmFtZSIsInNwYWNpbmciLCJjaGlsZHJlbiIsInkiLCJkaXN0MCIsImNoaWxkcmVuQ291bnQiLCJkaXN0IiwidDAiLCJjbyIsImN1cnJlbnRSdW50aW1lIiwibGFzdFRpY2tUaW1lIiwiZHQiLCJkeSIsInN0b3JlIiwiaXNHYW1lUmVzdWx0R290IiwicmVkaXN0IiwiYmFzZVkiLCJyZWRpc3QyIiwibmV3RGlzdCIsIm1vdmVkRGlzdCIsInQxIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O21EQUV5QkE7O0FBQVYsU0FBVUEsYUFBVixDQUF3QkMsUUFBeEIsRUFBa0NDLEtBQWxDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNQQyxVQUFBQSxJQURPLEdBQ0FDLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRLHNDQUFSLENBREE7QUFFUEMsVUFBQUEsR0FGTyxHQUVESCxJQUFJLENBQUNJLGNBQUwsT0FBdUJOLFFBQVEsR0FBRyxDQUFsQyxFQUZDO0FBSVBPLFVBQUFBLE9BSk8sR0FJR0YsR0FBRyxDQUFDRyxRQUFKLENBQWEsQ0FBYixFQUFnQkMsQ0FBaEIsR0FBb0JKLEdBQUcsQ0FBQ0csUUFBSixDQUFhLENBQWIsRUFBZ0JDLENBSnZDO0FBS1RDLFVBQUFBLEtBTFMsR0FLREwsR0FBRyxDQUFDRyxRQUFKLENBQWFILEdBQUcsQ0FBQ00sYUFBSixHQUFvQixDQUFqQyxFQUFvQ0YsQ0FBcEMsR0FBd0NKLEdBQUcsQ0FBQ0csUUFBSixDQUFhLENBQWIsRUFBZ0JDLENBTHZEO0FBTVRHLFVBQUFBLElBTlMsR0FNRkYsS0FORTtBQU9URyxVQUFBQSxFQVBTLEdBT0pDLGVBQUdDLGNBQUgsQ0FBa0JDLFlBUGQ7QUFRVEMsVUFBQUEsRUFSUyxHQVFKLENBUkk7O0FBQUE7QUFBQSxlQVVOLElBVk07QUFBQTtBQUFBO0FBQUE7O0FBWUxDLFVBQUFBLEVBWkssR0FZQWpCLEtBQUssR0FBR2dCLEVBWlI7O0FBY1gsY0FBSUMsRUFBRSxJQUFJWCxPQUFWLEVBQW1CO0FBQ2pCVyxZQUFBQSxFQUFFLEdBQUdqQixLQUFLLElBQUssSUFBSSxFQUFMLEdBQVcsSUFBZixDQUFWO0FBQ0Q7O0FBRUQsY0FBSWlCLEVBQUUsSUFBSU4sSUFBVixFQUFnQjtBQUNkLGdCQUFJVCxFQUFFLENBQUNnQixLQUFILENBQVNDLGVBQVQsT0FBK0IsSUFBbkMsRUFBeUM7QUFDdkMsa0JBQUlmLEdBQUcsQ0FBQ2dCLE1BQUosR0FBYSxDQUFqQixFQUFvQjtBQUNsQmhCLGdCQUFBQSxHQUFHLENBQUNJLENBQUosR0FBUUosR0FBRyxDQUFDaUIsS0FBWjtBQUNBSixnQkFBQUEsRUFBRSxJQUFJTixJQUFOO0FBQ0FGLGdCQUFBQSxLQUFLLEdBQUdMLEdBQUcsQ0FBQ0csUUFBSixDQUFhSCxHQUFHLENBQUNnQixNQUFqQixFQUF5QlosQ0FBekIsR0FBNkJKLEdBQUcsQ0FBQ0csUUFBSixDQUFhLENBQWIsRUFBZ0JDLENBQXJEO0FBQ0FHLGdCQUFBQSxJQUFJLEdBQUdGLEtBQVA7QUFDQUwsZ0JBQUFBLEdBQUcsQ0FBQ2dCLE1BQUosR0FBYSxDQUFiO0FBQ0QsZUFORCxNQU1PO0FBQ0xILGdCQUFBQSxFQUFFLEdBQUdOLElBQUw7QUFDRDtBQUNGLGFBVkQsTUFVTztBQUNMUCxjQUFBQSxHQUFHLENBQUNJLENBQUosR0FBUUosR0FBRyxDQUFDaUIsS0FBWjtBQUNBSixjQUFBQSxFQUFFLElBQUlOLElBQU47QUFDQUEsY0FBQUEsSUFBSSxHQUFHRixLQUFQO0FBQ0Q7QUFDRixXQWhCRCxNQWdCTztBQUNMLGdCQUFJTCxHQUFHLENBQUNrQixPQUFKLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkI7QUFDTUMsY0FBQUEsT0FGYSxHQUVIbkIsR0FBRyxDQUFDRyxRQUFKLENBQWFILEdBQUcsQ0FBQ2tCLE9BQWpCLEVBQTBCZCxDQUExQixHQUE4QkosR0FBRyxDQUFDRyxRQUFKLENBQWEsQ0FBYixFQUFnQkMsQ0FGM0M7QUFHYmdCLGNBQUFBLFNBSGEsR0FHRGYsS0FBSyxHQUFHRSxJQUhQO0FBSW5CRixjQUFBQSxLQUFLLEdBQUdjLE9BQU8sR0FBR0MsU0FBbEI7QUFDQWIsY0FBQUEsSUFBSSxHQUFHRixLQUFQO0FBQ0FMLGNBQUFBLEdBQUcsQ0FBQ2tCLE9BQUosR0FBYyxDQUFkO0FBQ0Q7QUFDRjs7QUFDRFgsVUFBQUEsSUFBSSxJQUFJTSxFQUFSO0FBQ0FiLFVBQUFBLEdBQUcsQ0FBQ0ksQ0FBSixJQUFTUyxFQUFUO0FBN0NXO0FBK0NYOztBQS9DVztBQUFBLGdCQWlEUE4sSUFBSSxJQUFJLENBakREO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBcURMYyxVQUFBQSxFQXJESyxHQXFEQVosZUFBR0MsY0FBSCxDQUFrQkMsWUFyRGxCO0FBc0RYQyxVQUFBQSxFQUFFLEdBQUdTLEVBQUUsR0FBR2IsRUFBVjtBQUNBQSxVQUFBQSxFQUFFLEdBQUdhLEVBQUw7QUF2RFc7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvIGZyb20gJy4vY28uY2MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHBsYXlTeW1ib2xDb2woY29sSW5kZXgsIHNwZWVkKSB7XHJcbiAgY29uc3QgY29scyA9IGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvUGVyZm9ybWFuY2UvQ29scycpO1xyXG4gIGNvbnN0IGNvbCA9IGNvbHMuZ2V0Q2hpbGRCeU5hbWUoYCR7Y29sSW5kZXggKyAxfWApO1xyXG5cclxuICBjb25zdCBzcGFjaW5nID0gY29sLmNoaWxkcmVuWzFdLnkgLSBjb2wuY2hpbGRyZW5bMF0ueTtcclxuICBsZXQgZGlzdDAgPSBjb2wuY2hpbGRyZW5bY29sLmNoaWxkcmVuQ291bnQgLSAzXS55IC0gY29sLmNoaWxkcmVuWzBdLnk7XHJcbiAgbGV0IGRpc3QgPSBkaXN0MDtcclxuICBsZXQgdDAgPSBjby5jdXJyZW50UnVudGltZS5sYXN0VGlja1RpbWU7XHJcbiAgbGV0IGR0ID0gMDtcclxuXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuXHJcbiAgICBjb25zdCBkeSA9IHNwZWVkICogZHQ7XHJcblxyXG4gICAgaWYgKGR5ID49IHNwYWNpbmcpIHtcclxuICAgICAgZHkgPSBzcGVlZCAqICgoMSAvIDYwKSAqIDEwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkeSA+PSBkaXN0KSB7XHJcbiAgICAgIGlmIChjYy5zdG9yZS5pc0dhbWVSZXN1bHRHb3QoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChjb2wucmVkaXN0ID4gMCkge1xyXG4gICAgICAgICAgY29sLnkgPSBjb2wuYmFzZVk7XHJcbiAgICAgICAgICBkeSAtPSBkaXN0O1xyXG4gICAgICAgICAgZGlzdDAgPSBjb2wuY2hpbGRyZW5bY29sLnJlZGlzdF0ueSAtIGNvbC5jaGlsZHJlblswXS55O1xyXG4gICAgICAgICAgZGlzdCA9IGRpc3QwO1xyXG4gICAgICAgICAgY29sLnJlZGlzdCA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGR5ID0gZGlzdDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29sLnkgPSBjb2wuYmFzZVk7XHJcbiAgICAgICAgZHkgLT0gZGlzdDtcclxuICAgICAgICBkaXN0ID0gZGlzdDA7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChjb2wucmVkaXN0MiA+IDApIHtcclxuICAgICAgICAvLyBkaXN0MCA9IChjb2wuY2hpbGRyZW5bY29sLnJlZGlzdDJdLnkgLSBjb2wuY2hpbGRyZW5bMF0ueSkgLSBNYXRoLmFicyhjb2wueSAtIGNvbC5iYXNlWSk7XHJcbiAgICAgICAgY29uc3QgbmV3RGlzdCA9IGNvbC5jaGlsZHJlbltjb2wucmVkaXN0Ml0ueSAtIGNvbC5jaGlsZHJlblswXS55O1xyXG4gICAgICAgIGNvbnN0IG1vdmVkRGlzdCA9IGRpc3QwIC0gZGlzdDtcclxuICAgICAgICBkaXN0MCA9IG5ld0Rpc3QgLSBtb3ZlZERpc3Q7XHJcbiAgICAgICAgZGlzdCA9IGRpc3QwO1xyXG4gICAgICAgIGNvbC5yZWRpc3QyID0gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzdCAtPSBkeTtcclxuICAgIGNvbC55IC09IGR5O1xyXG5cclxuICAgIHlpZWxkO1xyXG5cclxuICAgIGlmIChkaXN0IDw9IDApIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdDEgPSBjby5jdXJyZW50UnVudGltZS5sYXN0VGlja1RpbWU7XHJcbiAgICBkdCA9IHQxIC0gdDA7XHJcbiAgICB0MCA9IHQxO1xyXG4gIH1cclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/playLine.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7df3cW5mitLtr6VKY359Ywe', 'playLine');
// scripts/playLine.js

"use strict";

exports.__esModule = true;
exports["default"] = playLine;

var _co = _interopRequireDefault(require("./co.cc"));

var _getSymbolAnchor = _interopRequireDefault(require("./getSymbolAnchor"));

var _lineFrames = _interopRequireDefault(require("./lineFrames"));

var _playEffect = _interopRequireDefault(require("./playEffect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(playLine);

function playLine(lineIndex, frameCnt, slideEffect, keepVisible, speed, duration) {
  var linesNode, lineNode, effects;
  return regeneratorRuntime.wrap(function playLine$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          linesNode = cc.find('Canvas/Game/Machine/Performance/Lines');
          lineNode = linesNode.getChildByName("" + (lineIndex + 1));
          lineNode.active = true;

          if (!(slideEffect === true)) {
            _context4.next = 7;
            break;
          }

          lineNode.x -= linesNode.width;
          _context4.next = 7;
          return _co["default"].start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var t0, dt, dx, t1;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    t0 = _co["default"].currentRuntime.lastTickTime;
                    dt = 0;

                  case 3:
                    if (!true) {
                      _context.next = 16;
                      break;
                    }

                    dx = speed * dt;
                    lineNode.x += dx;

                    if (!(lineNode.x >= 0)) {
                      _context.next = 9;
                      break;
                    }

                    lineNode.x = 0;
                    return _context.abrupt("break", 16);

                  case 9:
                    _context.next = 11;
                    return;

                  case 11:
                    t1 = _co["default"].currentRuntime.lastTickTime;
                    dt = t1 - t0;
                    t0 = t1;
                    _context.next = 3;
                    break;

                  case 16:
                    _context.prev = 16;
                    lineNode.x = 0;
                    return _context.finish(16);

                  case 19:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[0,, 16, 19]]);
          }));

        case 7:
          _context4.prev = 7;
          effects = [];
          _context4.prev = 9;
          return _context4.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
            var frames, _loop, i;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    frames = _lineFrames["default"][lineIndex + 1];

                    _loop = function _loop(i) {
                      effects.push(_co["default"].start( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                        return regeneratorRuntime.wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                _context2.next = 2;
                                return (0, _playEffect["default"])((0, _getSymbolAnchor["default"])(frames[i]), 2000);

                              case 2:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2);
                      })));
                    };

                    for (i = 0; i < frameCnt; i++) {
                      _loop(i);
                    }

                    _context3.next = 5;
                    return _co["default"].waitForMilliseconds(duration);

                  case 5:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          })(), "t0", 11);

        case 11:
          _context4.prev = 11;
          effects.forEach(function (effect) {
            return effect.stop();
          });
          return _context4.finish(11);

        case 14:
          _context4.prev = 14;

          if (keepVisible === false) {
            lineNode.active = false;
          }

          return _context4.finish(14);

        case 17:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked, null, [[7,, 14, 17], [9,, 11, 14]]);
}

module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccGxheUxpbmUuanMiXSwibmFtZXMiOlsicGxheUxpbmUiLCJsaW5lSW5kZXgiLCJmcmFtZUNudCIsInNsaWRlRWZmZWN0Iiwia2VlcFZpc2libGUiLCJzcGVlZCIsImR1cmF0aW9uIiwibGluZXNOb2RlIiwiY2MiLCJmaW5kIiwibGluZU5vZGUiLCJnZXRDaGlsZEJ5TmFtZSIsImFjdGl2ZSIsIngiLCJ3aWR0aCIsImNvIiwic3RhcnQiLCJ0MCIsImN1cnJlbnRSdW50aW1lIiwibGFzdFRpY2tUaW1lIiwiZHQiLCJkeCIsInQxIiwiZWZmZWN0cyIsImZyYW1lcyIsImxpbmVGcmFtZXMiLCJpIiwicHVzaCIsIndhaXRGb3JNaWxsaXNlY29uZHMiLCJmb3JFYWNoIiwiZWZmZWN0Iiwic3RvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OzttREFFeUJBOztBQUFWLFNBQVVBLFFBQVYsQ0FBbUJDLFNBQW5CLEVBQThCQyxRQUE5QixFQUF3Q0MsV0FBeEMsRUFBcURDLFdBQXJELEVBQWtFQyxLQUFsRSxFQUF5RUMsUUFBekU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1BDLFVBQUFBLFNBRE8sR0FDS0MsRUFBRSxDQUFDQyxJQUFILENBQVEsdUNBQVIsQ0FETDtBQUVQQyxVQUFBQSxRQUZPLEdBRUlILFNBQVMsQ0FBQ0ksY0FBVixPQUE0QlYsU0FBUyxHQUFHLENBQXhDLEVBRko7QUFHYlMsVUFBQUEsUUFBUSxDQUFDRSxNQUFULEdBQWtCLElBQWxCOztBQUhhLGdCQUtUVCxXQUFXLEtBQUssSUFMUDtBQUFBO0FBQUE7QUFBQTs7QUFNWE8sVUFBQUEsUUFBUSxDQUFDRyxDQUFULElBQWNOLFNBQVMsQ0FBQ08sS0FBeEI7QUFOVztBQVFYLGlCQUFNQyxlQUFHQyxLQUFILHVDQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRVBDLG9CQUFBQSxFQUZPLEdBRUZGLGVBQUdHLGNBQUgsQ0FBa0JDLFlBRmhCO0FBR1BDLG9CQUFBQSxFQUhPLEdBR0YsQ0FIRTs7QUFBQTtBQUFBLHlCQUtKLElBTEk7QUFBQTtBQUFBO0FBQUE7O0FBTUhDLG9CQUFBQSxFQU5HLEdBTUVoQixLQUFLLEdBQUdlLEVBTlY7QUFPVFYsb0JBQUFBLFFBQVEsQ0FBQ0csQ0FBVCxJQUFjUSxFQUFkOztBQVBTLDBCQVFMWCxRQUFRLENBQUNHLENBQVQsSUFBYyxDQVJUO0FBQUE7QUFBQTtBQUFBOztBQVNQSCxvQkFBQUEsUUFBUSxDQUFDRyxDQUFULEdBQWEsQ0FBYjtBQVRPOztBQUFBO0FBQUE7QUFhVDs7QUFiUztBQWVIUyxvQkFBQUEsRUFmRyxHQWVFUCxlQUFHRyxjQUFILENBQWtCQyxZQWZwQjtBQWdCVEMsb0JBQUFBLEVBQUUsR0FBR0UsRUFBRSxHQUFHTCxFQUFWO0FBQ0FBLG9CQUFBQSxFQUFFLEdBQUdLLEVBQUw7QUFqQlM7QUFBQTs7QUFBQTtBQUFBO0FBb0JYWixvQkFBQUEsUUFBUSxDQUFDRyxDQUFULEdBQWEsQ0FBYjtBQXBCVzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFULEVBQU47O0FBUlc7QUFBQTtBQWtDTFUsVUFBQUEsT0FsQ0ssR0FrQ0ssRUFsQ0w7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFvQ0hDLG9CQUFBQSxNQXBDRyxHQW9DTUMsdUJBQVd4QixTQUFTLEdBQUcsQ0FBdkIsQ0FwQ047O0FBQUEsMkNBcUNBeUIsQ0FyQ0E7QUFzQ1BILHNCQUFBQSxPQUFPLENBQUNJLElBQVIsQ0FDRVosZUFBR0MsS0FBSCx1Q0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDUCx1Q0FBTSw0QkFBVyxpQ0FBZ0JRLE1BQU0sQ0FBQ0UsQ0FBRCxDQUF0QixDQUFYLEVBQXVDLElBQXZDLENBQU47O0FBRE87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQVQsRUFERjtBQXRDTzs7QUFxQ1QseUJBQVNBLENBQVQsR0FBYSxDQUFiLEVBQWdCQSxDQUFDLEdBQUd4QixRQUFwQixFQUE4QndCLENBQUMsRUFBL0IsRUFBbUM7QUFBQSw0QkFBMUJBLENBQTBCO0FBTWxDOztBQTNDUTtBQTRDVCwyQkFBTVgsZUFBR2EsbUJBQUgsQ0FBdUJ0QixRQUF2QixDQUFOOztBQTVDUztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBOENUaUIsVUFBQUEsT0FBTyxDQUFDTSxPQUFSLENBQWdCLFVBQUFDLE1BQU07QUFBQSxtQkFBSUEsTUFBTSxDQUFDQyxJQUFQLEVBQUo7QUFBQSxXQUF0QjtBQTlDUzs7QUFBQTtBQUFBOztBQWlEWCxjQUFJM0IsV0FBVyxLQUFLLEtBQXBCLEVBQTJCO0FBQ3pCTSxZQUFBQSxRQUFRLENBQUNFLE1BQVQsR0FBa0IsS0FBbEI7QUFDRDs7QUFuRFU7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbyBmcm9tICcuL2NvLmNjJztcclxuaW1wb3J0IGdldFN5bWJvbEFuY2hvciBmcm9tICcuL2dldFN5bWJvbEFuY2hvcic7XHJcbmltcG9ydCBsaW5lRnJhbWVzIGZyb20gJy4vbGluZUZyYW1lcyc7XHJcbmltcG9ydCBwbGF5RWZmZWN0IGZyb20gJy4vcGxheUVmZmVjdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogcGxheUxpbmUobGluZUluZGV4LCBmcmFtZUNudCwgc2xpZGVFZmZlY3QsIGtlZXBWaXNpYmxlLCBzcGVlZCwgZHVyYXRpb24pIHtcclxuICBjb25zdCBsaW5lc05vZGUgPSBjYy5maW5kKCdDYW52YXMvR2FtZS9NYWNoaW5lL1BlcmZvcm1hbmNlL0xpbmVzJyk7XHJcbiAgY29uc3QgbGluZU5vZGUgPSBsaW5lc05vZGUuZ2V0Q2hpbGRCeU5hbWUoYCR7bGluZUluZGV4ICsgMX1gKTtcclxuICBsaW5lTm9kZS5hY3RpdmUgPSB0cnVlO1xyXG5cclxuICBpZiAoc2xpZGVFZmZlY3QgPT09IHRydWUpIHtcclxuICAgIGxpbmVOb2RlLnggLT0gbGluZXNOb2RlLndpZHRoO1xyXG5cclxuICAgIHlpZWxkIGNvLnN0YXJ0KGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IHQwID0gY28uY3VycmVudFJ1bnRpbWUubGFzdFRpY2tUaW1lO1xyXG4gICAgICAgIGxldCBkdCA9IDA7XHJcblxyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICBjb25zdCBkeCA9IHNwZWVkICogZHQ7XHJcbiAgICAgICAgICBsaW5lTm9kZS54ICs9IGR4O1xyXG4gICAgICAgICAgaWYgKGxpbmVOb2RlLnggPj0gMCkge1xyXG4gICAgICAgICAgICBsaW5lTm9kZS54ID0gMDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgeWllbGQ7XHJcblxyXG4gICAgICAgICAgY29uc3QgdDEgPSBjby5jdXJyZW50UnVudGltZS5sYXN0VGlja1RpbWU7XHJcbiAgICAgICAgICBkdCA9IHQxIC0gdDA7XHJcbiAgICAgICAgICB0MCA9IHQxO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBsaW5lTm9kZS54ID0gMDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgZWZmZWN0cyA9IFtdO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZnJhbWVzID0gbGluZUZyYW1lc1tsaW5lSW5kZXggKyAxXTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZUNudDsgaSsrKSB7XHJcbiAgICAgICAgZWZmZWN0cy5wdXNoKFxyXG4gICAgICAgICAgY28uc3RhcnQoZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgeWllbGQgcGxheUVmZmVjdChnZXRTeW1ib2xBbmNob3IoZnJhbWVzW2ldKSwgMjAwMCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgeWllbGQgY28ud2FpdEZvck1pbGxpc2Vjb25kcyhkdXJhdGlvbik7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBlZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IGVmZmVjdC5zdG9wKCkpO1xyXG4gICAgfVxyXG4gIH0gZmluYWxseSB7XHJcbiAgICBpZiAoa2VlcFZpc2libGUgPT09IGZhbHNlKSB7XHJcbiAgICAgIGxpbmVOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/playVideo.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0c65dzSrlBHP6e1UaxRHn2s', 'playVideo');
// scripts/playVideo.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _co = _interopRequireDefault(require("./co.cc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var PublicSetUp = require('PublicSetUp');

var playVideo = function () {
  var videoPlayerNode = null;
  var videoBundle = null;
  var playing = false;

  function onDone(player) {
    player.enabled = false;
    player.clip = null;
    playing = false;
  }

  return /*#__PURE__*/regeneratorRuntime.mark(function playVideo(name) {
    var list, clip, done;
    return regeneratorRuntime.wrap(function playVideo$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(videoPlayerNode === null)) {
              _context.next = 7;
              break;
            }

            videoPlayerNode = cc.find('Canvas/Game/Machine/Performance/VideoPlayer');

            if (!(videoPlayerNode === null)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return");

          case 4:
            videoPlayerNode.on('ready-to-play', function (player) {
              player.enabled = true;
              player.play();
              cc.audioEngine.playEffect(PublicSetUp.audio1, true);
              cc.find('Canvas/Game/Machine/Particle_coin').active = true;
              cc.find('Canvas/Game/Machine/VideoFrame').active = true;
            });
            videoPlayerNode.on('error', onDone);
            videoPlayerNode.on('completed', onDone);

          case 7:
            if (!(videoBundle == null)) {
              _context.next = 11;
              break;
            }

            videoBundle = cc.assetManager.getBundle('mp4');

            if (!(videoBundle === null)) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return");

          case 11:
            if (name === 'random') {
              list = ['LINE_MOVIE_1643105941778', 'LINE_MOVIE_1643105948791'];
              name = list[Math.floor(Math.random() * list.length)];
            }

            clip = videoBundle.get(name, cc.VideoClip);

            if (!(clip == null)) {
              _context.next = 18;
              break;
            }

            done = false;
            videoBundle.load(name, cc.VideoClip, function (error, asset) {
              done = true;

              if (!error) {
                clip = asset; // clip.addRef();
              }
            });
            _context.next = 18;
            return _co["default"].waitUntil(function () {
              return done === true;
            });

          case 18:
            if (!(clip != null)) {
              _context.next = 23;
              break;
            }

            videoPlayerNode.getComponent(cc.VideoPlayer).clip = clip;
            playing = true;
            _context.next = 23;
            return _co["default"].waitUntil(function () {
              return playing === false;
            });

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, playVideo);
  });
}();

var _default = playVideo;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccGxheVZpZGVvLmpzIl0sIm5hbWVzIjpbIlB1YmxpY1NldFVwIiwicmVxdWlyZSIsInBsYXlWaWRlbyIsInZpZGVvUGxheWVyTm9kZSIsInZpZGVvQnVuZGxlIiwicGxheWluZyIsIm9uRG9uZSIsInBsYXllciIsImVuYWJsZWQiLCJjbGlwIiwibmFtZSIsImNjIiwiZmluZCIsIm9uIiwicGxheSIsImF1ZGlvRW5naW5lIiwicGxheUVmZmVjdCIsImF1ZGlvMSIsImFjdGl2ZSIsImFzc2V0TWFuYWdlciIsImdldEJ1bmRsZSIsImxpc3QiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJnZXQiLCJWaWRlb0NsaXAiLCJkb25lIiwibG9hZCIsImVycm9yIiwiYXNzZXQiLCJjbyIsIndhaXRVbnRpbCIsImdldENvbXBvbmVudCIsIlZpZGVvUGxheWVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0EsSUFBSUEsV0FBVyxHQUFDQyxPQUFPLENBQUMsYUFBRCxDQUF2Qjs7QUFDQSxJQUFNQyxTQUFTLEdBQUksWUFBWTtBQUM3QixNQUFJQyxlQUFlLEdBQUcsSUFBdEI7QUFDQSxNQUFJQyxXQUFXLEdBQUcsSUFBbEI7QUFDQSxNQUFJQyxPQUFPLEdBQUcsS0FBZDs7QUFFQSxXQUFTQyxNQUFULENBQWdCQyxNQUFoQixFQUF3QjtBQUN0QkEsSUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLEtBQWpCO0FBQ0FELElBQUFBLE1BQU0sQ0FBQ0UsSUFBUCxHQUFjLElBQWQ7QUFDQUosSUFBQUEsT0FBTyxHQUFHLEtBQVY7QUFDRDs7QUFFRCw4Q0FBTyxTQUFVSCxTQUFWLENBQW9CUSxJQUFwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxrQkFDRFAsZUFBZSxLQUFLLElBRG5CO0FBQUE7QUFBQTtBQUFBOztBQUVIQSxZQUFBQSxlQUFlLEdBQUdRLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRLDZDQUFSLENBQWxCOztBQUZHLGtCQUdDVCxlQUFlLEtBQUssSUFIckI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFPSEEsWUFBQUEsZUFBZSxDQUFDVSxFQUFoQixDQUFtQixlQUFuQixFQUFvQyxVQUFBTixNQUFNLEVBQUk7QUFDNUNBLGNBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFqQjtBQUNBRCxjQUFBQSxNQUFNLENBQUNPLElBQVA7QUFDQUgsY0FBQUEsRUFBRSxDQUFDSSxXQUFILENBQWVDLFVBQWYsQ0FBMEJoQixXQUFXLENBQUNpQixNQUF0QyxFQUE4QyxJQUE5QztBQUVBTixjQUFBQSxFQUFFLENBQUNDLElBQUgsQ0FBUSxtQ0FBUixFQUE2Q00sTUFBN0MsR0FBb0QsSUFBcEQ7QUFDQVAsY0FBQUEsRUFBRSxDQUFDQyxJQUFILENBQVEsZ0NBQVIsRUFBMENNLE1BQTFDLEdBQWlELElBQWpEO0FBQ0QsYUFQRDtBQVNBZixZQUFBQSxlQUFlLENBQUNVLEVBQWhCLENBQW1CLE9BQW5CLEVBQTRCUCxNQUE1QjtBQUVBSCxZQUFBQSxlQUFlLENBQUNVLEVBQWhCLENBQW1CLFdBQW5CLEVBQWdDUCxNQUFoQzs7QUFsQkc7QUFBQSxrQkFxQkRGLFdBQVcsSUFBSSxJQXJCZDtBQUFBO0FBQUE7QUFBQTs7QUFzQkhBLFlBQUFBLFdBQVcsR0FBR08sRUFBRSxDQUFDUSxZQUFILENBQWdCQyxTQUFoQixDQUEwQixLQUExQixDQUFkOztBQXRCRyxrQkF1QkNoQixXQUFXLEtBQUssSUF2QmpCO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBNEJMLGdCQUFJTSxJQUFJLEtBQUssUUFBYixFQUF1QjtBQUNmVyxjQUFBQSxJQURlLEdBQ1IsQ0FBQywwQkFBRCxFQUE2QiwwQkFBN0IsQ0FEUTtBQUVyQlgsY0FBQUEsSUFBSSxHQUFHVyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JILElBQUksQ0FBQ0ksTUFBaEMsQ0FBRCxDQUFYO0FBQ0Q7O0FBRUdoQixZQUFBQSxJQWpDQyxHQWlDTUwsV0FBVyxDQUFDc0IsR0FBWixDQUFnQmhCLElBQWhCLEVBQXNCQyxFQUFFLENBQUNnQixTQUF6QixDQWpDTjs7QUFBQSxrQkFrQ0RsQixJQUFJLElBQUksSUFsQ1A7QUFBQTtBQUFBO0FBQUE7O0FBbUNDbUIsWUFBQUEsSUFuQ0QsR0FtQ1EsS0FuQ1I7QUFvQ0h4QixZQUFBQSxXQUFXLENBQUN5QixJQUFaLENBQWlCbkIsSUFBakIsRUFBdUJDLEVBQUUsQ0FBQ2dCLFNBQTFCLEVBQXFDLFVBQUNHLEtBQUQsRUFBUUMsS0FBUixFQUFrQjtBQUNyREgsY0FBQUEsSUFBSSxHQUFHLElBQVA7O0FBQ0Esa0JBQUksQ0FBQ0UsS0FBTCxFQUFZO0FBQ1ZyQixnQkFBQUEsSUFBSSxHQUFHc0IsS0FBUCxDQURVLENBRVY7QUFDRDtBQUNGLGFBTkQ7QUFwQ0c7QUE0Q0gsbUJBQU1DLGVBQUdDLFNBQUgsQ0FBYTtBQUFBLHFCQUFNTCxJQUFJLEtBQUssSUFBZjtBQUFBLGFBQWIsQ0FBTjs7QUE1Q0c7QUFBQSxrQkErQ0RuQixJQUFJLElBQUksSUEvQ1A7QUFBQTtBQUFBO0FBQUE7O0FBZ0RITixZQUFBQSxlQUFlLENBQUMrQixZQUFoQixDQUE2QnZCLEVBQUUsQ0FBQ3dCLFdBQWhDLEVBQTZDMUIsSUFBN0MsR0FBb0RBLElBQXBEO0FBQ0FKLFlBQUFBLE9BQU8sR0FBRyxJQUFWO0FBakRHO0FBa0RILG1CQUFNMkIsZUFBR0MsU0FBSCxDQUFhO0FBQUEscUJBQU01QixPQUFPLEtBQUssS0FBbEI7QUFBQSxhQUFiLENBQU47O0FBbERHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFVSCxTQUFWO0FBQUEsR0FBUDtBQXFERCxDQWhFaUIsRUFBbEI7O2VBa0VlQSIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvIGZyb20gJy4vY28uY2MnO1xyXG5sZXQgUHVibGljU2V0VXA9cmVxdWlyZSgnUHVibGljU2V0VXAnKTtcclxuY29uc3QgcGxheVZpZGVvID0gKGZ1bmN0aW9uICgpIHtcclxuICBsZXQgdmlkZW9QbGF5ZXJOb2RlID0gbnVsbDtcclxuICBsZXQgdmlkZW9CdW5kbGUgPSBudWxsO1xyXG4gIGxldCBwbGF5aW5nID0gZmFsc2U7XHJcblxyXG4gIGZ1bmN0aW9uIG9uRG9uZShwbGF5ZXIpIHtcclxuICAgIHBsYXllci5lbmFibGVkID0gZmFsc2U7XHJcbiAgICBwbGF5ZXIuY2xpcCA9IG51bGw7XHJcbiAgICBwbGF5aW5nID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZnVuY3Rpb24qIHBsYXlWaWRlbyhuYW1lKSB7XHJcbiAgICBpZiAodmlkZW9QbGF5ZXJOb2RlID09PSBudWxsKSB7XHJcbiAgICAgIHZpZGVvUGxheWVyTm9kZSA9IGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvUGVyZm9ybWFuY2UvVmlkZW9QbGF5ZXInKTtcclxuICAgICAgaWYgKHZpZGVvUGxheWVyTm9kZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmlkZW9QbGF5ZXJOb2RlLm9uKCdyZWFkeS10by1wbGF5JywgcGxheWVyID0+IHtcclxuICAgICAgICBwbGF5ZXIuZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgcGxheWVyLnBsYXkoKTtcclxuICAgICAgICBjYy5hdWRpb0VuZ2luZS5wbGF5RWZmZWN0KFB1YmxpY1NldFVwLmF1ZGlvMSwgdHJ1ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2MuZmluZCgnQ2FudmFzL0dhbWUvTWFjaGluZS9QYXJ0aWNsZV9jb2luJykuYWN0aXZlPXRydWU7XHJcbiAgICAgICAgY2MuZmluZCgnQ2FudmFzL0dhbWUvTWFjaGluZS9WaWRlb0ZyYW1lJykuYWN0aXZlPXRydWU7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmlkZW9QbGF5ZXJOb2RlLm9uKCdlcnJvcicsIG9uRG9uZSk7XHJcblxyXG4gICAgICB2aWRlb1BsYXllck5vZGUub24oJ2NvbXBsZXRlZCcsIG9uRG9uZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHZpZGVvQnVuZGxlID09IG51bGwpIHtcclxuICAgICAgdmlkZW9CdW5kbGUgPSBjYy5hc3NldE1hbmFnZXIuZ2V0QnVuZGxlKCdtcDQnKTtcclxuICAgICAgaWYgKHZpZGVvQnVuZGxlID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5hbWUgPT09ICdyYW5kb20nKSB7XHJcbiAgICAgIGNvbnN0IGxpc3QgPSBbJ0xJTkVfTU9WSUVfMTY0MzEwNTk0MTc3OCcsICdMSU5FX01PVklFXzE2NDMxMDU5NDg3OTEnXTtcclxuICAgICAgbmFtZSA9IGxpc3RbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGlzdC5sZW5ndGgpXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY2xpcCA9IHZpZGVvQnVuZGxlLmdldChuYW1lLCBjYy5WaWRlb0NsaXApO1xyXG4gICAgaWYgKGNsaXAgPT0gbnVsbCkge1xyXG4gICAgICBsZXQgZG9uZSA9IGZhbHNlO1xyXG4gICAgICB2aWRlb0J1bmRsZS5sb2FkKG5hbWUsIGNjLlZpZGVvQ2xpcCwgKGVycm9yLCBhc3NldCkgPT4ge1xyXG4gICAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICAgIGlmICghZXJyb3IpIHtcclxuICAgICAgICAgIGNsaXAgPSBhc3NldDtcclxuICAgICAgICAgIC8vIGNsaXAuYWRkUmVmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHlpZWxkIGNvLndhaXRVbnRpbCgoKSA9PiBkb25lID09PSB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2xpcCAhPSBudWxsKSB7XHJcbiAgICAgIHZpZGVvUGxheWVyTm9kZS5nZXRDb21wb25lbnQoY2MuVmlkZW9QbGF5ZXIpLmNsaXAgPSBjbGlwO1xyXG4gICAgICBwbGF5aW5nID0gdHJ1ZTtcclxuICAgICAgeWllbGQgY28ud2FpdFVudGlsKCgpID0+IHBsYXlpbmcgPT09IGZhbHNlKTtcclxuICAgIH1cclxuICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcGxheVZpZGVvO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/readMeButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bce97NYoj9IO59QL1TApEv3', 'readMeButton');
// scripts/readMeButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {});
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccmVhZE1lQnV0dG9uLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJvbkxvYWQiLCJidXR0b24iLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiQnV0dG9uIiwib24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLE1BSE8sb0JBR0U7QUFDUCxRQUFNQyxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCTixFQUFFLENBQUNPLE1BQTFCLENBQWY7QUFDQUgsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLFlBQU0sQ0FBRSxDQUFoQztBQUNEO0FBTk0sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xyXG4gICAgYnV0dG9uLm5vZGUub24oJ2NsaWNrJywgKCkgPT4ge30pO1xyXG4gIH1cclxufSk7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/requestGameResult.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '53e61tB6ghOP4phobMRUcRW', 'requestGameResult');
// scripts/requestGameResult.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _co = _interopRequireDefault(require("./co.cc"));

var _buildSymbols = require("./buildSymbols");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getNodeBoundingBox(node) {
  node.parent._updateWorldMatrix();

  var width = node._contentSize.width;
  var height = node._contentSize.height;
  var rect = cc.rect(-node._anchorPoint.x * width, -node._anchorPoint.y * height, width, height);

  node._calculWorldMatrix();

  rect.transformMat4(rect, node._worldMatrix);
  return rect;
}

var requestGameResult = function () {
  var coGroup = _co["default"].CoroutineGroup('RequestGameResult', {
    priority: _co["default"].CoroutineGroup.NormalPriority + 1
  });

  function updateResult(k) {
    var symbolDataList = cc.store.symbolDataList;
    var iGrid = cc.store.gameResult.iGrid;

    for (var i = 0; i < symbolDataList.length; i++) {
      for (var j = 0; j < 3; j++) {
        var symbolIndex = iGrid[i + 5 * j];
        symbolDataList[i][k - j] = symbolIndex;
        (0, _buildSymbols.setSymbol)(i, k - j, symbolIndex);
      }
    }
  }

  function setRedist(cols, name, value) {
    for (var i = 0; i < cols.childrenCount; i++) {
      var col = cols.getChildByName("" + (i + 1));
      col[name] = value;
    }
  }

  return function requestGameResult() {
    var _cc$store;

    var cols = cc.find('Canvas/Game/Machine/Performance/Cols');
    setRedist(cols, 'redist', 0);
    setRedist(cols, 'redist2', 0); // coGroup.start(function* () {
    //   const colIndex = 0;
    //   const col = cols.getChildByName(`${colIndex + 1}`);
    //   const colsBox = getNodeBoundingBox(cols);
    //   while (true) {
    //     // const seconds = 1 + Math.floor( Math.random() * 5 );
    //     // yield co.waitForSeconds(seconds);
    //     const symbolBox = getNodeBoundingBox(col.children[col.childrenCount - 3]);
    //     if (colsBox.intersects(symbolBox) === true) {
    //       while (true) {
    //         const symbolBox = getNodeBoundingBox(col.children[3]);
    //         if (colsBox.intersects(symbolBox) === true) {
    //           break;
    //         }
    //         yield;
    //       }
    //       const iGrid = new Array(15);
    //       const iLine = new Array(9);
    //       const iFrame = new Array(9);
    //       const WinPointLine = new Array(9);
    //       const WinTotalPoint = 0;
    //       for (let i = 0; i < 9; i++) {
    //         // iLine[i] = Math.random() > 0.85 ? 1 : 0;
    //         iLine[i] = 0;
    //         iFrame[i] = 3 + Math.floor(Math.random() * 3);
    //       }
    //       for (let i = 0; i < 15; i++) {
    //         iGrid[i] = Math.floor(Math.random() * 11);
    //       }
    //       cc.store.gameResult = { iGrid, iLine, iFrame, WinPointLine, WinTotalPoint };
    //       cc.store.gameResultGotStatus = 2;
    //       break;
    //     }
    //     yield;
    //   }
    // });

    cc.store.gameResultGotStatus = 1;
    (_cc$store = cc.store) == null ? void 0 : _cc$store.gameServer.GetPI().sendData(3162, cc.store.currentBet);
    console.log(3162);
    coGroup.start( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var colIndex, col, colsBox, byeond;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              colIndex = 0;
              col = cols.getChildByName("" + (colIndex + 1));
              colsBox = getNodeBoundingBox(cols);
              byeond = false;

            case 4:
              if (!true) {
                _context2.next = 28;
                break;
              }

              if (!(cc.store.gameResultGotStatus === 2)) {
                _context2.next = 23;
                break;
              }

              if (!(colsBox.intersects(getNodeBoundingBox(col.children[col.childrenCount - 3])) === true)) {
                _context2.next = 14;
                break;
              }

              updateResult(5);
              setRedist(cols, 'redist', 3);
              cc.store.gameResultGotStatus = 3;
              _context2.next = 12;
              return _co["default"].waitUntil(function () {
                return colsBox.intersects(getNodeBoundingBox(col.children[3])) === true;
              });

            case 12:
              _context2.next = 19;
              break;

            case 14:
              if (!(byeond === true || cc.store.playing === false)) {
                _context2.next = 18;
                break;
              }

              return _context2.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var t, t1, t2;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        t = col.childrenCount - 4;

                        while (colsBox.intersects(getNodeBoundingBox(col.children[--t])) !== true) {
                          ;
                        }

                        t1 = t + 3;
                        updateResult(t1);
                        t2 = t1 - 2;
                        setRedist(cols, 'redist2', t2);
                        cc.store.gameResultGotStatus = 3;
                        _context.next = 9;
                        return _co["default"].waitUntil(function () {
                          return colsBox.intersects(getNodeBoundingBox(col.children[t2])) === true;
                        });

                      case 9:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })(), "t0", 16);

            case 16:
              _context2.next = 19;
              break;

            case 18:
              cc.store.gameResultGotStatus = 3;

            case 19:
              updateResult(cc.store.symbolDataList[colIndex].length - 1);
              return _context2.abrupt("break", 28);

            case 23:
              if (byeond === false) {
                byeond = colsBox.intersects(getNodeBoundingBox(col.children[col.childrenCount - 3]));
              }

            case 24:
              _context2.next = 26;
              return;

            case 26:
              _context2.next = 4;
              break;

            case 28:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  };
}();

var _default = requestGameResult;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/requestTableInfo.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ea41dwm6KNGRr/Hhs6XSq53', 'requestTableInfo');
// scripts/requestTableInfo.js

"use strict";

exports.__esModule = true;
exports["default"] = requestTableInfo;

function requestTableInfo() {
  var _cc$store;

  (_cc$store = cc.store) == null ? void 0 : _cc$store.gameServer.GetPI().sendData(3161);
}

module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccmVxdWVzdFRhYmxlSW5mby5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0VGFibGVJbmZvIiwiY2MiLCJzdG9yZSIsImdhbWVTZXJ2ZXIiLCJHZXRQSSIsInNlbmREYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLGdCQUFULEdBQTRCO0FBQUE7O0FBQ3pDLGVBQUFDLEVBQUUsQ0FBQ0MsS0FBSCwrQkFBVUMsVUFBVixDQUFxQkMsS0FBckIsR0FBNkJDLFFBQTdCLENBQXNDLElBQXRDO0FBQ0QiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVlc3RUYWJsZUluZm8oKSB7XHJcbiAgY2Muc3RvcmU/LmdhbWVTZXJ2ZXIuR2V0UEkoKS5zZW5kRGF0YSgzMTYxKTtcclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/soundOffButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c7e77eYJVZJbpCXbZ8oqtld', 'soundOffButton');
// scripts/soundOffButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      if (cc.store.soundEnabled === true) {
        cc.store.soundEnabled = false;
        button.node.active = false;
        button.getComponent(cc.Button).interactable = false;
        var soundOnButton = cc.find('Canvas/Game/Machine/UI/Menu/SettingsPanel/SoundOnButton');
        soundOnButton.active = true;
        soundOnButton.getComponent(cc.Button).interactable = true;
      }
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcc291bmRPZmZCdXR0b24uanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsIm9uTG9hZCIsImJ1dHRvbiIsIm5vZGUiLCJnZXRDb21wb25lbnQiLCJCdXR0b24iLCJvbiIsInN0b3JlIiwic291bmRFbmFibGVkIiwiYWN0aXZlIiwiaW50ZXJhY3RhYmxlIiwic291bmRPbkJ1dHRvbiIsImZpbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLE1BSE8sb0JBR0U7QUFDUCxRQUFNQyxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCTixFQUFFLENBQUNPLE1BQTFCLENBQWY7QUFDQUgsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLFlBQU07QUFDNUIsVUFBSVIsRUFBRSxDQUFDUyxLQUFILENBQVNDLFlBQVQsS0FBMEIsSUFBOUIsRUFBb0M7QUFDbENWLFFBQUFBLEVBQUUsQ0FBQ1MsS0FBSCxDQUFTQyxZQUFULEdBQXdCLEtBQXhCO0FBRUFOLFFBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTSxNQUFaLEdBQXFCLEtBQXJCO0FBQ0FQLFFBQUFBLE1BQU0sQ0FBQ0UsWUFBUCxDQUFvQk4sRUFBRSxDQUFDTyxNQUF2QixFQUErQkssWUFBL0IsR0FBOEMsS0FBOUM7QUFFQSxZQUFNQyxhQUFhLEdBQUdiLEVBQUUsQ0FBQ2MsSUFBSCxDQUFRLHlEQUFSLENBQXRCO0FBQ0FELFFBQUFBLGFBQWEsQ0FBQ0YsTUFBZCxHQUF1QixJQUF2QjtBQUNBRSxRQUFBQSxhQUFhLENBQUNQLFlBQWQsQ0FBMkJOLEVBQUUsQ0FBQ08sTUFBOUIsRUFBc0NLLFlBQXRDLEdBQXFELElBQXJEO0FBQ0Q7QUFDRixLQVhEO0FBWUQ7QUFqQk0sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xyXG4gICAgYnV0dG9uLm5vZGUub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAoY2Muc3RvcmUuc291bmRFbmFibGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgY2Muc3RvcmUuc291bmRFbmFibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGJ1dHRvbi5nZXRDb21wb25lbnQoY2MuQnV0dG9uKS5pbnRlcmFjdGFibGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgY29uc3Qgc291bmRPbkJ1dHRvbiA9IGNjLmZpbmQoJ0NhbnZhcy9HYW1lL01hY2hpbmUvVUkvTWVudS9TZXR0aW5nc1BhbmVsL1NvdW5kT25CdXR0b24nKTtcclxuICAgICAgICBzb3VuZE9uQnV0dG9uLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgc291bmRPbkJ1dHRvbi5nZXRDb21wb25lbnQoY2MuQnV0dG9uKS5pbnRlcmFjdGFibGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/soundOnButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ffb6fjQ0+RNLo0s6j9YDXb0', 'soundOnButton');
// scripts/soundOnButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {
      if (cc.store.soundEnabled === false) {
        cc.store.soundEnabled = true;
        button.node.active = false;
        button.getComponent(cc.Button).interactable = false;
        var soundOffButton = cc.find('Canvas/Game/Machine/UI/Menu/SettingsPanel/SoundOffButton');
        soundOffButton.active = true;
        soundOffButton.getComponent(cc.Button).interactable = true;
      }
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcc291bmRPbkJ1dHRvbi5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50Iiwib25Mb2FkIiwiYnV0dG9uIiwibm9kZSIsImdldENvbXBvbmVudCIsIkJ1dHRvbiIsIm9uIiwic3RvcmUiLCJzb3VuZEVuYWJsZWQiLCJhY3RpdmUiLCJpbnRlcmFjdGFibGUiLCJzb3VuZE9mZkJ1dHRvbiIsImZpbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLE1BSE8sb0JBR0U7QUFDUCxRQUFNQyxNQUFNLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCTixFQUFFLENBQUNPLE1BQTFCLENBQWY7QUFDQUgsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlHLEVBQVosQ0FBZSxPQUFmLEVBQXdCLFlBQU07QUFDNUIsVUFBSVIsRUFBRSxDQUFDUyxLQUFILENBQVNDLFlBQVQsS0FBMEIsS0FBOUIsRUFBcUM7QUFDbkNWLFFBQUFBLEVBQUUsQ0FBQ1MsS0FBSCxDQUFTQyxZQUFULEdBQXdCLElBQXhCO0FBRUFOLFFBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTSxNQUFaLEdBQXFCLEtBQXJCO0FBQ0FQLFFBQUFBLE1BQU0sQ0FBQ0UsWUFBUCxDQUFvQk4sRUFBRSxDQUFDTyxNQUF2QixFQUErQkssWUFBL0IsR0FBOEMsS0FBOUM7QUFFQSxZQUFNQyxjQUFjLEdBQUdiLEVBQUUsQ0FBQ2MsSUFBSCxDQUFRLDBEQUFSLENBQXZCO0FBQ0FELFFBQUFBLGNBQWMsQ0FBQ0YsTUFBZixHQUF3QixJQUF4QjtBQUNBRSxRQUFBQSxjQUFjLENBQUNQLFlBQWYsQ0FBNEJOLEVBQUUsQ0FBQ08sTUFBL0IsRUFBdUNLLFlBQXZDLEdBQXNELElBQXREO0FBQ0Q7QUFDRixLQVhEO0FBWUQ7QUFqQk0sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xyXG4gICAgYnV0dG9uLm5vZGUub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAoY2Muc3RvcmUuc291bmRFbmFibGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgIGNjLnN0b3JlLnNvdW5kRW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGJ1dHRvbi5nZXRDb21wb25lbnQoY2MuQnV0dG9uKS5pbnRlcmFjdGFibGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgY29uc3Qgc291bmRPZmZCdXR0b24gPSBjYy5maW5kKCdDYW52YXMvR2FtZS9NYWNoaW5lL1VJL01lbnUvU2V0dGluZ3NQYW5lbC9Tb3VuZE9mZkJ1dHRvbicpO1xyXG4gICAgICAgIHNvdW5kT2ZmQnV0dG9uLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgc291bmRPZmZCdXR0b24uZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbikuaW50ZXJhY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/symbolGridIndexMapping.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b60119mLBhMQby66QcdkI7P', 'symbolGridIndexMapping');
// scripts/symbolGridIndexMapping.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;
// from(server)
// 0   1  2  3  4
// 5   6  7  8  9
// 10 11 12 13 14
// to(client)
// 0   3  6  9 12
// 1   4  7 10 13
// 2   5  8 11 14
var mapping = {
  0: 0,
  1: 3,
  2: 6,
  3: 9,
  4: 12,
  5: 1,
  6: 4,
  7: 7,
  8: 10,
  9: 13,
  10: 2,
  11: 5,
  12: 8,
  13: 11,
  14: 14
};
var _default = mapping;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcc3ltYm9sR3JpZEluZGV4TWFwcGluZy5qcyJdLCJuYW1lcyI6WyJtYXBwaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLE9BQU8sR0FBRztBQUNkLEtBQUcsQ0FEVztBQUVkLEtBQUcsQ0FGVztBQUdkLEtBQUcsQ0FIVztBQUlkLEtBQUcsQ0FKVztBQUtkLEtBQUcsRUFMVztBQU1kLEtBQUcsQ0FOVztBQU9kLEtBQUcsQ0FQVztBQVFkLEtBQUcsQ0FSVztBQVNkLEtBQUcsRUFUVztBQVVkLEtBQUcsRUFWVztBQVdkLE1BQUksQ0FYVTtBQVlkLE1BQUksQ0FaVTtBQWFkLE1BQUksQ0FiVTtBQWNkLE1BQUksRUFkVTtBQWVkLE1BQUk7QUFmVSxDQUFoQjtlQWtCZUEiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZyb20oc2VydmVyKVxyXG4vLyAwICAgMSAgMiAgMyAgNFxyXG4vLyA1ICAgNiAgNyAgOCAgOVxyXG4vLyAxMCAxMSAxMiAxMyAxNFxyXG5cclxuLy8gdG8oY2xpZW50KVxyXG4vLyAwICAgMyAgNiAgOSAxMlxyXG4vLyAxICAgNCAgNyAxMCAxM1xyXG4vLyAyICAgNSAgOCAxMSAxNFxyXG5jb25zdCBtYXBwaW5nID0ge1xyXG4gIDA6IDAsXHJcbiAgMTogMyxcclxuICAyOiA2LFxyXG4gIDM6IDksXHJcbiAgNDogMTIsXHJcbiAgNTogMSxcclxuICA2OiA0LFxyXG4gIDc6IDcsXHJcbiAgODogMTAsXHJcbiAgOTogMTMsXHJcbiAgMTA6IDIsXHJcbiAgMTE6IDUsXHJcbiAgMTI6IDgsXHJcbiAgMTM6IDExLFxyXG4gIDE0OiAxNFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWFwcGluZztcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/shuffle.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3088bIf7hFLLb+KojLFSOpO', 'shuffle');
// scripts/shuffle.js

"use strict";

exports.__esModule = true;
exports["default"] = shuffle;

function shuffle(arr) {
  for (var i = arr.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var t = arr[i];
    arr[i] = arr[j];
    arr[j] = t;
  }
}

module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcc2h1ZmZsZS5qcyJdLCJuYW1lcyI6WyJzaHVmZmxlIiwiYXJyIiwiaSIsImxlbmd0aCIsImoiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ25DLE9BQUssSUFBSUMsQ0FBQyxHQUFHRCxHQUFHLENBQUNFLE1BQUosR0FBYSxDQUExQixFQUE2QkQsQ0FBQyxHQUFHLENBQWpDLEVBQW9DQSxDQUFDLEVBQXJDLEVBQXlDO0FBQ3ZDLFFBQU1FLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxNQUFpQkwsQ0FBQyxHQUFHLENBQXJCLENBQVgsQ0FBVjtBQUNBLFFBQU1NLENBQUMsR0FBR1AsR0FBRyxDQUFDQyxDQUFELENBQWI7QUFDQUQsSUFBQUEsR0FBRyxDQUFDQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDRyxDQUFELENBQVo7QUFDQUgsSUFBQUEsR0FBRyxDQUFDRyxDQUFELENBQUgsR0FBU0ksQ0FBVDtBQUNEO0FBQ0YiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNodWZmbGUoYXJyKSB7XHJcbiAgZm9yIChsZXQgaSA9IGFyci5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XHJcbiAgICBjb25zdCB0ID0gYXJyW2ldO1xyXG4gICAgYXJyW2ldID0gYXJyW2pdO1xyXG4gICAgYXJyW2pdID0gdDtcclxuICB9XHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/videoReady.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '3df78yNr2lJfpYZ5OYGLZOU', 'videoReady');
// scripts/videoReady.js

"use strict";

cc.Class({
  "extends": cc.Component,
  start: function start() {
    this.node.getComponent(cc.VideoPlayer).enabled = false;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcdmlkZW9SZWFkeS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50Iiwic3RhcnQiLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiVmlkZW9QbGF5ZXIiLCJlbmFibGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNQLGFBQVNELEVBQUUsQ0FBQ0UsU0FETDtBQUdQQyxFQUFBQSxLQUhPLG1CQUdDO0FBQ04sU0FBS0MsSUFBTCxDQUFVQyxZQUFWLENBQXVCTCxFQUFFLENBQUNNLFdBQTFCLEVBQXVDQyxPQUF2QyxHQUFpRCxLQUFqRDtBQUNEO0FBTE0sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLlZpZGVvUGxheWVyKS5lbmFibGVkID0gZmFsc2U7XHJcbiAgfVxyXG59KTtcclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/value-types.cc.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '49246LeIZxFhqidu40sdZdX', 'value-types.cc');
// scripts/value-types.cc.js

// @ts-nocheck
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function isArray(obj) {
  return Array.isArray(obj);
}

function isArrayEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (objA == null || objB == null) {
    return false;
  }

  if (objA.length !== objB.length) {
    return false;
  }

  for (var i = 0; i < objA.length; ++i) {
    if (objA[i] !== objB[i]) {
      return false;
    }
  }

  return true;
}

var isBoolean = function isBoolean(b) {
  return typeof b === 'boolean';
};

function isFunction(fn) {
  return typeof fn === 'function';
}

function isInteger(value) {
  var t = typeof value;
  return t === 'number' || t === 'string' && value !== '' ? Number.isInteger(value * 1) : false;
}

function toInteger(value, defaultValue) {
  return isInteger(value) ? parseInt(value, 10) : defaultValue;
}

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

var is = function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
}; // eslint-disable-line no-self-compare


function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    var aKey = keysA[i];

    if (!hasOwnProperty$1.call(objB, aKey) || !is(objA[aKey], objB[aKey])) {
      return false;
    }
  }

  return true;
}

function LinkedList() {
  var _linkedList;

  var _marked = /*#__PURE__*/regeneratorRuntime.mark(getIterable),
      _marked2 = /*#__PURE__*/regeneratorRuntime.mark(getReverseIterable);

  var nodes = {};
  var head = null;
  var tail = null;
  var count = 0;
  var nid = 0;
  var gettingPublic = true;

  function getNode(node, nextOrPrev) {
    var nextOrPrevNode = node[nextOrPrev];

    if (nextOrPrevNode) {
      return gettingPublic ? nextOrPrevNode["public"] : nextOrPrevNode;
    }

    return null;
  }

  function getNodeFrom(publicNode) {
    var node = null;

    if (publicNode) {
      gettingPublic = false;

      try {
        node = publicNode.next;

        if (node) {
          node = node.prev;
        } else {
          node = publicNode.prev;

          if (node) {
            node = node.next;
          } else {
            if (count === 1 && shallowEqual(head.value, publicNode.value)) {
              node = head;
            }
          }
        }
      } finally {
        gettingPublic = true;
      }
    }

    return node;
  }

  function createNode(value, next, prev) {
    ++nid;
    ++count;
    var node = {
      nid: nid,
      value: value,
      next: next,
      prev: prev,
      "public": {
        get value() {
          return node.value;
        },

        get next() {
          return getNode(node, 'next');
        },

        get prev() {
          return getNode(node, 'prev');
        }

      }
    };
    nodes[nid] = node;
    return node;
  }

  function destroyNode(node) {
    --count;
    node.prev = node.next = node["public"] = null;
    delete nodes[node.nid];
  }

  function addToHead(value) {
    var node = createNode(value, head, null);

    if (head) {
      head.prev = node;
    } else {
      tail = node;
    }

    head = node;
    return node["public"];
  }

  function addToTail(value) {
    var node = createNode(value, null, tail);

    if (tail) {
      tail.next = node;
    } else {
      head = node;
    }

    tail = node;
    return node["public"];
  }

  function moveToHead(node) {
    node = getNodeFrom(node);

    if (node && nodes[node.nid] && head.nid !== node.nid) {
      if (tail.nid === node.nid) {
        tail = node.prev;
        tail.next = null;
      } else {
        node.next.prev = node.prev;
        node.prev.next = node.next;
      }

      node.next = head;
      node.prev = null;
      head.prev = node;
      head = node;
    }
  }

  function moveToTail(node) {
    node = getNodeFrom(node);

    if (node && nodes[node.nid] && tail.nid !== node.nid) {
      if (head.nid === node.nid) {
        head = node.next;
        head.prev = null;
      } else {
        node.next.prev = node.prev;
        node.prev.next = node.next;
      }

      node.prev = tail;
      node.next = null;
      tail.next = node;
      tail = node;
    }
  }

  function removeHead() {
    var value;

    if (head) {
      var next = head.next;
      value = head.value;
      destroyNode(head);
      head = next;

      if (head) {
        head.prev = null;
      } else {
        tail = null;
      }
    }

    return value;
  }

  function removeTail() {
    var value;

    if (tail) {
      var prev = tail.prev;
      value = tail.value;
      destroyNode(tail);
      tail = prev;

      if (tail) {
        tail.next = null;
      } else {
        head = null;
      }
    }

    return value;
  }

  function remove(node) {
    node = getNodeFrom(node);

    if (node && nodes[node.nid]) {
      if (head.nid === node.nid) {
        removeHead();
      } else if (tail.nid === node.nid) {
        removeTail();
      } else {
        node.prev.next = node.next;
        node.next.prev = node.prev;
        destroyNode(node);
      }
    }
  }

  function removeAll() {
    var node = head;

    while (node) {
      var nextNode = node.next;
      destroyNode(node);
      node = nextNode;
    }

    head = tail = null;
  }

  function insertBefore(node, value) {
    var insertedNode;
    node = getNodeFrom(node);

    if (node && nodes[node.nid]) {
      insertedNode = createNode(value, node, node.prev);

      if (head.nid === node.nid) {
        head = insertedNode;
      } else {
        node.prev.next = insertedNode;
      }

      node.prev = insertedNode;
    }

    return insertedNode ? insertedNode["public"] : null;
  }

  function insertAfter(node, value) {
    var insertedNode;
    node = getNodeFrom(node);

    if (node && nodes[node.nid]) {
      insertedNode = createNode(value, node.next, node);

      if (tail.nid === node.nid) {
        tail = insertedNode;
      } else {
        node.next.prev = insertedNode;
      }

      node.next = insertedNode;
    }

    return insertedNode ? insertedNode["public"] : null;
  }

  function map(fn) {
    var result = LinkedList();
    var node = head;

    while (node) {
      var nextNode = node.next;
      result.addToTail(fn(node.value));
      node = nextNode;
    }

    return result;
  }

  function forEach(fn) {
    var node = head;

    while (node) {
      var nextNode = node.next;
      fn(node.value);
      node = nextNode;
    }
  }

  function filter(fn) {
    var result = LinkedList();
    var node = head;

    while (node) {
      var nextNode = node.next;

      if (fn(node.value) === true) {
        result.addToTail(node.value);
      }

      node = nextNode;
    }

    return result;
  }

  function getIterable() {
    var node, nextNode;
    return regeneratorRuntime.wrap(function getIterable$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            node = head;

          case 1:
            if (!node) {
              _context.next = 8;
              break;
            }

            nextNode = node.next;
            _context.next = 5;
            return node.value;

          case 5:
            node = nextNode;
            _context.next = 1;
            break;

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _marked);
  }

  function getReverseIterable() {
    var node, prevNode;
    return regeneratorRuntime.wrap(function getReverseIterable$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            node = tail;

          case 1:
            if (!node) {
              _context2.next = 8;
              break;
            }

            prevNode = node.prev;
            _context2.next = 5;
            return node.value;

          case 5:
            node = prevNode;
            _context2.next = 1;
            break;

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _marked2);
  }

  function toArray() {
    var result = new Array(count);
    var i = 0;
    var node = head;

    while (node) {
      var nextNode = node.next;
      result[i++] = node.value;
      node = nextNode;
    }

    return result;
  }

  function toString() {
    return toArray().toString();
  }

  var linkedList = (_linkedList = {
    get head() {
      return head ? head["public"] : null;
    },

    get tail() {
      return tail ? tail["public"] : null;
    },

    get size() {
      return count;
    },

    addToHead: addToHead,
    addToTail: addToTail,
    moveToHead: moveToHead,
    moveToTail: moveToTail,
    removeHead: removeHead,
    removeTail: removeTail,
    remove: remove,
    removeAll: removeAll,
    insertBefore: insertBefore,
    insertAfter: insertAfter,
    map: map,
    forEach: forEach,
    filter: filter,
    getIterable: getIterable,
    getReverseIterable: getReverseIterable,
    toArray: toArray,
    toJSON: toArray,
    toString: toString
  }, _linkedList[Symbol.iterator] = getIterable, _linkedList);
  return linkedList;
}

LinkedList.from = function from(source) {
  var list = LinkedList();

  if (Array.isArray(source)) {
    source.forEach(function (item) {
      return void list.addToTail(item);
    });
  }

  return list;
};

var isNumber = function isNumber(n) {
  return typeof n === 'number';
};

function isObject(obj) {
  return typeof obj === 'object' && obj !== null;
}

function isPlainObject(obj) {
  if (!obj || typeof obj !== 'object' || {}.toString.call(obj) != '[object Object]') {
    return false;
  }

  var proto = Object.getPrototypeOf(obj);

  if (proto === null) {
    return true;
  }

  var ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof ctor == 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
}

function isNullOrUndefined(obj) {
  return obj === null || obj === undefined;
}

var isString = function isString(s) {
  return typeof s === 'string';
};

var isEmptyString = function isEmptyString(s) {
  return s.length === 0;
};

var isValidString = function isValidString(s) {
  return isString(s) && isEmptyString(s);
};

function errorToString(e) {
  var log;

  if (e instanceof Error) {
    log = JSON.stringify(Reflect.ownKeys(e).reduce(function (accumulator, currentValue) {
      return accumulator[currentValue] = e[currentValue], accumulator;
    }, {}));
  } else if (typeof e === 'object') {
    if (e !== null && e.constructor && e.constructor.name !== '' && e.constructor.name !== 'Object' && e.constructor.name !== 'Array') {
      log = e.constructor.name;
    } else {
      log = JSON.stringify(e);
    }
  } else if (typeof e === 'string') {
    log = e;
  } else {
    log = JSON.stringify(e);
  }

  return log;
}

exports.LinkedList = LinkedList;
exports.errorToString = errorToString;
exports.isArray = isArray;
exports.isArrayEqual = isArrayEqual;
exports.isBoolean = isBoolean;
exports.isEmptyString = isEmptyString;
exports.isFunction = isFunction;
exports.isInteger = isInteger;
exports.isNullOrUndefined = isNullOrUndefined;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isPlainObject = isPlainObject;
exports.isString = isString;
exports.isValidString = isValidString;
exports.shallowEqual = shallowEqual;
exports.toInteger = toInteger;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/BaseCmdLogic.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a7b33Aw/vZIZ6OEZyILO7+Z', 'BaseCmdLogic');
// scripts/BaseCmdLogic.js

"use strict";

var _require = require('./observable.cc'),
    Observable = _require.Observable;

var Photon = require('./Photon-Javascript_SDK');

var PhotonController = require('./Photon_Interface');

var PublicSetUp = require('PublicSetUp');
/**
@namespace BaseCmdLogic
處理登入、入局等底層訊息用
*/
// prevent globals renaming by closure compilier


var BaseCmdLogic;

(function (BaseCmdLogic) {
  var observable = Observable();
  /** 
    * 
    @class MainSrvCmdLogic
    */

  var MainSrvCmdLogic = function () {
    /** 
        @constructor
        @param {PhotonController.PhotonIf} pi photon interface
        */
    function MainSrvCmdLogic(pi) {
      this._pi = pi;
      this._lbSrvObj = null;
      this._account = '';
      this._password = '';
    } //constructor function end
    //login


    MainSrvCmdLogic.prototype.RunLogin = function (account, password, type) {
      this._account = account;
      this._password = password;
      this._type = type;

      this._pi.InitCallbackFunction(this, this.PeerStatusCallback, this.ResponseCallback, this.EventCallback);

      this._pi.connect(); //對main server做連線

    }; //set lobby server command logic


    MainSrvCmdLogic.prototype.SetLbSrvCmdLogicObj = function (lbSrvCmdLogicObj) {
      this._lbSrvObj = lbSrvCmdLogicObj;
    }; //photon peer status callback function


    MainSrvCmdLogic.prototype.PeerStatusCallback = function (st, selfObj) {
      switch (st) {
        case Photon.PhotonPeer.StatusCodes.connect:
          //已經連上 main server
          selfObj._pi.sendData(101, selfObj._account, selfObj._password, selfObj._type, 0, '', 999); //送出帳密


          break;
      }
    }; //photon peer reponse callback function


    MainSrvCmdLogic.prototype.ResponseCallback = function (vals, selfObj) {
      switch (vals[0]) {
        case 101:
          //server端登入回傳訊息
          if (vals[1] == 1) {//成功
            //直接等server通知 lobby server 資訊再做連線
          } else {
            switch (vals[1] //（0：失敗, 2：版本錯誤, 3：維護中, 4:重複登入, 5:之前遊戲局尚未結束 6：沒有進行遊戲的權限（洽客服））
            ) {
              case 0:
                console.log('登入Main Srv失敗');
                break;

              case 2:
                console.log('登入Main Srv版本錯誤');
                break;

              case 3:
                console.log('Main Srv維護中');
                break;

              case 4:
                console.log('Main Srv重複登入');
                break;

              case 5:
                console.log('之前遊戲局尚未結束');
                break;

              case 6:
                console.log('沒有進行遊戲的權限');
                break;
            }
          }

          break;
      } //console.log("ms response:"+vals);

    }; //photon peer event callback function


    MainSrvCmdLogic.prototype.EventCallback = function (vals, selfObj) {
      switch (vals[0]) {
        case 102:
          //由 main server通知的 lobby server 資訊
          //vals[1]:loginID
          //vals[2]:loginKey
          //vals[3]:protocol(0:Unknown 1:Udp 2:Tcp 3:WebSocket 4:Http 5:SecureWebSocket)
          //vals[4]:ip
          //vals[5]:port
          selfObj._lbSrvObj.ConnectToServer(vals[1], vals[2], vals[3], vals[4], vals[5]);

          break;
      } //console.log("ms event:"+evt);

    };

    return MainSrvCmdLogic;
  }(); //class end


  BaseCmdLogic.MainSrvCmdLogic = MainSrvCmdLogic;
  /** 
    * 
    @class LobbySrvCmdLogic
    */

  var LobbySrvCmdLogic = function () {
    /** 
        @constructor
        */
    function LobbySrvCmdLogic(gameid, versioncode) {
      this._pi = null;
      this._gameid = gameid;
      this._versioncode = versioncode;
      this._loginId = 0;
      this._loginKey = 0;
      this._gameSrvObj = null;
      this._protocolType = 0;
    } //constructor function end
    //connect to lobby server


    LobbySrvCmdLogic.prototype.ConnectToServer = function (loginId, loginKey, protocolType, ip, port) {
      this._loginId = loginId;
      this._loginKey = loginKey;
      this._protocolType = protocolType; //目前只會有 WebSocket 或 SecureWebSocket 兩種 protocol

      if (protocolType == 3) {
        //WebSocket
        this._pi = new PhotonController.PhotonIf(Photon.ConnectionProtocol.Ws, ip + ':' + port);
      } else if (protocolType == 5) {
        //SecureWebSocket
        this._pi = new PhotonController.PhotonIf(Photon.ConnectionProtocol.Wss, ip + ':' + port);
      }

      if (this._pi != null) {
        //設定 Photon Interface 物件的 Callback Function
        this._pi.InitCallbackFunction(this, this.PeerStatusCallback, this.ResponseCallback, this.EventCallback);

        this._pi.connect();
      }
    }; //set game server command logic


    LobbySrvCmdLogic.prototype.SetGameSrvCmdLogicObj = function (gameSrvCmdLogicObj) {
      this._gameSrvObj = gameSrvCmdLogicObj;
    }; //photon peer status callback function


    LobbySrvCmdLogic.prototype.PeerStatusCallback = function (st, selfObj) {
      switch (st) {
        case Photon.PhotonPeer.StatusCodes.connect:
          //已經連上 lobby server
          selfObj._pi.sendData(101, selfObj._loginId, selfObj._loginKey); //送出login id 與 key


          break;
      }
    }; //photon peer reponse callback function


    LobbySrvCmdLogic.prototype.ResponseCallback = function (vals, selfObj) {
      switch (vals[0]) {
        case 102:
          //登入狀態回覆
          if (vals[1] == 1) {
            ////狀態代碼（0：失敗, 1：成功, 2：版本錯誤, 3：維護中）
            //加入遊戲局（this._gameid）
            selfObj._pi.sendData(103, selfObj._gameid, -1, -1, selfObj._versioncode);
          } else {
            switch (vals[1]) {
              case 0:
                console.log('登入LB Srv 失敗');
                break;

              case 2:
                console.log('登入LB Srv版本錯誤');
                break;

              case 3:
                console.log('LB Srv 維護中');
                break;
            }
          }

          break;

        case 103:
          //server送回的game server連線資訊
          //vals[1]:loginID
          //vals[2]:loginKey
          //vals[3]:ip
          //vals[4]:port
          //vals[5]:result
          if (vals[5] == 1) {
            selfObj._gameSrvObj.ConnectToServer(vals[1], vals[2], selfObj._protocolType, vals[3], vals[4]);
          } else {
            switch (vals[5] //0：錯誤 1：成功 2:遊戲維護中 3:版本錯誤
            ) {
              case 0:
                console.log('加入game server遊戲局錯誤');
                break;

              case 2:
                console.log('Game Srv 遊戲維護中');
                break;

              case 3:
                console.log('要求加入Game Srv 版本錯誤');
                break;
            }
          }

          break;

        case 104:
          //加入game server遊戲局結果回覆(因為可能會被game server強制斷線，所以由lobby server進行回覆)
          if (vals[1] != 1) {
            //-1：建立房間失敗 0：錯誤 1:成功 2：點數不足 3：沒有進行遊戲的權限（洽客服） ], 4：無可用房間, 5：此玩家之前遊戲局未結束
            switch (vals[1]) {
              case -1:
                console.log('建立房間失敗');
                break;

              case 0:
                console.log('加入遊戲錯誤');
                break;

              case 2:
                console.log('點數不足');
                break;

              case 3:
                console.log('沒有進行遊戲的權限');
                break;

              case 4:
                console.log('無可用房間');
                break;

              case 5:
                console.log('此玩家之前遊戲局未結束');
                break;
            }
          }

          break;
      }

      console.log('ls response, cmd:' + vals[0]);
    }; //photon peer event callback function


    LobbySrvCmdLogic.prototype.EventCallback = function (vals, selfObj) {
      console.log('ls event, cmd:' + vals[0]);
    };

    return LobbySrvCmdLogic;
  }(); //class end


  BaseCmdLogic.LobbySrvCmdLogic = LobbySrvCmdLogic;
  /** 
    * 
    @class GameSrvBaseCmdLogic
    */

  var GameSrvBaseCmdLogic = function () {
    /** 
        @constructor
        */
    function GameSrvBaseCmdLogic(GameObj) {
      this._pi = null;
      this._GameCmdFuncObj = null;
      this._loginId = 0;
      this._loginKey = 0;
      this._GameObj = GameObj;
    } //constructor function end
    //connect to game server


    GameSrvBaseCmdLogic.prototype.ConnectToServer = function (loginId, loginKey, protocolType, ip, port) {
      console.log('connect to gs loginId:' + loginId + ', loginKey:' + loginKey + ', protocolType:' + protocolType + ', ip:' + ip + ', port:' + port);
      this._loginId = loginId;
      this._loginKey = loginKey; //目前只會有 WebSocket 或 SecureWebSocket 兩種 protocol

      if (protocolType == 3) {
        //WebSocket
        this._pi = new PhotonController.PhotonIf(Photon.ConnectionProtocol.Ws, ip + ':' + port);
      } else if (protocolType == 5) {
        //SecureWebSocket
        this._pi = new PhotonController.PhotonIf(Photon.ConnectionProtocol.Wss, ip + ':' + port);
      }

      if (this._pi != null) {
        //設定 Photon Interface 物件的 Callback Function
        this._pi.InitCallbackFunction(this, this.PeerStatusCallback, this.ResponseCallback, this.EventCallback);

        this._pi.connect();
      }
    }; //photon peer status callback function


    GameSrvBaseCmdLogic.prototype.PeerStatusCallback = function (st, selfObj) {
      switch (st) {
        case Photon.PhotonPeer.StatusCodes.connect:
          //已經連上 game server
          selfObj._pi.sendData(101, selfObj._loginId, selfObj._loginKey); //送出login id 與 key


          break;
      }
    }; //photon peer reponse callback function


    GameSrvBaseCmdLogic.prototype.ResponseCallback = function (vals, selfObj) {
      console.log('gs response, cmd:' + vals[0]);

      switch (vals[0]) {
        case 111:
          //收到game遊戲局已經準備完成的訊息（只會有一次）
          selfObj._pi.sendData(3161); //送出3161，取得本桌的資訊(通知server前端遊戲已經準備就緒)
          //押注為3162


          break;
        // case 3072: //　回傳本桌的資訊
        //   break;
        // case 3073: //　回傳押注結果資訊
        //   break;
        // case 3074: //　通知遊戲端免費遊戲結束
        //   break;

        default:
          selfObj._GameCmdFuncObj(vals, selfObj._pi, selfObj._GameObj);

          break;
      }
    }; //photon peer event callback function


    GameSrvBaseCmdLogic.prototype.EventCallback = function (vals, selfObj) {
      console.log('gs event, cmd:' + vals[0]);
    }; //set game cmd function


    GameSrvBaseCmdLogic.prototype.SetGameCmdFunc = function (FuncObj) {
      this._GameCmdFuncObj = FuncObj;
    }; //Get Photon Interface object


    GameSrvBaseCmdLogic.prototype.GetPI = function () {
      return this._pi;
    };

    return GameSrvBaseCmdLogic;
  }(); //class end


  BaseCmdLogic.GameSrvBaseCmdLogic = GameSrvBaseCmdLogic;
})(BaseCmdLogic || (BaseCmdLogic = {})); //namespace end


module.exports = BaseCmdLogic;
/*
    //優先處理底層server event，未處理的封包會透過 default 傳給外部物件
    PhotonIf.prototype.BaseEventCallback = function(vals, outObj){
        console.log("BaseEventCallback");
        switch(vals[0]){
            case 102:
                break;
            default:
                this._outEventCallback(vals, outObj);
                break;
        }
    }

    //處理 main server的封包訊息
    PhotonIf.prototype.ProcMainSrvResponse = function(vals, outObj){
        console.log("ProcMainSrvResponse, cmd id:"+vals[0]);
        switch(vals[0]){
            case 101:
                //console.log("vals 1:"+vals[1]);
                break;
            default:
                this._outRspCallback(vals, outObj);
                break;
        }
    };

    //處理 lobby server的封包訊息
    PhotonIf.prototype.ProcLobbySrvResponse = function(vals, outObj){
        console.log("ProcLobbySrvResponse, cmd id:"+vals[0]);
        switch(vals[0]){
            case 101:
                //console.log("vals 1:"+vals[1]);
                break;
            default:
                this._outRspCallback(vals, outObj);
                break;
        }
    };

    //處理 game server的封包訊息
    PhotonIf.prototype.ProcGameSrvResponse = function(vals, outObj){
        console.log("ProcGameSrvResponse, cmd id:"+vals[0]);
        switch(vals[0]){
            case 101:
                //console.log("vals 1:"+vals[1]);
                break;
            default:
                this._outRspCallback(vals, outObj);
                break;
        }
    };
*/

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/LoginScene.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ef982lYOk5KN6pGFtYS93Kz', 'LoginScene');
// scripts/LoginScene.js

"use strict";

var PublicSetUp = require('PublicSetUp');

var loadCount = 0;
cc.Class({
  "extends": cc.Component,
  properties: {
    AudioClip: {
      "default": [],
      type: [cc.AudioClip]
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    PublicSetUp.audio1 = this.AudioClip[0];
  },
  start: function start() {
    //Token登入
    var getUrlString = location.href;
    var url = new URL(getUrlString);

    if (url.searchParams.get('WebToken') != null) {
      cc.find("Canvas/Login").active = false;
      cc.director.loadScene('slot');
      return;
    } //帳號登入


    var accountEditBox = cc.find("Canvas/Login/Account").getComponent(cc.EditBox);
    var passwordEditBox = cc.find("Canvas/Login/Password").getComponent(cc.EditBox);
    var message = cc.find("Canvas/Login/message").getComponent(cc.Label);
    accountEditBox.string = 'gtest001';
    passwordEditBox.string = 'gtest001';
    var okButton = cc.find("Canvas/Login/Ok").getComponent(cc.Button);
    okButton.node.on('click', function () {
      if (accountEditBox.string.length === 0 || passwordEditBox.string.length === 0) {
        return;
      }

      PublicSetUp.loginType = 0;
      PublicSetUp.account = accountEditBox.string;
      PublicSetUp.password = passwordEditBox.string;
      cc.find("Canvas/lock").active = true;
      cc.director.loadScene('slot');
    });
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTG9naW5TY2VuZS5qcyJdLCJuYW1lcyI6WyJQdWJsaWNTZXRVcCIsInJlcXVpcmUiLCJsb2FkQ291bnQiLCJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIkF1ZGlvQ2xpcCIsInR5cGUiLCJvbkxvYWQiLCJhdWRpbzEiLCJzdGFydCIsImdldFVybFN0cmluZyIsImxvY2F0aW9uIiwiaHJlZiIsInVybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsImdldCIsImZpbmQiLCJhY3RpdmUiLCJkaXJlY3RvciIsImxvYWRTY2VuZSIsImFjY291bnRFZGl0Qm94IiwiZ2V0Q29tcG9uZW50IiwiRWRpdEJveCIsInBhc3N3b3JkRWRpdEJveCIsIm1lc3NhZ2UiLCJMYWJlbCIsInN0cmluZyIsIm9rQnV0dG9uIiwiQnV0dG9uIiwibm9kZSIsIm9uIiwibGVuZ3RoIiwibG9naW5UeXBlIiwiYWNjb3VudCIsInBhc3N3b3JkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLFdBQVcsR0FBQ0MsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBR0EsSUFBSUMsU0FBUyxHQUFHLENBQWhCO0FBQ0FDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRTtBQUNWQyxJQUFBQSxTQUFTLEVBQUU7QUFDVCxpQkFBUyxFQURBO0FBRVRDLE1BQUFBLElBQUksRUFBRSxDQUFDTCxFQUFFLENBQUNJLFNBQUo7QUFGRztBQURELEdBSFA7QUFVTDtBQUVDRSxFQUFBQSxNQVpJLG9CQVlNO0FBQ1RULElBQUFBLFdBQVcsQ0FBQ1UsTUFBWixHQUFxQixLQUFLSCxTQUFMLENBQWUsQ0FBZixDQUFyQjtBQUlBLEdBakJHO0FBbUJMSSxFQUFBQSxLQW5CSyxtQkFtQkk7QUFFUDtBQUNBLFFBQUlDLFlBQVksR0FBR0MsUUFBUSxDQUFDQyxJQUE1QjtBQUNBLFFBQUlDLEdBQUcsR0FBRyxJQUFJQyxHQUFKLENBQVFKLFlBQVIsQ0FBVjs7QUFFQSxRQUFHRyxHQUFHLENBQUNFLFlBQUosQ0FBaUJDLEdBQWpCLENBQXFCLFVBQXJCLEtBQWtDLElBQXJDLEVBQTBDO0FBQ3hDZixNQUFBQSxFQUFFLENBQUNnQixJQUFILENBQVEsY0FBUixFQUF3QkMsTUFBeEIsR0FBK0IsS0FBL0I7QUFDQWpCLE1BQUFBLEVBQUUsQ0FBQ2tCLFFBQUgsQ0FBWUMsU0FBWixDQUFzQixNQUF0QjtBQUNBO0FBQ0QsS0FWTSxDQVlQOzs7QUFDQSxRQUFJQyxjQUFjLEdBQUdwQixFQUFFLENBQUNnQixJQUFILENBQVEsc0JBQVIsRUFBZ0NLLFlBQWhDLENBQTZDckIsRUFBRSxDQUFDc0IsT0FBaEQsQ0FBckI7QUFDRSxRQUFJQyxlQUFlLEdBQUd2QixFQUFFLENBQUNnQixJQUFILENBQVEsdUJBQVIsRUFBaUNLLFlBQWpDLENBQThDckIsRUFBRSxDQUFDc0IsT0FBakQsQ0FBdEI7QUFDQSxRQUFJRSxPQUFPLEdBQUd4QixFQUFFLENBQUNnQixJQUFILENBQVEsc0JBQVIsRUFBZ0NLLFlBQWhDLENBQTZDckIsRUFBRSxDQUFDeUIsS0FBaEQsQ0FBZDtBQUVBTCxJQUFBQSxjQUFjLENBQUNNLE1BQWYsR0FBc0IsVUFBdEI7QUFDQUgsSUFBQUEsZUFBZSxDQUFDRyxNQUFoQixHQUF1QixVQUF2QjtBQUNBLFFBQU1DLFFBQVEsR0FBRzNCLEVBQUUsQ0FBQ2dCLElBQUgsQ0FBUSxpQkFBUixFQUEyQkssWUFBM0IsQ0FBd0NyQixFQUFFLENBQUM0QixNQUEzQyxDQUFqQjtBQUVBRCxJQUFBQSxRQUFRLENBQUNFLElBQVQsQ0FBY0MsRUFBZCxDQUFpQixPQUFqQixFQUEwQixZQUFNO0FBQzlCLFVBQUlWLGNBQWMsQ0FBQ00sTUFBZixDQUFzQkssTUFBdEIsS0FBaUMsQ0FBakMsSUFBc0NSLGVBQWUsQ0FBQ0csTUFBaEIsQ0FBdUJLLE1BQXZCLEtBQWtDLENBQTVFLEVBQStFO0FBQzdFO0FBQ0Q7O0FBQ0RsQyxNQUFBQSxXQUFXLENBQUNtQyxTQUFaLEdBQXNCLENBQXRCO0FBQ0FuQyxNQUFBQSxXQUFXLENBQUNvQyxPQUFaLEdBQW9CYixjQUFjLENBQUNNLE1BQW5DO0FBQ0E3QixNQUFBQSxXQUFXLENBQUNxQyxRQUFaLEdBQXFCWCxlQUFlLENBQUNHLE1BQXJDO0FBQ0ExQixNQUFBQSxFQUFFLENBQUNnQixJQUFILENBQVEsYUFBUixFQUF1QkMsTUFBdkIsR0FBOEIsSUFBOUI7QUFFQWpCLE1BQUFBLEVBQUUsQ0FBQ2tCLFFBQUgsQ0FBWUMsU0FBWixDQUFzQixNQUF0QjtBQUNELEtBVkQ7QUFlSCxHQXZESSxDQXlETDs7QUF6REssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFB1YmxpY1NldFVwPXJlcXVpcmUoJ1B1YmxpY1NldFVwJyk7XHJcblxyXG5cclxubGV0IGxvYWRDb3VudCA9IDA7XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgIEF1ZGlvQ2xpcDoge1xyXG4gICAgICAgIGRlZmF1bHQ6IFtdLFxyXG4gICAgICAgIHR5cGU6IFtjYy5BdWRpb0NsaXBdLFxyXG4gICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XHJcblxyXG4gICAgIG9uTG9hZCAoKSB7XHJcbiAgICAgIFB1YmxpY1NldFVwLmF1ZGlvMSA9IHRoaXMuQXVkaW9DbGlwWzBdO1xyXG5cclxuXHJcbiAgIFxyXG4gICAgIH0sXHJcblxyXG4gICAgc3RhcnQgKCkge1xyXG5cclxuICAgICAgLy9Ub2tlbueZu+WFpVxyXG4gICAgICB2YXIgZ2V0VXJsU3RyaW5nID0gbG9jYXRpb24uaHJlZjtcclxuICAgICAgdmFyIHVybCA9IG5ldyBVUkwoZ2V0VXJsU3RyaW5nKTsgICBcclxuXHJcbiAgICAgIGlmKHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdXZWJUb2tlbicpIT1udWxsKXtcclxuICAgICAgICBjYy5maW5kKFwiQ2FudmFzL0xvZ2luXCIpLmFjdGl2ZT1mYWxzZVxyXG4gICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnc2xvdCcpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy/luLPomZ/nmbvlhaVcclxuICAgICAgbGV0IGFjY291bnRFZGl0Qm94ID0gY2MuZmluZChcIkNhbnZhcy9Mb2dpbi9BY2NvdW50XCIpLmdldENvbXBvbmVudChjYy5FZGl0Qm94KTtcclxuICAgICAgICBsZXQgcGFzc3dvcmRFZGl0Qm94ID0gY2MuZmluZChcIkNhbnZhcy9Mb2dpbi9QYXNzd29yZFwiKS5nZXRDb21wb25lbnQoY2MuRWRpdEJveCk7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBjYy5maW5kKFwiQ2FudmFzL0xvZ2luL21lc3NhZ2VcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKTtcclxuXHJcbiAgICAgICAgYWNjb3VudEVkaXRCb3guc3RyaW5nPSdndGVzdDAwMSc7XHJcbiAgICAgICAgcGFzc3dvcmRFZGl0Qm94LnN0cmluZz0nZ3Rlc3QwMDEnXHJcbiAgICAgICAgY29uc3Qgb2tCdXR0b24gPSBjYy5maW5kKFwiQ2FudmFzL0xvZ2luL09rXCIpLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xyXG5cclxuICAgICAgICBva0J1dHRvbi5ub2RlLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgIGlmIChhY2NvdW50RWRpdEJveC5zdHJpbmcubGVuZ3RoID09PSAwIHx8IHBhc3N3b3JkRWRpdEJveC5zdHJpbmcubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFB1YmxpY1NldFVwLmxvZ2luVHlwZT0wO1xyXG4gICAgICAgICAgUHVibGljU2V0VXAuYWNjb3VudD1hY2NvdW50RWRpdEJveC5zdHJpbmc7XHJcbiAgICAgICAgICBQdWJsaWNTZXRVcC5wYXNzd29yZD1wYXNzd29yZEVkaXRCb3guc3RyaW5nO1xyXG4gICAgICAgICAgY2MuZmluZChcIkNhbnZhcy9sb2NrXCIpLmFjdGl2ZT10cnVlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoJ3Nsb3QnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgIFxyXG4gICAgICBcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/performanceController.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '56909yQz7dAZqiahqpg8Jba', 'performanceController');
// scripts/performanceController.js

"use strict";

var _buildSymbols = _interopRequireDefault(require("./buildSymbols"));

var _co = _interopRequireDefault(require("./co.cc"));

var _playAll = _interopRequireDefault(require("./playAll"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _freeSpinAnim = _interopRequireDefault(require("./freeSpinAnim"));

var _requestTableInfo = _interopRequireDefault(require("./requestTableInfo"));

var _requestGameResult = _interopRequireDefault(require("./requestGameResult"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var PublicSetUp = require('PublicSetUp');

cc.Class({
  "extends": cc.Component,
  properties: {},
  onLoad: function onLoad() {
    //cc.audioEngine.playMusic(this.MusicClip, true);
    cc.find('Symbols', this.node).active = false;
    cc.find('Effect', this.node).active = false;
    var linesNode = cc.find('Lines', this.node);

    for (var i = 0; i < linesNode.childrenCount; i++) {
      linesNode.getChildByName("" + (i + 1)).active = false;
    }

    var anchorsNode = cc.find('Anchors', this.node);

    for (var _i = 1; _i <= 5; _i++) {
      var col = anchorsNode.getChildByName("" + _i);

      for (var j = 1; j <= 3; j++) {
        var row = col.getChildByName("" + j);
        row.getComponent(cc.Sprite).spriteFrame = null;
      }
    }
  },
  start: function start() {
    cc.store.symbolDataList = new Array(5);
    cc.store.randomSymbolDataList = new Array(cc.store.symbolDataList.length);
    var _cc$store = cc.store,
        symbolDataList = _cc$store.symbolDataList,
        randomSymbolDataList = _cc$store.randomSymbolDataList;

    for (var i = 0; i < randomSymbolDataList.length; i++) {
      symbolDataList[i] = new Array(24);
      randomSymbolDataList[i] = new Array(symbolDataList[i].length);

      for (var j = 0, jcnt = randomSymbolDataList[i].length; j < jcnt; j++) {
        randomSymbolDataList[i][j] = Math.floor(Math.random() * 11);
      }
    }

    var iGrid = cc.store.gameResult.iGrid;

    for (var _i2 = 0; _i2 < symbolDataList.length; _i2++) {
      (0, _shuffle["default"])(randomSymbolDataList[_i2]);

      var _j = void 0,
          k = void 0;

      _j = 0;

      while (_j < 3) {
        symbolDataList[_i2][_j] = iGrid[_i2 + 5 * (2 - _j)];
        _j++;
      }

      k = symbolDataList[_i2].length;

      while (_j < k) {
        symbolDataList[_i2][_j] = randomSymbolDataList[_i2][_j];
        _j++;
      }
    }

    (0, _buildSymbols["default"])(symbolDataList);

    _co["default"].start( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _cc$store2, _symbolDataList, _randomSymbolDataList, iGrid0, _i3, _j2, _k;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!true) {
                _context.next = 17;
                break;
              }

              cc.store.gameResultGotStatus = 0;
              _cc$store2 = cc.store, _symbolDataList = _cc$store2.symbolDataList, _randomSymbolDataList = _cc$store2.randomSymbolDataList;
              iGrid0 = cc.store.gameResult.iGrid;

              for (_i3 = 0; _i3 < _symbolDataList.length; _i3++) {
                (0, _shuffle["default"])(_randomSymbolDataList[_i3]);
                _j2 = void 0, _k = void 0;
                _j2 = 0;
                _k = _symbolDataList[_i3].length - 1;

                while (_j2 < 3) {
                  _symbolDataList[_i3][_j2] = iGrid0[_i3 + 5 * (2 - _j2)];
                  _symbolDataList[_i3][_k - _j2] = iGrid0[_i3 + 5 * _j2];
                  _j2++;
                }

                _k = _symbolDataList[_i3].length - 3;

                while (_j2 < _k) {
                  _symbolDataList[_i3][_j2] = _randomSymbolDataList[_i3][_j2];
                  _j2++;
                }
              }

              (0, _buildSymbols["default"])(_symbolDataList);
              _context.next = 8;
              return _co["default"].waitUntil(function () {
                return cc.store.playing === true;
              });

            case 8:
              //yield freeSpinAnim();
              (0, _requestGameResult["default"])();
              _context.next = 11;
              return (0, _playAll["default"])();

            case 11:
              (0, _requestTableInfo["default"])();

              if (!(cc.store.playing === true)) {
                _context.next = 15;
                break;
              }

              _context.next = 15;
              return _co["default"].waitForSeconds(1.2);

            case 15:
              _context.next = 0;
              break;

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/login.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '85648I+CixBf4DWMENK4Ole', 'login');
// scripts/login.js

"use strict";

var _connectToServer = _interopRequireDefault(require("./connectToServer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var accountEditBox = this.node.getChildByName('Account').getComponent(cc.EditBox);
    var passwordEditBox = this.node.getChildByName('Password').getComponent(cc.EditBox);
    var okButton = this.node.getChildByName('Ok').getComponent(cc.Button);
    okButton.node.on('click', function () {
      if (accountEditBox.string.length === 0 || passwordEditBox.string.length === 0) {
        return;
      }

      accountEditBox.enabled = false;
      passwordEditBox.enabled = false;
      okButton.interactable = false;
      (0, _connectToServer["default"])('213.139.235.73', 6380, accountEditBox.string, passwordEditBox.string);
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbG9naW4uanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsIm9uTG9hZCIsImFjY291bnRFZGl0Qm94Iiwibm9kZSIsImdldENoaWxkQnlOYW1lIiwiZ2V0Q29tcG9uZW50IiwiRWRpdEJveCIsInBhc3N3b3JkRWRpdEJveCIsIm9rQnV0dG9uIiwiQnV0dG9uIiwib24iLCJzdHJpbmciLCJsZW5ndGgiLCJlbmFibGVkIiwiaW50ZXJhY3RhYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ1AsYUFBU0QsRUFBRSxDQUFDRSxTQURMO0FBR1BDLEVBQUFBLE1BSE8sb0JBR0U7QUFDUCxRQUFNQyxjQUFjLEdBQUcsS0FBS0MsSUFBTCxDQUFVQyxjQUFWLENBQXlCLFNBQXpCLEVBQW9DQyxZQUFwQyxDQUFpRFAsRUFBRSxDQUFDUSxPQUFwRCxDQUF2QjtBQUNBLFFBQU1DLGVBQWUsR0FBRyxLQUFLSixJQUFMLENBQVVDLGNBQVYsQ0FBeUIsVUFBekIsRUFBcUNDLFlBQXJDLENBQWtEUCxFQUFFLENBQUNRLE9BQXJELENBQXhCO0FBQ0EsUUFBTUUsUUFBUSxHQUFHLEtBQUtMLElBQUwsQ0FBVUMsY0FBVixDQUF5QixJQUF6QixFQUErQkMsWUFBL0IsQ0FBNENQLEVBQUUsQ0FBQ1csTUFBL0MsQ0FBakI7QUFDQUQsSUFBQUEsUUFBUSxDQUFDTCxJQUFULENBQWNPLEVBQWQsQ0FBaUIsT0FBakIsRUFBMEIsWUFBTTtBQUM5QixVQUFJUixjQUFjLENBQUNTLE1BQWYsQ0FBc0JDLE1BQXRCLEtBQWlDLENBQWpDLElBQXNDTCxlQUFlLENBQUNJLE1BQWhCLENBQXVCQyxNQUF2QixLQUFrQyxDQUE1RSxFQUErRTtBQUM3RTtBQUNEOztBQUNEVixNQUFBQSxjQUFjLENBQUNXLE9BQWYsR0FBeUIsS0FBekI7QUFDQU4sTUFBQUEsZUFBZSxDQUFDTSxPQUFoQixHQUEwQixLQUExQjtBQUNBTCxNQUFBQSxRQUFRLENBQUNNLFlBQVQsR0FBd0IsS0FBeEI7QUFDQSx1Q0FBZ0IsZ0JBQWhCLEVBQWtDLElBQWxDLEVBQXdDWixjQUFjLENBQUNTLE1BQXZELEVBQStESixlQUFlLENBQUNJLE1BQS9FO0FBQ0QsS0FSRDtBQVNEO0FBaEJNLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25uZWN0VG9TZXJ2ZXIgZnJvbSAnLi9jb25uZWN0VG9TZXJ2ZXInO1xyXG5cclxuY2MuQ2xhc3Moe1xyXG4gIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgY29uc3QgYWNjb3VudEVkaXRCb3ggPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoJ0FjY291bnQnKS5nZXRDb21wb25lbnQoY2MuRWRpdEJveCk7XHJcbiAgICBjb25zdCBwYXNzd29yZEVkaXRCb3ggPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoJ1Bhc3N3b3JkJykuZ2V0Q29tcG9uZW50KGNjLkVkaXRCb3gpO1xyXG4gICAgY29uc3Qgb2tCdXR0b24gPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoJ09rJykuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbik7XHJcbiAgICBva0J1dHRvbi5ub2RlLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgaWYgKGFjY291bnRFZGl0Qm94LnN0cmluZy5sZW5ndGggPT09IDAgfHwgcGFzc3dvcmRFZGl0Qm94LnN0cmluZy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgYWNjb3VudEVkaXRCb3guZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICBwYXNzd29yZEVkaXRCb3guZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICBva0J1dHRvbi5pbnRlcmFjdGFibGUgPSBmYWxzZTtcclxuICAgICAgY29ubmVjdFRvU2VydmVyKCcyMTMuMTM5LjIzNS43MycsIDYzODAsIGFjY291bnRFZGl0Qm94LnN0cmluZywgcGFzc3dvcmRFZGl0Qm94LnN0cmluZyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/getSymbolAnchor.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e0de66QVMBJKYV/WAVPXtub', 'getSymbolAnchor');
// scripts/getSymbolAnchor.js

"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var getSymbolAnchor = function () {
  var cached = {};
  return function getSymbolAnchor(symbolGridIndex) {
    var col = Math.floor(symbolGridIndex / 3);
    var row = symbolGridIndex % 3;
    var path = "Canvas/Game/Machine/Performance/Anchors/" + (col + 1) + "/" + (row + 1);
    var node = cached[path];

    if (node === undefined) {
      node = cached[path] = cc.find(path);
    }

    return node;
  };
}();

var _default = getSymbolAnchor;
exports["default"] = _default;
module.exports = exports["default"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcZ2V0U3ltYm9sQW5jaG9yLmpzIl0sIm5hbWVzIjpbImdldFN5bWJvbEFuY2hvciIsImNhY2hlZCIsInN5bWJvbEdyaWRJbmRleCIsImNvbCIsIk1hdGgiLCJmbG9vciIsInJvdyIsInBhdGgiLCJub2RlIiwidW5kZWZpbmVkIiwiY2MiLCJmaW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQU1BLGVBQWUsR0FBSSxZQUFZO0FBQ25DLE1BQU1DLE1BQU0sR0FBRyxFQUFmO0FBRUEsU0FBTyxTQUFTRCxlQUFULENBQXlCRSxlQUF6QixFQUEwQztBQUMvQyxRQUFNQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxlQUFlLEdBQUcsQ0FBN0IsQ0FBWjtBQUNBLFFBQU1JLEdBQUcsR0FBR0osZUFBZSxHQUFHLENBQTlCO0FBQ0EsUUFBTUssSUFBSSxpREFBOENKLEdBQUcsR0FBRyxDQUFwRCxXQUF5REcsR0FBRyxHQUFHLENBQS9ELENBQVY7QUFDQSxRQUFJRSxJQUFJLEdBQUdQLE1BQU0sQ0FBQ00sSUFBRCxDQUFqQjs7QUFDQSxRQUFJQyxJQUFJLEtBQUtDLFNBQWIsRUFBd0I7QUFDdEJELE1BQUFBLElBQUksR0FBR1AsTUFBTSxDQUFDTSxJQUFELENBQU4sR0FBZUcsRUFBRSxDQUFDQyxJQUFILENBQVFKLElBQVIsQ0FBdEI7QUFDRDs7QUFDRCxXQUFPQyxJQUFQO0FBQ0QsR0FURDtBQVVELENBYnVCLEVBQXhCOztlQWVlUiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2V0U3ltYm9sQW5jaG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCBjYWNoZWQgPSB7fTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFN5bWJvbEFuY2hvcihzeW1ib2xHcmlkSW5kZXgpIHtcclxuICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3Ioc3ltYm9sR3JpZEluZGV4IC8gMyk7XHJcbiAgICBjb25zdCByb3cgPSBzeW1ib2xHcmlkSW5kZXggJSAzO1xyXG4gICAgY29uc3QgcGF0aCA9IGBDYW52YXMvR2FtZS9NYWNoaW5lL1BlcmZvcm1hbmNlL0FuY2hvcnMvJHtjb2wgKyAxfS8ke3JvdyArIDF9YDtcclxuICAgIGxldCBub2RlID0gY2FjaGVkW3BhdGhdO1xyXG4gICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBub2RlID0gY2FjaGVkW3BhdGhdID0gY2MuZmluZChwYXRoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBub2RlO1xyXG4gIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xBbmNob3I7XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/homeButton.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e0f0fpDjTFD5KItGQKTAbjQ', 'homeButton');
// scripts/homeButton.js

"use strict";

cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    var button = this.node.getComponent(cc.Button);
    button.node.on('click', function () {});
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcaG9tZUJ1dHRvbi5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50Iiwib25Mb2FkIiwiYnV0dG9uIiwibm9kZSIsImdldENvbXBvbmVudCIsIkJ1dHRvbiIsIm9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNQLGFBQVNELEVBQUUsQ0FBQ0UsU0FETDtBQUdQQyxFQUFBQSxNQUhPLG9CQUdFO0FBQ1AsUUFBTUMsTUFBTSxHQUFHLEtBQUtDLElBQUwsQ0FBVUMsWUFBVixDQUF1Qk4sRUFBRSxDQUFDTyxNQUExQixDQUFmO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRyxFQUFaLENBQWUsT0FBZixFQUF3QixZQUFNLENBQUUsQ0FBaEM7QUFDRDtBQU5NLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcclxuICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gIG9uTG9hZCgpIHtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcclxuICAgIGJ1dHRvbi5ub2RlLm9uKCdjbGljaycsICgpID0+IHt9KTtcclxuICB9XHJcbn0pO1xyXG4iXX0=
//------QC-SOURCE-SPLIT------
